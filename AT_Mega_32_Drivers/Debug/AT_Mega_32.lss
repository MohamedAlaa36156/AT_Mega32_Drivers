
AT_Mega_32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  000035ac  00003620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000396c  00000000  00000000  00003784  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001572  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00008662  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  000087e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  000089b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000a9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  0000bb34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000cb38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000cf99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d847  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 63 06 	call	0xcc6	; 0xcc6 <main>
      7a:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <main>:
#include "../SERV/stdtypes.h"
#include "../MCAL/DIO/dio_int.h"
#include "../MCAL/SPI/SPI_INIT.h"

int main (void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	SPI_Master_Init();
     cd0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <SPI_Master_Init>
	SPI_MASTER_Slave_SELECTION_ON();
     cd4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <SPI_MASTER_Slave_SELECTION_ON>

	DIO_u8Set_Pin_Dir(PORT_A,PIN_0,INPUT);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Val(PORT_A,PIN_0,PUE);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	uint8 x;


	while (1)
	{
		DIO_u8Get_Pin_Val(PORT_A,PIN_0,&x);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	9e 01       	movw	r18, r28
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	a9 01       	movw	r20, r18
     cf8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DIO_u8Get_Pin_Val>

		if(x==1)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	21 f4       	brne	.+8      	; 0xd0a <main+0x44>
		{
			SPI_u8_TRANCIEVE_BYTE_POLLING(0x01);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 9e 08 	call	0x113c	; 0x113c <SPI_u8_TRANCIEVE_BYTE_POLLING>
     d08:	f1 cf       	rjmp	.-30     	; 0xcec <main+0x26>
		}
		else
		{
			SPI_u8_TRANCIEVE_BYTE_POLLING(0x00);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0e 94 9e 08 	call	0x113c	; 0x113c <SPI_u8_TRANCIEVE_BYTE_POLLING>
     d10:	ed cf       	rjmp	.-38     	; 0xcec <main+0x26>

00000d12 <Timer_0_Init>:
#include "timer_counter_int.h"
#include "timer_counter_reg.h"


void Timer_0_Init (void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     d1a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <EXT_INT_Global_Enable>
	/*
	 * Setting COUNTING REGISTER Initial value
	 */
	TCNT0_REG=TCNT0_INIT_VALUE;
     d1e:	e2 e5       	ldi	r30, 0x52	; 82
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	10 82       	st	Z, r1
	/**********************************/
/*
 * Setting COUNTING REGISTER Initial value
 */
	OCR0_REG=OCR0_INIT_VALUE;
     d24:	ec e5       	ldi	r30, 0x5C	; 92
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	8e e1       	ldi	r24, 0x1E	; 30
     d2a:	80 83       	st	Z, r24
	/*
	 * SELECT WAVE GENERATION MODE
	 */
	TCCR0_REG|=TIMER_0_WAVE_GEN_MODE;
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 64       	ori	r24, 0x48	; 72
     d38:	8c 93       	st	X, r24
	/*******************************/
	/*
	 * Choosing Compare Mode
	 */
	TCCR0_REG|=COMPARE_MODE_TIMER_0;
     d3a:	a3 e5       	ldi	r26, 0x53	; 83
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e3 e5       	ldi	r30, 0x53	; 83
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 63       	ori	r24, 0x30	; 48
     d46:	8c 93       	st	X, r24

	/*
	 * Enable Interrupt
	 */

	TIMSK_REG|=TIMER_0_INT_MODE;
     d48:	a9 e5       	ldi	r26, 0x59	; 89
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e9 e5       	ldi	r30, 0x59	; 89
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	82 60       	ori	r24, 0x02	; 2
     d54:	8c 93       	st	X, r24
	//
	//	SET_BIT(TCCR0_REG,WGM00);
	//	SET_BIT(TCCR0_REG,WGM01);
	//#endif

}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <Timer_0_Start_Count>:
void Timer_0_Start_Count(void)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	cd b7       	in	r28, 0x3d	; 61
     d62:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setting Prescaler
	 */

	TCCR0_REG|=PRESCALING_TIMER_0;
     d64:	a3 e5       	ldi	r26, 0x53	; 83
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e3 e5       	ldi	r30, 0x53	; 83
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24

	/************************/
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <Timer_0_Base_Count_Set>:

void Timer_0_Base_Count_Set(uint8 u8Set_Val_Copy)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG=u8Set_Val_Copy;
     d84:	e2 e5       	ldi	r30, 0x52	; 82
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24
}
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <Timer_0_CMP_Max_Set>:
void Timer_0_CMP_Max_Set(uint8 u8Set_Val_Copy)
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG=u8Set_Val_Copy;
     da0:	ec e5       	ldi	r30, 0x5C	; 92
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	80 83       	st	Z, r24
}
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <Timer_2_Init>:

void Timer_2_Init (void)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     db8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <EXT_INT_Global_Enable>
/*
 * Setting Counting Register Initial Value
 */
	TCNT2_REG=TCNT2_INIT_VALUE;
     dbc:	e4 e4       	ldi	r30, 0x44	; 68
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	10 82       	st	Z, r1
	/*
	 * Setting COUNTING REGISTER Initial value
	 */
	OCR2_REG=OCR2_INIT_VALUE;
     dc2:	e3 e4       	ldi	r30, 0x43	; 67
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	83 ec       	ldi	r24, 0xC3	; 195
     dc8:	80 83       	st	Z, r24
	/*
	 * SELECT WAVE GENERATION MODE
	 */
	TCCR2_REG|=TIMER_2_WAVE_GEN_MODE;
     dca:	a5 e4       	ldi	r26, 0x45	; 69
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e5 e4       	ldi	r30, 0x45	; 69
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 64       	ori	r24, 0x40	; 64
     dd6:	8c 93       	st	X, r24
	/*******************************/

	/*
	 * Enable Interrupt
	 */
	TIMSK_REG|=TIMER_2_INT_MODE;
     dd8:	a9 e5       	ldi	r26, 0x59	; 89
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e9 e5       	ldi	r30, 0x59	; 89
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	80 68       	ori	r24, 0x80	; 128
     de4:	8c 93       	st	X, r24

	/*
	 * Compare Mode
	 */

	TCCR2_REG|=COMPARE_MODE_TIMER_2;
     de6:	a5 e4       	ldi	r26, 0x45	; 69
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e5 e4       	ldi	r30, 0x45	; 69
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8c 93       	st	X, r24
//#elif MODE_TIMER_2==FAST_PWM
//
//	SET_BIT(TCCR2_REG,WGM20);
//	SET_BIT(TCCR2_REG,WGM21);
//#endif
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <Timer_2_Start_Count>:
void Timer_2_Start_Count(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setting Prescaler
	 */
	TCCR2_REG|=PRESCALING_TIMER_2;
     e00:	a5 e4       	ldi	r26, 0x45	; 69
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e5 e4       	ldi	r30, 0x45	; 69
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	87 60       	ori	r24, 0x07	; 7
     e0c:	8c 93       	st	X, r24
	/************************/
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <Timer_2_Base_Count_Set>:
void Timer_2_Base_Count_Set(uint8 u8Set_Val_Copy)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_REG=u8Set_Val_Copy;
     e20:	e4 e4       	ldi	r30, 0x44	; 68
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	80 83       	st	Z, r24

}
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <Timer_2_CMP_Max_Set>:
void Timer_2_CMP_Max_Set(uint8 u8Set_Val_Copy)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG=u8Set_Val_Copy;
     e3c:	e3 e4       	ldi	r30, 0x43	; 67
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	80 83       	st	Z, r24
}
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <Timer_0_1_Scaler_Reset>:

void Timer_0_1_Scaler_Reset(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Calling This Function Will reset Timer 0 and Timer 1 Prescalers
	 */
	SET_BIT(SFIOR_REG,PSR10_BIT);
     e54:	a0 e5       	ldi	r26, 0x50	; 80
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e0 e5       	ldi	r30, 0x50	; 80
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	81 60       	ori	r24, 0x01	; 1
     e60:	8c 93       	st	X, r24
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Timer_1_Init>:

void Timer_1_Init(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     e70:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <EXT_INT_Global_Enable>
	/*
	 * Setting Counting Register Initial Value
	 */
	TCNT1_REG=TCNT1_INIT_VAL;
     e74:	ec e4       	ldi	r30, 0x4C	; 76
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	11 82       	std	Z+1, r1	; 0x01
     e7a:	10 82       	st	Z, r1
	/*
	 * Setting Counting Register Compare Match Register A Value
	 */
	OCR1A_REG=OCR1A_INIT_VAL;
     e7c:	ea e4       	ldi	r30, 0x4A	; 74
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	11 82       	std	Z+1, r1	; 0x01
     e82:	10 82       	st	Z, r1
	/*
	 * Setting Counting Register Compare Match Register B Value
	 */
	OCR1B_REG=OCR1B_INIT_VAL;
     e84:	e8 e4       	ldi	r30, 0x48	; 72
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	11 82       	std	Z+1, r1	; 0x01
     e8a:	10 82       	st	Z, r1

	if((TIMER_1_COMP_MODE_A==0x00)||(TIMER_1_COMP_MODE_A==0x40)||(TIMER_1_COMP_MODE_A==0x80)||(TIMER_1_COMP_MODE_A==0xC0))
	{
		TCCR1A_REG|=TIMER_1_COMP_MODE_A;
     e8c:	af e4       	ldi	r26, 0x4F	; 79
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ef e4       	ldi	r30, 0x4F	; 79
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 6c       	ori	r24, 0xC0	; 192
     e98:	8c 93       	st	X, r24
		TCCR1A_REG|=TIMER_1_COMP_MODE_B;
	}
#if INPUT_CAPTURE_EDGE_SELECT==INPUT_CAPTURE_FALLING
	SET_BIT(TCCR1B_REG,ICES1);
#elif	INPUT_CAPTURE_EDGE_SELECT==INPUT_CAPTURE_RISING
	CLR_BIT(TCCR1B_REG,ICES1);
     e9a:	ae e4       	ldi	r26, 0x4E	; 78
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ee e4       	ldi	r30, 0x4E	; 78
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	8c 93       	st	X, r24
#endif


#if TIMER_1_INPUT_CPT_INT_EN==ON
	SET_BIT(TIMSK_REG,TICIE1);
     ea8:	a9 e5       	ldi	r26, 0x59	; 89
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e9 e5       	ldi	r30, 0x59	; 89
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	8c 93       	st	X, r24
#endif
#if TIMER_1_INPUT_CMP_B_INT_EN==ON
	SET_BIT(TIMSK_REG,OCIE1B);
#endif
#if TIMER_1_INPUT_OVF_INT_EN==ON
	SET_BIT(TIMSK_REG,TOIE1);
     eb6:	a9 e5       	ldi	r26, 0x59	; 89
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e9 e5       	ldi	r30, 0x59	; 89
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	84 60       	ori	r24, 0x04	; 4
     ec2:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1A_REG,WGM10);
	}
	else
	{
		CLR_BIT(TCCR1A_REG,WGM10);
     ec4:	af e4       	ldi	r26, 0x4F	; 79
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ef e4       	ldi	r30, 0x4F	; 79
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1A_REG,WGM11);
	}
	else
	{
		CLR_BIT(TCCR1A_REG,WGM11);
     ed2:	af e4       	ldi	r26, 0x4F	; 79
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e4       	ldi	r30, 0x4F	; 79
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8d 7f       	andi	r24, 0xFD	; 253
     ede:	8c 93       	st	X, r24
	}

	if(GET_BIT(TIMER_1_WAVE_GEN_MODE,2)==1)
	{
		SET_BIT(TCCR1B_REG,WGM12);
     ee0:	ae e4       	ldi	r26, 0x4E	; 78
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ee e4       	ldi	r30, 0x4E	; 78
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	88 60       	ori	r24, 0x08	; 8
     eec:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1B_REG,WGM13);
	}
	else
	{
		CLR_BIT(TCCR1B_REG,WGM13);
     eee:	ae e4       	ldi	r26, 0x4E	; 78
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ee e4       	ldi	r30, 0x4E	; 78
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	8c 93       	st	X, r24
	}
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Timer_1_Start_Count>:

void Timer_1_Start_Count(void)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG|=PRESCALING_TIMER_1;
     f0a:	ae e4       	ldi	r26, 0x4E	; 78
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ee e4       	ldi	r30, 0x4E	; 78
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	83 60       	ori	r24, 0x03	; 3
     f16:	8c 93       	st	X, r24
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <Timer_1_Base_Count_Set>:

void Timer_1_Base_Count_Set(uint16 u16Set_Val_Copy)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <Timer_1_Base_Count_Set+0x6>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=u16Set_Val_Copy;
     f2c:	ec e4       	ldi	r30, 0x4C	; 76
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24

}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <Timer_1_CMP_A_Max_Set>:

void Timer_1_CMP_A_Max_Set(uint16 u16Set_Val_Copy)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <Timer_1_CMP_A_Max_Set+0x6>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG=u16Set_Val_Copy;
     f50:	ea e4       	ldi	r30, 0x4A	; 74
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <Timer_1_CMP_B_Max_Set>:

void Timer_1_CMP_B_Max_Set(uint16 u16Set_Val_Copy)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Timer_1_CMP_B_Max_Set+0x6>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=u16Set_Val_Copy;
     f74:	e8 e4       	ldi	r30, 0x48	; 72
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <Timer_1_TOG_INP_CPT_UNIT_Sense>:

void Timer_1_TOG_INP_CPT_UNIT_Sense(void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(TCCR1B_REG,ICES1);
     f92:	ae e4       	ldi	r26, 0x4E	; 78
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ee e4       	ldi	r30, 0x4E	; 78
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	90 81       	ld	r25, Z
     f9c:	80 e4       	ldi	r24, 0x40	; 64
     f9e:	89 27       	eor	r24, r25
     fa0:	8c 93       	st	X, r24
}
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <SPI_Master_Init>:
#include "../EXT_INT/int_int.h"



void SPI_Master_Init(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR_REG,SPE_BIT);
     fb0:	ad e2       	ldi	r26, 0x2D	; 45
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ed e2       	ldi	r30, 0x2D	; 45
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	8c 93       	st	X, r24
	SPCR_REG|=SPI_DATA_TRANSMIT_ORDER;
     fbe:	ad e2       	ldi	r26, 0x2D	; 45
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ed e2       	ldi	r30, 0x2D	; 45
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8c 93       	st	X, r24
	SET_BIT(SPCR_REG,MSTR_BIT);
     fca:	ad e2       	ldi	r26, 0x2D	; 45
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ed e2       	ldi	r30, 0x2D	; 45
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	8c 93       	st	X, r24
	DIO_u8Set_Pin_Dir(PORT_B,PIN_4,OUTPUT);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_5,OUTPUT);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	65 e0       	ldi	r22, 0x05	; 5
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_6,INPUT);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	66 e0       	ldi	r22, 0x06	; 6
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_7,OUTPUT);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	67 e0       	ldi	r22, 0x07	; 7
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>

	SPCR_REG|=SPI_CLOCK_POLATIRY;
    1000:	ad e2       	ldi	r26, 0x2D	; 45
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ed e2       	ldi	r30, 0x2D	; 45
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8c 93       	st	X, r24
	SPCR_REG|=SPI_CLOCK_PHASE;
    100c:	ad e2       	ldi	r26, 0x2D	; 45
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ed e2       	ldi	r30, 0x2D	; 45
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8c 93       	st	X, r24
		{
			SET_BIT(SPCR_REG,SPR0_BIT);
		}
		else
		{
			CLR_BIT(SPCR_REG,SPR0_BIT);
    1018:	ad e2       	ldi	r26, 0x2D	; 45
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ed e2       	ldi	r30, 0x2D	; 45
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
		{
			SET_BIT(SPCR_REG,SPR1_BIT);
		}
		else
		{
			CLR_BIT(SPCR_REG,SPR1_BIT);
    1026:	ad e2       	ldi	r26, 0x2D	; 45
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ed e2       	ldi	r30, 0x2D	; 45
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8d 7f       	andi	r24, 0xFD	; 253
    1032:	8c 93       	st	X, r24
		{
			SET_BIT(SPSR_REG,SPI2X_BIT);
		}
		else
		{
			CLR_BIT(SPSR_REG,SPI2X_BIT);
    1034:	ae e2       	ldi	r26, 0x2E	; 46
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ee e2       	ldi	r30, 0x2E	; 46
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8e 7f       	andi	r24, 0xFE	; 254
    1040:	8c 93       	st	X, r24
		}
}
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <SPI_SLAVE_Init>:



void SPI_SLAVE_Init(void)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR_REG,SPE_BIT);
    1050:	ad e2       	ldi	r26, 0x2D	; 45
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ed e2       	ldi	r30, 0x2D	; 45
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	8c 93       	st	X, r24
	SPCR_REG|=SPI_DATA_TRANSMIT_ORDER;
    105e:	ad e2       	ldi	r26, 0x2D	; 45
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ed e2       	ldi	r30, 0x2D	; 45
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,MSTR_BIT);
    106a:	ad e2       	ldi	r26, 0x2D	; 45
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ed e2       	ldi	r30, 0x2D	; 45
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 7e       	andi	r24, 0xEF	; 239
    1076:	8c 93       	st	X, r24
	DIO_u8Set_Pin_Dir(PORT_B,PIN_4,INPUT);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	64 e0       	ldi	r22, 0x04	; 4
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_5,INPUT);
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	65 e0       	ldi	r22, 0x05	; 5
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_6,OUTPUT);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	66 e0       	ldi	r22, 0x06	; 6
    1090:	41 e0       	ldi	r20, 0x01	; 1
    1092:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_7,INPUT);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	67 e0       	ldi	r22, 0x07	; 7
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>

	SPCR_REG|=SPI_CLOCK_POLATIRY;
    10a0:	ad e2       	ldi	r26, 0x2D	; 45
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	ed e2       	ldi	r30, 0x2D	; 45
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8c 93       	st	X, r24
	SPCR_REG|=SPI_CLOCK_PHASE;
    10ac:	ad e2       	ldi	r26, 0x2D	; 45
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ed e2       	ldi	r30, 0x2D	; 45
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8c 93       	st	X, r24
		{
			SET_BIT(SPCR_REG,SPR0_BIT);
		}
		else
		{
			CLR_BIT(SPCR_REG,SPR0_BIT);
    10b8:	ad e2       	ldi	r26, 0x2D	; 45
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	ed e2       	ldi	r30, 0x2D	; 45
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8e 7f       	andi	r24, 0xFE	; 254
    10c4:	8c 93       	st	X, r24
		{
			SET_BIT(SPCR_REG,SPR1_BIT);
		}
		else
		{
			CLR_BIT(SPCR_REG,SPR1_BIT);
    10c6:	ad e2       	ldi	r26, 0x2D	; 45
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ed e2       	ldi	r30, 0x2D	; 45
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8d 7f       	andi	r24, 0xFD	; 253
    10d2:	8c 93       	st	X, r24
		{
			SET_BIT(SPSR_REG,SPI2X_BIT);
		}
		else
		{
			CLR_BIT(SPSR_REG,SPI2X_BIT);
    10d4:	ae e2       	ldi	r26, 0x2E	; 46
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ee e2       	ldi	r30, 0x2E	; 46
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	8c 93       	st	X, r24
		}


}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <SPI_MASTER_Slave_SELECTION_ON>:


void SPI_MASTER_Slave_SELECTION_ON(void)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Get_Pin_Val(PORT_B,PIN_4,LOW);
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	64 e0       	ldi	r22, 0x04	; 4
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DIO_u8Get_Pin_Val>
}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <SPI_MASTER_Slave_SELECTION_OFF>:


void SPI_MASTER_Slave_SELECTION_OFF(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Get_Pin_Val(PORT_B,PIN_4,HIGH);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	64 e0       	ldi	r22, 0x04	; 4
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DIO_u8Get_Pin_Val>
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <SPI_INT_ENABLE>:




void SPI_INT_ENABLE(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
    1124:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <EXT_INT_Global_Enable>
	SET_BIT(SPCR_REG,SPE_BIT);
    1128:	ad e2       	ldi	r26, 0x2D	; 45
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ed e2       	ldi	r30, 0x2D	; 45
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	80 64       	ori	r24, 0x40	; 64
    1134:	8c 93       	st	X, r24
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <SPI_u8_TRANCIEVE_BYTE_POLLING>:


uint8 SPI_u8_TRANCIEVE_BYTE_POLLING(uint8 u8_Val_Copy)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
	SPDR_REG=u8_Val_Copy;
    1148:	ef e2       	ldi	r30, 0x2F	; 47
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_REG,SPIF_BIT));
    1150:	ee e2       	ldi	r30, 0x2E	; 46
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 23       	and	r24, r24
    1158:	dc f7       	brge	.-10     	; 0x1150 <SPI_u8_TRANCIEVE_BYTE_POLLING+0x14>
	return SPDR_REG;
    115a:	ef e2       	ldi	r30, 0x2F	; 47
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
}
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <SPI_s8_TRANCIEVE_BYTE_POLLING>:


sint8 SPI_s8_TRANCIEVE_BYTE_POLLING(sint8 s8_Val_Copy)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	89 83       	std	Y+1, r24	; 0x01
	SPDR_REG=s8_Val_Copy;
    1174:	ef e2       	ldi	r30, 0x2F	; 47
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_REG,SPIF_BIT));
    117c:	ee e2       	ldi	r30, 0x2E	; 46
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	88 23       	and	r24, r24
    1184:	dc f7       	brge	.-10     	; 0x117c <SPI_s8_TRANCIEVE_BYTE_POLLING+0x14>
	return SPDR_REG;
    1186:	ef e2       	ldi	r30, 0x2F	; 47
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
}
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <SPI_u8_Send_STRING_POLLING>:

void SPI_u8_Send_STRING_POLLING(const uint8* u8_Str_Copy)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <SPI_u8_Send_STRING_POLLING+0x6>
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	9b 83       	std	Y+3, r25	; 0x03
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    11a4:	19 82       	std	Y+1, r1	; 0x01
    11a6:	0e c0       	rjmp	.+28     	; 0x11c4 <SPI_u8_Send_STRING_POLLING+0x30>
	while(u8_Str_Copy[i]!='\0')
	{
		SPI_u8_TRANCIEVE_BYTE_POLLING(u8_Str_Copy[i]);
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	fc 01       	movw	r30, r24
    11b4:	e2 0f       	add	r30, r18
    11b6:	f3 1f       	adc	r31, r19
    11b8:	80 81       	ld	r24, Z
    11ba:	0e 94 9e 08 	call	0x113c	; 0x113c <SPI_u8_TRANCIEVE_BYTE_POLLING>
		i++;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_u8_Send_STRING_POLLING(const uint8* u8_Str_Copy)
{
	uint8 i=0;
	while(u8_Str_Copy[i]!='\0')
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	9b 81       	ldd	r25, Y+3	; 0x03
    11ce:	fc 01       	movw	r30, r24
    11d0:	e2 0f       	add	r30, r18
    11d2:	f3 1f       	adc	r31, r19
    11d4:	80 81       	ld	r24, Z
    11d6:	88 23       	and	r24, r24
    11d8:	39 f7       	brne	.-50     	; 0x11a8 <SPI_u8_Send_STRING_POLLING+0x14>
	{
		SPI_u8_TRANCIEVE_BYTE_POLLING(u8_Str_Copy[i]);
		i++;
	}

}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <EXT_INT_Global_Enable>:
#include "int_reg.h"
#include "int_conf.h"


void EXT_INT_Global_Enable(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,GLOBAL_INT_BIT);
    11ee:	af e5       	ldi	r26, 0x5F	; 95
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e5       	ldi	r30, 0x5F	; 95
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	80 68       	ori	r24, 0x80	; 128
    11fa:	8c 93       	st	X, r24
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <EXT_INT_0_Enable>:
//
//}


void EXT_INT_0_Enable(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_0_EABLE);
    120a:	ab e5       	ldi	r26, 0x5B	; 91
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e5       	ldi	r30, 0x5B	; 91
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	8c 93       	st	X, r24
	MCUCR_REG|=INT_0_SENSE_CONTROL;
    1218:	a5 e5       	ldi	r26, 0x55	; 85
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e5 e5       	ldi	r30, 0x55	; 85
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8c 93       	st	X, r24

}
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <EXT_INT_0_ChMod>:
void EXT_INT_0_ChMod(uint8 u8modecpy)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
	if((u8modecpy==INT_0_LOW_LEVEL_REQ)||( u8modecpy==  INT_0_ANY_LOGICAL_LEVEL) || (u8modecpy==INT_0_FALLING_EDGE) || (u8modecpy==INT_0_RISING_EDGE))
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	88 23       	and	r24, r24
    123a:	49 f0       	breq	.+18     	; 0x124e <EXT_INT_0_ChMod+0x24>
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	31 f0       	breq	.+12     	; 0x124e <EXT_INT_0_ChMod+0x24>
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	19 f0       	breq	.+6      	; 0x124e <EXT_INT_0_ChMod+0x24>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	41 f4       	brne	.+16     	; 0x125e <EXT_INT_0_ChMod+0x34>
	{
		MCUCR_REG|=u8modecpy;
    124e:	a5 e5       	ldi	r26, 0x55	; 85
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e5       	ldi	r30, 0x55	; 85
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	90 81       	ld	r25, Z
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	89 2b       	or	r24, r25
    125c:	8c 93       	st	X, r24
	}
}
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <EXT_INT_1_Enable>:
//	SET_BIT(MCUCR_REG,ISC11);
//#endif
//
//}
void EXT_INT_1_Enable(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_0_EABLE);
    126e:	ab e5       	ldi	r26, 0x5B	; 91
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	eb e5       	ldi	r30, 0x5B	; 91
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 64       	ori	r24, 0x40	; 64
    127a:	8c 93       	st	X, r24
	MCUCR_REG|=INT_1_SENSE_CONTROL;
    127c:	a5 e5       	ldi	r26, 0x55	; 85
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e5 e5       	ldi	r30, 0x55	; 85
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8c 93       	st	X, r24
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <EXT_INT_1_ChMod>:

void EXT_INT_1_ChMod(uint8 u8modecpy)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	0f 92       	push	r0
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	89 83       	std	Y+1, r24	; 0x01
	if((u8modecpy==INT_1_LOW_LEVEL_REQ)||( u8modecpy==  INT_1_ANY_LOGICAL_LEVEL) || (u8modecpy==INT_1_FALLING_EDGE) || (u8modecpy==INT_1_RISING_EDGE))
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	88 23       	and	r24, r24
    129e:	49 f0       	breq	.+18     	; 0x12b2 <EXT_INT_1_ChMod+0x24>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <EXT_INT_1_ChMod+0x24>
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	88 30       	cpi	r24, 0x08	; 8
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <EXT_INT_1_ChMod+0x24>
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	8c 30       	cpi	r24, 0x0C	; 12
    12b0:	41 f4       	brne	.+16     	; 0x12c2 <EXT_INT_1_ChMod+0x34>
	{
		MCUCR_REG|=u8modecpy;
    12b2:	a5 e5       	ldi	r26, 0x55	; 85
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e5 e5       	ldi	r30, 0x55	; 85
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	90 81       	ld	r25, Z
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	89 2b       	or	r24, r25
    12c0:	8c 93       	st	X, r24
	}
}
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <EXT_INT_2_Enable>:

void EXT_INT_2_Enable(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_2_EABLE);
    12d2:	ab e5       	ldi	r26, 0x5B	; 91
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e5       	ldi	r30, 0x5B	; 91
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	80 62       	ori	r24, 0x20	; 32
    12de:	8c 93       	st	X, r24
#if INT_2_SENSE_CONTROL	==	RISING_EDGE
	CLR_BIT(MCUCSR_REG,ISC2);
    12e0:	a4 e5       	ldi	r26, 0x54	; 84
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e4 e5       	ldi	r30, 0x54	; 84
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 7b       	andi	r24, 0xBF	; 191
    12ec:	8c 93       	st	X, r24
#elif	INT_1_SENSE_CONTROL	==	FALLING_EDGE
	SET_BIT(MCUCSR_REG,ISC2);
#endif
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EXT_INT_2_Toggle>:
void EXT_INT_2_Toggle(void)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(MCUCSR_REG,ISC2);
    12fc:	a4 e5       	ldi	r26, 0x54	; 84
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e5       	ldi	r30, 0x54	; 84
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	90 81       	ld	r25, Z
    1306:	80 e4       	ldi	r24, 0x40	; 64
    1308:	89 27       	eor	r24, r25
    130a:	8c 93       	st	X, r24
}
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <EXT_INT_Global_Disable>:
void EXT_INT_Global_Disable(void)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,GLOBAL_INT_BIT);
    131a:	af e5       	ldi	r26, 0x5F	; 95
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ef e5       	ldi	r30, 0x5F	; 95
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 77       	andi	r24, 0x7F	; 127
    1326:	8c 93       	st	X, r24
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <EXT_INT_Global_Toggle>:
void EXT_INT_Global_Toggle(void)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(SREG_REG,GLOBAL_INT_BIT);
    1336:	af e5       	ldi	r26, 0x5F	; 95
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ef e5       	ldi	r30, 0x5F	; 95
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	90 81       	ld	r25, Z
    1340:	80 e8       	ldi	r24, 0x80	; 128
    1342:	89 27       	eor	r24, r25
    1344:	8c 93       	st	X, r24
}
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <DIO_u8Set_Port_Dir>:
#include "dio_reg.h"
#include "dio_int.h"


uint8 DIO_u8Set_Port_Dir(uint8 u8PortIdCopy , uint8 u8DirCopy)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <DIO_u8Set_Port_Dir+0x6>
    1352:	00 d0       	rcall	.+0      	; 0x1354 <DIO_u8Set_Port_Dir+0x8>
    1354:	0f 92       	push	r0
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    135e:	19 82       	std	Y+1, r1	; 0x01

		switch(u8PortIdCopy)
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3d 83       	std	Y+5, r19	; 0x05
    1368:	2c 83       	std	Y+4, r18	; 0x04
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	d1 f0       	breq	.+52     	; 0x13a8 <DIO_u8Set_Port_Dir+0x5c>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <DIO_u8Set_Port_Dir+0x3c>
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 f0       	breq	.+24     	; 0x139e <DIO_u8Set_Port_Dir+0x52>
    1386:	1f c0       	rjmp	.+62     	; 0x13c6 <DIO_u8Set_Port_Dir+0x7a>
    1388:	2c 81       	ldd	r18, Y+4	; 0x04
    138a:	3d 81       	ldd	r19, Y+5	; 0x05
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <DIO_u8Set_Port_Dir+0x66>
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	91 05       	cpc	r25, r1
    139a:	81 f0       	breq	.+32     	; 0x13bc <DIO_u8Set_Port_Dir+0x70>
    139c:	14 c0       	rjmp	.+40     	; 0x13c6 <DIO_u8Set_Port_Dir+0x7a>
		{
			case PORT_A :	DDRA_REG = u8DirCopy;
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	80 83       	st	Z, r24
    13a6:	11 c0       	rjmp	.+34     	; 0x13ca <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_B :	DDRB_REG = u8DirCopy;
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	80 83       	st	Z, r24
    13b0:	0c c0       	rjmp	.+24     	; 0x13ca <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_C :	DDRC_REG = u8DirCopy;
    13b2:	e4 e3       	ldi	r30, 0x34	; 52
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	80 83       	st	Z, r24
    13ba:	07 c0       	rjmp	.+14     	; 0x13ca <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_D :	DDRD_REG = u8DirCopy;
    13bc:	e1 e3       	ldi	r30, 0x31	; 49
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	80 83       	st	Z, r24
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8Set_Port_Dir+0x7e>
										break;
			default		:	Error_Status = E_NOK ;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01

		}



	return Error_Status;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <DIO_u8Set_Port_Val>:
uint8 DIO_u8Set_Port_Val(uint8 u8PortIdCopy , uint8 u8ValCopy)
{
    13dc:	df 93       	push	r29
    13de:	cf 93       	push	r28
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <DIO_u8Set_Port_Val+0x6>
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <DIO_u8Set_Port_Val+0x8>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    13ee:	19 82       	std	Y+1, r1	; 0x01


			switch(u8PortIdCopy)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	3d 83       	std	Y+5, r19	; 0x05
    13f8:	2c 83       	std	Y+4, r18	; 0x04
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	d1 f0       	breq	.+52     	; 0x1438 <DIO_u8Set_Port_Val+0x5c>
    1404:	2c 81       	ldd	r18, Y+4	; 0x04
    1406:	3d 81       	ldd	r19, Y+5	; 0x05
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	2c f4       	brge	.+10     	; 0x1418 <DIO_u8Set_Port_Val+0x3c>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	61 f0       	breq	.+24     	; 0x142e <DIO_u8Set_Port_Val+0x52>
    1416:	1f c0       	rjmp	.+62     	; 0x1456 <DIO_u8Set_Port_Val+0x7a>
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	3d 81       	ldd	r19, Y+5	; 0x05
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	81 f0       	breq	.+32     	; 0x1442 <DIO_u8Set_Port_Val+0x66>
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	81 f0       	breq	.+32     	; 0x144c <DIO_u8Set_Port_Val+0x70>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <DIO_u8Set_Port_Val+0x7a>
			{
				case PORT_A :	PORTA_REG = u8ValCopy;
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	80 83       	st	Z, r24
    1436:	11 c0       	rjmp	.+34     	; 0x145a <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_B :	PORTB_REG =	u8ValCopy;
    1438:	e8 e3       	ldi	r30, 0x38	; 56
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	80 83       	st	Z, r24
    1440:	0c c0       	rjmp	.+24     	; 0x145a <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_C :	PORTC_REG = u8ValCopy;
    1442:	e5 e3       	ldi	r30, 0x35	; 53
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	80 83       	st	Z, r24
    144a:	07 c0       	rjmp	.+14     	; 0x145a <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_D :	PORTD_REG = u8ValCopy;
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	80 83       	st	Z, r24
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_u8Set_Port_Val+0x7e>
											break;
				default		:	Error_Status=E_NOK;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01

			}



	return Error_Status;
    145a:	89 81       	ldd	r24, Y+1	; 0x01

}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <DIO_u8Get_Port_Val>:
uint8 DIO_u8Get_Port_Val(uint8 u8PortIdCopy , uint8 * u8pValCopy)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <DIO_u8Get_Port_Val+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <DIO_u8Get_Port_Val+0x8>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <DIO_u8Get_Port_Val+0xa>
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	8a 83       	std	Y+2, r24	; 0x02
    147c:	7c 83       	std	Y+4, r23	; 0x04
    147e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    1480:	19 82       	std	Y+1, r1	; 0x01


				switch(u8PortIdCopy)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3e 83       	std	Y+6, r19	; 0x06
    148a:	2d 83       	std	Y+5, r18	; 0x05
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	e1 f0       	breq	.+56     	; 0x14ce <DIO_u8Get_Port_Val+0x62>
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	2c f4       	brge	.+10     	; 0x14aa <DIO_u8Get_Port_Val+0x3e>
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <DIO_u8Get_Port_Val+0x54>
    14a8:	27 c0       	rjmp	.+78     	; 0x14f8 <DIO_u8Get_Port_Val+0x8c>
    14aa:	2d 81       	ldd	r18, Y+5	; 0x05
    14ac:	3e 81       	ldd	r19, Y+6	; 0x06
    14ae:	22 30       	cpi	r18, 0x02	; 2
    14b0:	31 05       	cpc	r19, r1
    14b2:	a1 f0       	breq	.+40     	; 0x14dc <DIO_u8Get_Port_Val+0x70>
    14b4:	8d 81       	ldd	r24, Y+5	; 0x05
    14b6:	9e 81       	ldd	r25, Y+6	; 0x06
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	b1 f0       	breq	.+44     	; 0x14ea <DIO_u8Get_Port_Val+0x7e>
    14be:	1c c0       	rjmp	.+56     	; 0x14f8 <DIO_u8Get_Port_Val+0x8c>
				{
					case PORT_A :	*u8pValCopy = PINA_REG;
    14c0:	e9 e3       	ldi	r30, 0x39	; 57
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	eb 81       	ldd	r30, Y+3	; 0x03
    14c8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ca:	80 83       	st	Z, r24
    14cc:	17 c0       	rjmp	.+46     	; 0x14fc <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_B :	*u8pValCopy = PINB_REG;
    14ce:	e6 e3       	ldi	r30, 0x36	; 54
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	eb 81       	ldd	r30, Y+3	; 0x03
    14d6:	fc 81       	ldd	r31, Y+4	; 0x04
    14d8:	80 83       	st	Z, r24
    14da:	10 c0       	rjmp	.+32     	; 0x14fc <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_C :	*u8pValCopy = PINC_REG;
    14dc:	e3 e3       	ldi	r30, 0x33	; 51
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 83       	st	Z, r24
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_D :	*u8pValCopy = PIND_REG;
    14ea:	e0 e3       	ldi	r30, 0x30	; 48
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	eb 81       	ldd	r30, Y+3	; 0x03
    14f2:	fc 81       	ldd	r31, Y+4	; 0x04
    14f4:	80 83       	st	Z, r24
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8Get_Port_Val+0x90>
												break;
					default		:	Error_Status=E_NOK;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
												break;

				}
	return Error_Status;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    14fe:	26 96       	adiw	r28, 0x06	; 6
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <DIO_u8TOG_PORT_Val>:
uint8 DIO_u8TOG_PORT_Val (uint8  u8PortIdCopy 	)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_u8TOG_PORT_Val+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DIO_u8TOG_PORT_Val+0x8>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_Status=E_OK;
    151e:	19 82       	std	Y+1, r1	; 0x01

		switch(u8PortIdCopy)
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3c 83       	std	Y+4, r19	; 0x04
    1528:	2b 83       	std	Y+3, r18	; 0x03
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	91 05       	cpc	r25, r1
    1532:	e9 f0       	breq	.+58     	; 0x156e <DIO_u8TOG_PORT_Val+0x5e>
    1534:	2b 81       	ldd	r18, Y+3	; 0x03
    1536:	3c 81       	ldd	r19, Y+4	; 0x04
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	2c f4       	brge	.+10     	; 0x1548 <DIO_u8TOG_PORT_Val+0x38>
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	61 f0       	breq	.+24     	; 0x155e <DIO_u8TOG_PORT_Val+0x4e>
    1546:	2b c0       	rjmp	.+86     	; 0x159e <DIO_u8TOG_PORT_Val+0x8e>
    1548:	2b 81       	ldd	r18, Y+3	; 0x03
    154a:	3c 81       	ldd	r19, Y+4	; 0x04
    154c:	22 30       	cpi	r18, 0x02	; 2
    154e:	31 05       	cpc	r19, r1
    1550:	b1 f0       	breq	.+44     	; 0x157e <DIO_u8TOG_PORT_Val+0x6e>
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	c9 f0       	breq	.+50     	; 0x158e <DIO_u8TOG_PORT_Val+0x7e>
    155c:	20 c0       	rjmp	.+64     	; 0x159e <DIO_u8TOG_PORT_Val+0x8e>
			{
				case PORT_A :	PORTA_REG = ~PORTA_REG;
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 95       	com	r24
    156a:	8c 93       	st	X, r24
    156c:	1a c0       	rjmp	.+52     	; 0x15a2 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_B :	PORTB_REG = ~PORTB_REG;
    156e:	a8 e3       	ldi	r26, 0x38	; 56
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e8 e3       	ldi	r30, 0x38	; 56
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	80 95       	com	r24
    157a:	8c 93       	st	X, r24
    157c:	12 c0       	rjmp	.+36     	; 0x15a2 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_C :	PORTC_REG = ~PORTC_REG;
    157e:	a5 e3       	ldi	r26, 0x35	; 53
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e3       	ldi	r30, 0x35	; 53
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 95       	com	r24
    158a:	8c 93       	st	X, r24
    158c:	0a c0       	rjmp	.+20     	; 0x15a2 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_D :	PORTD_REG = ~PORTD_REG;
    158e:	a2 e3       	ldi	r26, 0x32	; 50
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e2 e3       	ldi	r30, 0x32	; 50
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 95       	com	r24
    159a:	8c 93       	st	X, r24
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_u8TOG_PORT_Val+0x92>
													break;
				default		:	Error_Status=E_NOK;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01





	return Error_Status;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01

}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <DIO_u8Set_Pin_Dir>:

uint8 DIO_u8Set_Pin_Dir(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 u8DirCopy)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	28 97       	sbiw	r28, 0x08	; 8
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	6b 83       	std	Y+3, r22	; 0x03
    15ca:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    15cc:	19 82       	std	Y+1, r1	; 0x01

	if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 30       	cpi	r24, 0x08	; 8
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <DIO_u8Set_Pin_Dir+0x24>
    15d4:	f4 c0       	rjmp	.+488    	; 0x17be <DIO_u8Set_Pin_Dir+0x20c>
	{
		if(u8DirCopy==INPUT)
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	88 23       	and	r24, r24
    15da:	09 f0       	breq	.+2      	; 0x15de <DIO_u8Set_Pin_Dir+0x2c>
    15dc:	77 c0       	rjmp	.+238    	; 0x16cc <DIO_u8Set_Pin_Dir+0x11a>
		{
			switch(u8PortIdCopy)
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	38 87       	std	Y+8, r19	; 0x08
    15e6:	2f 83       	std	Y+7, r18	; 0x07
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	98 85       	ldd	r25, Y+8	; 0x08
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	91 05       	cpc	r25, r1
    15f0:	59 f1       	breq	.+86     	; 0x1648 <DIO_u8Set_Pin_Dir+0x96>
    15f2:	2f 81       	ldd	r18, Y+7	; 0x07
    15f4:	38 85       	ldd	r19, Y+8	; 0x08
    15f6:	22 30       	cpi	r18, 0x02	; 2
    15f8:	31 05       	cpc	r19, r1
    15fa:	2c f4       	brge	.+10     	; 0x1606 <DIO_u8Set_Pin_Dir+0x54>
    15fc:	8f 81       	ldd	r24, Y+7	; 0x07
    15fe:	98 85       	ldd	r25, Y+8	; 0x08
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f0       	breq	.+26     	; 0x161e <DIO_u8Set_Pin_Dir+0x6c>
    1604:	60 c0       	rjmp	.+192    	; 0x16c6 <DIO_u8Set_Pin_Dir+0x114>
    1606:	2f 81       	ldd	r18, Y+7	; 0x07
    1608:	38 85       	ldd	r19, Y+8	; 0x08
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	89 f1       	breq	.+98     	; 0x1672 <DIO_u8Set_Pin_Dir+0xc0>
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	91 05       	cpc	r25, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <DIO_u8Set_Pin_Dir+0x6a>
    161a:	40 c0       	rjmp	.+128    	; 0x169c <DIO_u8Set_Pin_Dir+0xea>
    161c:	54 c0       	rjmp	.+168    	; 0x16c6 <DIO_u8Set_Pin_Dir+0x114>
				{
					case PORT_A :	CLR_BIT(DDRA_REG,u8Pin_IdCopy);
    161e:	aa e3       	ldi	r26, 0x3A	; 58
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ea e3       	ldi	r30, 0x3A	; 58
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_u8Set_Pin_Dir+0x8a>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_u8Set_Pin_Dir+0x86>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	bd c0       	rjmp	.+378    	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_B :	CLR_BIT(DDRB_REG,u8Pin_IdCopy);
    1648:	a7 e3       	ldi	r26, 0x37	; 55
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e3       	ldi	r30, 0x37	; 55
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_u8Set_Pin_Dir+0xb4>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_u8Set_Pin_Dir+0xb0>
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	a8 c0       	rjmp	.+336    	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_C :	CLR_BIT(DDRC_REG,u8Pin_IdCopy);
    1672:	a4 e3       	ldi	r26, 0x34	; 52
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e4 e3       	ldi	r30, 0x34	; 52
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_u8Set_Pin_Dir+0xde>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_u8Set_Pin_Dir+0xda>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	93 c0       	rjmp	.+294    	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_D :	CLR_BIT(DDRD_REG,u8Pin_IdCopy);
    169c:	a1 e3       	ldi	r26, 0x31	; 49
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e1 e3       	ldi	r30, 0x31	; 49
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <DIO_u8Set_Pin_Dir+0x108>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <DIO_u8Set_Pin_Dir+0x104>
    16be:	80 95       	com	r24
    16c0:	84 23       	and	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	7e c0       	rjmp	.+252    	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					default		:	Error_Status=E_NOK;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	7b c0       	rjmp	.+246    	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;

				}
		}
		else if(u8DirCopy==OUTPUT)
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <DIO_u8Set_Pin_Dir+0x122>
    16d2:	72 c0       	rjmp	.+228    	; 0x17b8 <DIO_u8Set_Pin_Dir+0x206>
		{
			switch(u8PortIdCopy)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3e 83       	std	Y+6, r19	; 0x06
    16dc:	2d 83       	std	Y+5, r18	; 0x05
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	91 05       	cpc	r25, r1
    16e6:	49 f1       	breq	.+82     	; 0x173a <DIO_u8Set_Pin_Dir+0x188>
    16e8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ea:	3e 81       	ldd	r19, Y+6	; 0x06
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <DIO_u8Set_Pin_Dir+0x14a>
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	61 f0       	breq	.+24     	; 0x1712 <DIO_u8Set_Pin_Dir+0x160>
    16fa:	5b c0       	rjmp	.+182    	; 0x17b2 <DIO_u8Set_Pin_Dir+0x200>
    16fc:	2d 81       	ldd	r18, Y+5	; 0x05
    16fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	71 f1       	breq	.+92     	; 0x1762 <DIO_u8Set_Pin_Dir+0x1b0>
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	e9 f1       	breq	.+122    	; 0x178a <DIO_u8Set_Pin_Dir+0x1d8>
    1710:	50 c0       	rjmp	.+160    	; 0x17b2 <DIO_u8Set_Pin_Dir+0x200>
				{
					case PORT_A :	SET_BIT(DDRA_REG,u8Pin_IdCopy);
    1712:	aa e3       	ldi	r26, 0x3A	; 58
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ea e3       	ldi	r30, 0x3A	; 58
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8Set_Pin_Dir+0x17e>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_u8Set_Pin_Dir+0x17a>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	44 c0       	rjmp	.+136    	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_B :	SET_BIT(DDRB_REG,u8Pin_IdCopy);
    173a:	a7 e3       	ldi	r26, 0x37	; 55
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e7 e3       	ldi	r30, 0x37	; 55
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_u8Set_Pin_Dir+0x1a6>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_u8Set_Pin_Dir+0x1a2>
    175c:	84 2b       	or	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	30 c0       	rjmp	.+96     	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_C :	SET_BIT(DDRC_REG,u8Pin_IdCopy);
    1762:	a4 e3       	ldi	r26, 0x34	; 52
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e4 e3       	ldi	r30, 0x34	; 52
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_u8Set_Pin_Dir+0x1ce>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_u8Set_Pin_Dir+0x1ca>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	1c c0       	rjmp	.+56     	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_D :	SET_BIT(DDRD_REG,u8Pin_IdCopy);
    178a:	a1 e3       	ldi	r26, 0x31	; 49
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e1 e3       	ldi	r30, 0x31	; 49
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8Set_Pin_Dir+0x1f6>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8Set_Pin_Dir+0x1f2>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
													break;
					default		:	Error_Status=E_NOK;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
					}
				}

		else
		{
			Error_Status=E_NOK;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_u8Set_Pin_Dir+0x210>
		}
	}
	else
	{
		Error_Status=E_NOK;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_Status;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01


}
    17c4:	28 96       	adiw	r28, 0x08	; 8
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <DIO_u8Set_Pin_Val>:
uint8 DIO_u8Set_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 u8ValCopy)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	28 97       	sbiw	r28, 0x08	; 8
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	8a 83       	std	Y+2, r24	; 0x02
    17ec:	6b 83       	std	Y+3, r22	; 0x03
    17ee:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    17f0:	19 82       	std	Y+1, r1	; 0x01

	if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	88 30       	cpi	r24, 0x08	; 8
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <DIO_u8Set_Pin_Val+0x24>
    17f8:	f4 c0       	rjmp	.+488    	; 0x19e2 <DIO_u8Set_Pin_Val+0x20c>
	{
		if(u8ValCopy==LOW)
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	88 23       	and	r24, r24
    17fe:	09 f0       	breq	.+2      	; 0x1802 <DIO_u8Set_Pin_Val+0x2c>
    1800:	77 c0       	rjmp	.+238    	; 0x18f0 <DIO_u8Set_Pin_Val+0x11a>
		{
			switch(u8PortIdCopy)
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	38 87       	std	Y+8, r19	; 0x08
    180a:	2f 83       	std	Y+7, r18	; 0x07
    180c:	8f 81       	ldd	r24, Y+7	; 0x07
    180e:	98 85       	ldd	r25, Y+8	; 0x08
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	59 f1       	breq	.+86     	; 0x186c <DIO_u8Set_Pin_Val+0x96>
    1816:	2f 81       	ldd	r18, Y+7	; 0x07
    1818:	38 85       	ldd	r19, Y+8	; 0x08
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <DIO_u8Set_Pin_Val+0x54>
    1820:	8f 81       	ldd	r24, Y+7	; 0x07
    1822:	98 85       	ldd	r25, Y+8	; 0x08
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	69 f0       	breq	.+26     	; 0x1842 <DIO_u8Set_Pin_Val+0x6c>
    1828:	60 c0       	rjmp	.+192    	; 0x18ea <DIO_u8Set_Pin_Val+0x114>
    182a:	2f 81       	ldd	r18, Y+7	; 0x07
    182c:	38 85       	ldd	r19, Y+8	; 0x08
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	89 f1       	breq	.+98     	; 0x1896 <DIO_u8Set_Pin_Val+0xc0>
    1834:	8f 81       	ldd	r24, Y+7	; 0x07
    1836:	98 85       	ldd	r25, Y+8	; 0x08
    1838:	83 30       	cpi	r24, 0x03	; 3
    183a:	91 05       	cpc	r25, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <DIO_u8Set_Pin_Val+0x6a>
    183e:	40 c0       	rjmp	.+128    	; 0x18c0 <DIO_u8Set_Pin_Val+0xea>
    1840:	54 c0       	rjmp	.+168    	; 0x18ea <DIO_u8Set_Pin_Val+0x114>
				{
					case PORT_A :	CLR_BIT(PORTA_REG,u8Pin_IdCopy);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_u8Set_Pin_Val+0x8a>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_u8Set_Pin_Val+0x86>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	bd c0       	rjmp	.+378    	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_B :	CLR_BIT(PORTB_REG,u8Pin_IdCopy);
    186c:	a8 e3       	ldi	r26, 0x38	; 56
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e8 e3       	ldi	r30, 0x38	; 56
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_u8Set_Pin_Val+0xb4>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_u8Set_Pin_Val+0xb0>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	a8 c0       	rjmp	.+336    	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_C :	CLR_BIT(PORTC_REG,u8Pin_IdCopy);
    1896:	a5 e3       	ldi	r26, 0x35	; 53
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e3       	ldi	r30, 0x35	; 53
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_u8Set_Pin_Val+0xde>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_u8Set_Pin_Val+0xda>
    18b8:	80 95       	com	r24
    18ba:	84 23       	and	r24, r20
    18bc:	8c 93       	st	X, r24
    18be:	93 c0       	rjmp	.+294    	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_D :	CLR_BIT(PORTD_REG,u8Pin_IdCopy);
    18c0:	a2 e3       	ldi	r26, 0x32	; 50
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e2 e3       	ldi	r30, 0x32	; 50
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_u8Set_Pin_Val+0x108>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_u8Set_Pin_Val+0x104>
    18e2:	80 95       	com	r24
    18e4:	84 23       	and	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	7e c0       	rjmp	.+252    	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					default		:	Error_Status=E_NOK;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	7b c0       	rjmp	.+246    	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;

				}
		}
		else if(u8ValCopy==HIGH)
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <DIO_u8Set_Pin_Val+0x122>
    18f6:	72 c0       	rjmp	.+228    	; 0x19dc <DIO_u8Set_Pin_Val+0x206>
		{
			switch(u8PortIdCopy)
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	2d 83       	std	Y+5, r18	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	49 f1       	breq	.+82     	; 0x195e <DIO_u8Set_Pin_Val+0x188>
    190c:	2d 81       	ldd	r18, Y+5	; 0x05
    190e:	3e 81       	ldd	r19, Y+6	; 0x06
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	2c f4       	brge	.+10     	; 0x1920 <DIO_u8Set_Pin_Val+0x14a>
    1916:	8d 81       	ldd	r24, Y+5	; 0x05
    1918:	9e 81       	ldd	r25, Y+6	; 0x06
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f0       	breq	.+24     	; 0x1936 <DIO_u8Set_Pin_Val+0x160>
    191e:	5b c0       	rjmp	.+182    	; 0x19d6 <DIO_u8Set_Pin_Val+0x200>
    1920:	2d 81       	ldd	r18, Y+5	; 0x05
    1922:	3e 81       	ldd	r19, Y+6	; 0x06
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	71 f1       	breq	.+92     	; 0x1986 <DIO_u8Set_Pin_Val+0x1b0>
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	91 05       	cpc	r25, r1
    1932:	e9 f1       	breq	.+122    	; 0x19ae <DIO_u8Set_Pin_Val+0x1d8>
    1934:	50 c0       	rjmp	.+160    	; 0x19d6 <DIO_u8Set_Pin_Val+0x200>
				{
					case PORT_A :	SET_BIT(PORTA_REG,u8Pin_IdCopy);
    1936:	ab e3       	ldi	r26, 0x3B	; 59
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	eb e3       	ldi	r30, 0x3B	; 59
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_u8Set_Pin_Val+0x17e>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_u8Set_Pin_Val+0x17a>
    1958:	84 2b       	or	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	44 c0       	rjmp	.+136    	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_B :	SET_BIT(PORTB_REG,u8Pin_IdCopy);
    195e:	a8 e3       	ldi	r26, 0x38	; 56
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e8 e3       	ldi	r30, 0x38	; 56
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_u8Set_Pin_Val+0x1a6>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_u8Set_Pin_Val+0x1a2>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	30 c0       	rjmp	.+96     	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_C :	SET_BIT(PORTC_REG,u8Pin_IdCopy);
    1986:	a5 e3       	ldi	r26, 0x35	; 53
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <DIO_u8Set_Pin_Val+0x1ce>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <DIO_u8Set_Pin_Val+0x1ca>
    19a8:	84 2b       	or	r24, r20
    19aa:	8c 93       	st	X, r24
    19ac:	1c c0       	rjmp	.+56     	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_D :	SET_BIT(PORTD_REG,u8Pin_IdCopy);
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_u8Set_Pin_Val+0x1f6>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_u8Set_Pin_Val+0x1f2>
    19d0:	84 2b       	or	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	08 c0       	rjmp	.+16     	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
													break;
					default		:	Error_Status=E_NOK;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
				}
		}

		else
		{
			Error_Status=E_NOK;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <DIO_u8Set_Pin_Val+0x210>
		}
	}
	else
	{
		Error_Status=E_NOK;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_Status;
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e8:	28 96       	adiw	r28, 0x08	; 8
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <DIO_u8Get_Pin_Val>:
uint8 DIO_u8Get_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 * u8pValCopy)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	27 97       	sbiw	r28, 0x07	; 7
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
    1a10:	6b 83       	std	Y+3, r22	; 0x03
    1a12:	5d 83       	std	Y+5, r21	; 0x05
    1a14:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    1a16:	19 82       	std	Y+1, r1	; 0x01

		if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 30       	cpi	r24, 0x08	; 8
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <DIO_u8Get_Pin_Val+0x26>
    1a1e:	74 c0       	rjmp	.+232    	; 0x1b08 <DIO_u8Get_Pin_Val+0x10e>
		{

			switch(u8PortIdCopy)
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	28 2f       	mov	r18, r24
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	3f 83       	std	Y+7, r19	; 0x07
    1a28:	2e 83       	std	Y+6, r18	; 0x06
    1a2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a2e:	41 30       	cpi	r20, 0x01	; 1
    1a30:	51 05       	cpc	r21, r1
    1a32:	59 f1       	breq	.+86     	; 0x1a8a <DIO_u8Get_Pin_Val+0x90>
    1a34:	8e 81       	ldd	r24, Y+6	; 0x06
    1a36:	9f 81       	ldd	r25, Y+7	; 0x07
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	34 f4       	brge	.+12     	; 0x1a4a <DIO_u8Get_Pin_Val+0x50>
    1a3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a40:	3f 81       	ldd	r19, Y+7	; 0x07
    1a42:	21 15       	cp	r18, r1
    1a44:	31 05       	cpc	r19, r1
    1a46:	69 f0       	breq	.+26     	; 0x1a62 <DIO_u8Get_Pin_Val+0x68>
    1a48:	5c c0       	rjmp	.+184    	; 0x1b02 <DIO_u8Get_Pin_Val+0x108>
    1a4a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a4c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a4e:	42 30       	cpi	r20, 0x02	; 2
    1a50:	51 05       	cpc	r21, r1
    1a52:	79 f1       	breq	.+94     	; 0x1ab2 <DIO_u8Get_Pin_Val+0xb8>
    1a54:	8e 81       	ldd	r24, Y+6	; 0x06
    1a56:	9f 81       	ldd	r25, Y+7	; 0x07
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <DIO_u8Get_Pin_Val+0x66>
    1a5e:	3d c0       	rjmp	.+122    	; 0x1ada <DIO_u8Get_Pin_Val+0xe0>
    1a60:	50 c0       	rjmp	.+160    	; 0x1b02 <DIO_u8Get_Pin_Val+0x108>
				{
					case PORT_A : *u8pValCopy=GET_BIT(PINA_REG,u8Pin_IdCopy);
    1a62:	e9 e3       	ldi	r30, 0x39	; 57
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_u8Get_Pin_Val+0x80>
    1a76:	55 95       	asr	r21
    1a78:	47 95       	ror	r20
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_u8Get_Pin_Val+0x7c>
    1a7e:	ca 01       	movw	r24, r20
    1a80:	81 70       	andi	r24, 0x01	; 1
    1a82:	ec 81       	ldd	r30, Y+4	; 0x04
    1a84:	fd 81       	ldd	r31, Y+5	; 0x05
    1a86:	80 83       	st	Z, r24
    1a88:	41 c0       	rjmp	.+130    	; 0x1b0c <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_B : *u8pValCopy=GET_BIT(PINB_REG,u8Pin_IdCopy);
    1a8a:	e6 e3       	ldi	r30, 0x36	; 54
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_u8Get_Pin_Val+0xa8>
    1a9e:	55 95       	asr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_u8Get_Pin_Val+0xa4>
    1aa6:	ca 01       	movw	r24, r20
    1aa8:	81 70       	andi	r24, 0x01	; 1
    1aaa:	ec 81       	ldd	r30, Y+4	; 0x04
    1aac:	fd 81       	ldd	r31, Y+5	; 0x05
    1aae:	80 83       	st	Z, r24
    1ab0:	2d c0       	rjmp	.+90     	; 0x1b0c <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_C : *u8pValCopy=GET_BIT(PINC_REG,u8Pin_IdCopy);
    1ab2:	e3 e3       	ldi	r30, 0x33	; 51
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_u8Get_Pin_Val+0xd0>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_u8Get_Pin_Val+0xcc>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad6:	80 83       	st	Z, r24
    1ad8:	19 c0       	rjmp	.+50     	; 0x1b0c <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_D : *u8pValCopy=GET_BIT(PIND_REG,u8Pin_IdCopy);
    1ada:	e0 e3       	ldi	r30, 0x30	; 48
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_u8Get_Pin_Val+0xf8>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_u8Get_Pin_Val+0xf4>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	ec 81       	ldd	r30, Y+4	; 0x04
    1afc:	fd 81       	ldd	r31, Y+5	; 0x05
    1afe:	80 83       	st	Z, r24
    1b00:	05 c0       	rjmp	.+10     	; 0x1b0c <DIO_u8Get_Pin_Val+0x112>
													break;
					default		:	Error_Status=E_NOK;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_u8Get_Pin_Val+0x112>
				}

		}
		else
		{
			Error_Status=E_NOK;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_Status;
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b0e:	27 96       	adiw	r28, 0x07	; 7
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <DIO_u8TOG_Pin_Val>:
uint8 DIO_u8TOG_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy )
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_u8TOG_Pin_Val+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <DIO_u8TOG_Pin_Val+0x8>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
    1b30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    1b32:	19 82       	std	Y+1, r1	; 0x01

		if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	88 30       	cpi	r24, 0x08	; 8
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <DIO_u8TOG_Pin_Val+0x1c>
    1b3a:	72 c0       	rjmp	.+228    	; 0x1c20 <DIO_u8TOG_Pin_Val+0x100>
		{

			switch(u8PortIdCopy)
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3d 83       	std	Y+5, r19	; 0x05
    1b44:	2c 83       	std	Y+4, r18	; 0x04
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	49 f1       	breq	.+82     	; 0x1ba2 <DIO_u8TOG_Pin_Val+0x82>
    1b50:	2c 81       	ldd	r18, Y+4	; 0x04
    1b52:	3d 81       	ldd	r19, Y+5	; 0x05
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <DIO_u8TOG_Pin_Val+0x44>
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <DIO_u8TOG_Pin_Val+0x5a>
    1b62:	5b c0       	rjmp	.+182    	; 0x1c1a <DIO_u8TOG_Pin_Val+0xfa>
    1b64:	2c 81       	ldd	r18, Y+4	; 0x04
    1b66:	3d 81       	ldd	r19, Y+5	; 0x05
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	71 f1       	breq	.+92     	; 0x1bca <DIO_u8TOG_Pin_Val+0xaa>
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	e9 f1       	breq	.+122    	; 0x1bf2 <DIO_u8TOG_Pin_Val+0xd2>
    1b78:	50 c0       	rjmp	.+160    	; 0x1c1a <DIO_u8TOG_Pin_Val+0xfa>
				{
					case PORT_A : TOGGLE_BIT(PORTA_REG,u8Pin_IdCopy);
    1b7a:	ab e3       	ldi	r26, 0x3B	; 59
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	eb e3       	ldi	r30, 0x3B	; 59
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_u8TOG_Pin_Val+0x78>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_u8TOG_Pin_Val+0x74>
    1b9c:	84 27       	eor	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	41 c0       	rjmp	.+130    	; 0x1c24 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_B : TOGGLE_BIT(PORTB_REG,u8Pin_IdCopy);
    1ba2:	a8 e3       	ldi	r26, 0x38	; 56
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e8 e3       	ldi	r30, 0x38	; 56
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_u8TOG_Pin_Val+0xa0>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_u8TOG_Pin_Val+0x9c>
    1bc4:	84 27       	eor	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	2d c0       	rjmp	.+90     	; 0x1c24 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_C : TOGGLE_BIT(PORTC_REG,u8Pin_IdCopy);
    1bca:	a5 e3       	ldi	r26, 0x35	; 53
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e5 e3       	ldi	r30, 0x35	; 53
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_u8TOG_Pin_Val+0xc8>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_u8TOG_Pin_Val+0xc4>
    1bec:	84 27       	eor	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	19 c0       	rjmp	.+50     	; 0x1c24 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_D : TOGGLE_BIT(PORTD_REG,u8Pin_IdCopy);
    1bf2:	a2 e3       	ldi	r26, 0x32	; 50
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e2 e3       	ldi	r30, 0x32	; 50
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_u8TOG_Pin_Val+0xf0>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_u8TOG_Pin_Val+0xec>
    1c14:	84 27       	eor	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					default		:	Error_Status=E_NOK;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_u8TOG_Pin_Val+0x104>
				}

		}
		else
		{
			Error_Status=E_NOK;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_Status;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <ADC_INIT>:
#include "../../SERV/bit_math.h"
#include "../../SERV/stdtypes.h"
#include "adc_init.h"
#include "adc_reg.h"
void ADC_INIT(void)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Enable ADC
	 */
	SET_BIT(ADCSRA_REG,ADEN);
    1c3e:	a6 e2       	ldi	r26, 0x26	; 38
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e6 e2       	ldi	r30, 0x26	; 38
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	8c 93       	st	X, r24
	 */
#if	ADC_INPUT_REFRENCE==ADC_EXTERNAL_INPUT
	CLR_BIT(ADMUX_REG,REFS0);
	CLR_BIT(ADMUX_REG,REFS1);
#elif ADC_INPUT_REFRENCE==ADC_INTERNAL_VCC
	SET_BIT(ADMUX_REG,REFS0);
    1c4c:	a7 e2       	ldi	r26, 0x27	; 39
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e7 e2       	ldi	r30, 0x27	; 39
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	80 64       	ori	r24, 0x40	; 64
    1c58:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1);
    1c5a:	a7 e2       	ldi	r26, 0x27	; 39
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e7 e2       	ldi	r30, 0x27	; 39
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	8f 77       	andi	r24, 0x7F	; 127
    1c66:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,REFS1);
#endif
	/*
	 * Select PRESCALER
	 */
	ADCSRA_REG|=ADC_PRESCALER_SELECTOR;
    1c68:	a6 e2       	ldi	r26, 0x26	; 38
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e6 e2       	ldi	r30, 0x26	; 38
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	86 60       	ori	r24, 0x06	; 6
    1c74:	8c 93       	st	X, r24

	/*
	 * ADJUST RESULT EITHER LEFT OR RIGHT
	 */
#if ADC_ADJUST_RESULT== ADC_ADJUST_RIGHT
	CLR_BIT(ADCSRA_REG,ADLAR);
    1c76:	a6 e2       	ldi	r26, 0x26	; 38
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e6 e2       	ldi	r30, 0x26	; 38
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 7d       	andi	r24, 0xDF	; 223
    1c82:	8c 93       	st	X, r24
#elif ADC_ADJUST_RESULT== ADC_ADJUST_LEFT
	SET_BIT(ADCSRA_REG,ADLAR);
#endif

}
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <ADC_u16_Read_>:

uint16 ADC_u16_Read_(void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <ADC_u16_Read_+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Select Channel
	 */
	ADMUX_REG&=CLEAR_MUX_MUSK;
    1c94:	a7 e2       	ldi	r26, 0x27	; 39
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e7 e2       	ldi	r30, 0x27	; 39
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 7e       	andi	r24, 0xE0	; 224
    1ca0:	8c 93       	st	X, r24
	ADMUX_REG|=ADC_MUX_CHANNEL_SELECTOR;
    1ca2:	a7 e2       	ldi	r26, 0x27	; 39
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e7 e2       	ldi	r30, 0x27	; 39
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8c 93       	st	X, r24
	/*
	 * CONVERSION MODE
	 */
#if	 ADC_CONVERSION_MODE == ADC_SINGLE_CONFERSION
		SET_BIT(ADCSRA_REG,ADSC);
    1cae:	a6 e2       	ldi	r26, 0x26	; 38
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e6 e2       	ldi	r30, 0x26	; 38
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	80 64       	ori	r24, 0x40	; 64
    1cba:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_REG,ADATE);
    1cbc:	a6 e2       	ldi	r26, 0x26	; 38
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e6 e2       	ldi	r30, 0x26	; 38
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8f 7d       	andi	r24, 0xDF	; 223
    1cc8:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA_REG,ADIF)==0);
    1cca:	e6 e2       	ldi	r30, 0x26	; 38
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	82 95       	swap	r24
    1cd2:	8f 70       	andi	r24, 0x0F	; 15
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	81 70       	andi	r24, 0x01	; 1
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	a9 f3       	breq	.-22     	; 0x1cca <ADC_u16_Read_+0x40>
		SET_BIT(ADCSRA_REG,ADIF);
    1ce0:	a6 e2       	ldi	r26, 0x26	; 38
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e6 e2       	ldi	r30, 0x26	; 38
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 61       	ori	r24, 0x10	; 16
    1cec:	8c 93       	st	X, r24
		/*
		 * RETURN REGISTER ONLY LEFT.
		 */
		uint16 ADC_Val=ADC_REG;
    1cee:	e4 e2       	ldi	r30, 0x24	; 36
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(ADCSRA_REG,ADSC);
		SET_BIT(ADCSRA_REG,ADATE);
#endif


	return ADC_Val;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <Led_String_u8Set_Dir>:
/*
 * 		Enable Output on Full Port.
 *
 */
void  Led_String_u8Set_Dir(void)
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(LED_PORT_FULL,FULL_OUTPUT);
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	6f ef       	ldi	r22, 0xFF	; 255
    1d14:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8Set_Port_Dir>
}
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <Led_Pin_u8Set_Dir>:



void Led_Pin_u8Set_Dir(void)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Pin_Dir(LED_PORT,LED_PIN,OUTPUT);
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	64 e0       	ldi	r22, 0x04	; 4
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <Led_String_u8Set_On_Off>:



void Led_String_u8Set_On_Off(uint8 u8ValCopy)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Port_Val(LED_PORT_FULL,u8ValCopy);
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	69 81       	ldd	r22, Y+1	; 0x01
    1d46:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_u8Set_Port_Val>
}
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <Led_Pin_u8Set_On_Off>:



void Led_Pin_u8Set_On_Off(uint8 u8ValCopy)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Pin_Val(LED_PORT,LED_PIN,u8ValCopy);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	64 e0       	ldi	r22, 0x04	; 4
    1d62:	49 81       	ldd	r20, Y+1	; 0x01
    1d64:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
}
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <Led_Pin_u8Tog_Val>:



void Led_Pin_u8Tog_Val(void)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TOG_Pin_Val(LED_PORT,LED_PIN);
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	64 e0       	ldi	r22, 0x04	; 4
    1d7c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <DIO_u8TOG_Pin_Val>
}
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <LCD_Write_CMD>:




void LCD_Write_CMD(uint8 u8CommandCopy)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	2f 97       	sbiw	r28, 0x0f	; 15
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8Set_Pin_Val(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>

	DIO_u8Set_Pin_Val(LCD_DATA_PORT_0,LCD_DATA_PIN_0,GET_BIT(u8CommandCopy,0));
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 2f       	mov	r25, r24
    1db4:	91 70       	andi	r25, 0x01	; 1
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	49 2f       	mov	r20, r25
    1dbc:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_1,LCD_DATA_PIN_1,GET_BIT(u8CommandCopy,1));
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	86 95       	lsr	r24
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	91 70       	andi	r25, 0x01	; 1
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	49 2f       	mov	r20, r25
    1dce:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_2,LCD_DATA_PIN_2,GET_BIT(u8CommandCopy,2));
    1dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd4:	86 95       	lsr	r24
    1dd6:	86 95       	lsr	r24
    1dd8:	98 2f       	mov	r25, r24
    1dda:	91 70       	andi	r25, 0x01	; 1
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	49 2f       	mov	r20, r25
    1de2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_3,LCD_DATA_PIN_3,GET_BIT(u8CommandCopy,3));
    1de6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de8:	86 95       	lsr	r24
    1dea:	86 95       	lsr	r24
    1dec:	86 95       	lsr	r24
    1dee:	98 2f       	mov	r25, r24
    1df0:	91 70       	andi	r25, 0x01	; 1
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	63 e0       	ldi	r22, 0x03	; 3
    1df6:	49 2f       	mov	r20, r25
    1df8:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_4,LCD_DATA_PIN_4,GET_BIT(u8CommandCopy,4));
    1dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfe:	82 95       	swap	r24
    1e00:	8f 70       	andi	r24, 0x0F	; 15
    1e02:	98 2f       	mov	r25, r24
    1e04:	91 70       	andi	r25, 0x01	; 1
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	64 e0       	ldi	r22, 0x04	; 4
    1e0a:	49 2f       	mov	r20, r25
    1e0c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_5,LCD_DATA_PIN_5,GET_BIT(u8CommandCopy,5));
    1e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e12:	82 95       	swap	r24
    1e14:	86 95       	lsr	r24
    1e16:	87 70       	andi	r24, 0x07	; 7
    1e18:	98 2f       	mov	r25, r24
    1e1a:	91 70       	andi	r25, 0x01	; 1
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	65 e0       	ldi	r22, 0x05	; 5
    1e20:	49 2f       	mov	r20, r25
    1e22:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_6,LCD_DATA_PIN_6,GET_BIT(u8CommandCopy,6));
    1e26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e28:	82 95       	swap	r24
    1e2a:	86 95       	lsr	r24
    1e2c:	86 95       	lsr	r24
    1e2e:	83 70       	andi	r24, 0x03	; 3
    1e30:	98 2f       	mov	r25, r24
    1e32:	91 70       	andi	r25, 0x01	; 1
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	66 e0       	ldi	r22, 0x06	; 6
    1e38:	49 2f       	mov	r20, r25
    1e3a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_7,LCD_DATA_PIN_7,GET_BIT(u8CommandCopy,7));
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e40:	98 2f       	mov	r25, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	99 27       	eor	r25, r25
    1e46:	99 1f       	adc	r25, r25
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	67 e0       	ldi	r22, 0x07	; 7
    1e4c:	49 2f       	mov	r20, r25
    1e4e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>

//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8CommandCopy);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	b0 e4       	ldi	r27, 0x40	; 64
    1e64:	8b 87       	std	Y+11, r24	; 0x0b
    1e66:	9c 87       	std	Y+12, r25	; 0x0c
    1e68:	ad 87       	std	Y+13, r26	; 0x0d
    1e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a ef       	ldi	r20, 0xFA	; 250
    1e7a:	54 e4       	ldi	r21, 0x44	; 68
    1e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	98 87       	std	Y+8, r25	; 0x08
    1e88:	a9 87       	std	Y+9, r26	; 0x09
    1e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <LCD_Write_CMD+0x128>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <LCD_Write_CMD+0x1a6>
	else if (__tmp > 65535)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <LCD_Write_CMD+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <LCD_Write_CMD+0x188>
    1ef0:	88 ec       	ldi	r24, 0xC8	; 200
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <LCD_Write_CMD+0x176>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <LCD_Write_CMD+0x16a>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <LCD_Write_CMD+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_Write_CMD+0x1b2>
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>

}
    1f4a:	2f 96       	adiw	r28, 0x0f	; 15
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <LCD_Init>:

void LCD_Init(void)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	ea 97       	sbiw	r28, 0x3a	; 58
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
	uint8 i,j;

	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_0,LCD_DATA_PIN_0,OUTPUT);
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_1,LCD_DATA_PIN_1,OUTPUT);
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	61 e0       	ldi	r22, 0x01	; 1
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_2,LCD_DATA_PIN_2,OUTPUT);
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_3,LCD_DATA_PIN_3,OUTPUT);
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	63 e0       	ldi	r22, 0x03	; 3
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_4,LCD_DATA_PIN_4,OUTPUT);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_5,LCD_DATA_PIN_5,OUTPUT);
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	65 e0       	ldi	r22, 0x05	; 5
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_6,LCD_DATA_PIN_6,OUTPUT);
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	66 e0       	ldi	r22, 0x06	; 6
    1fb0:	41 e0       	ldi	r20, 0x01	; 1
    1fb2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_7,LCD_DATA_PIN_7,OUTPUT);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	67 e0       	ldi	r22, 0x07	; 7
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>

	DIO_u8Set_Pin_Dir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	62 e0       	ldi	r22, 0x02	; 2
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e2       	ldi	r26, 0x20	; 32
    1fe4:	b2 e4       	ldi	r27, 0x42	; 66
    1fe6:	8d ab       	std	Y+53, r24	; 0x35
    1fe8:	9e ab       	std	Y+54, r25	; 0x36
    1fea:	af ab       	std	Y+55, r26	; 0x37
    1fec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	89 ab       	std	Y+49, r24	; 0x31
    2008:	9a ab       	std	Y+50, r25	; 0x32
    200a:	ab ab       	std	Y+51, r26	; 0x33
    200c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    200e:	69 a9       	ldd	r22, Y+49	; 0x31
    2010:	7a a9       	ldd	r23, Y+50	; 0x32
    2012:	8b a9       	ldd	r24, Y+51	; 0x33
    2014:	9c a9       	ldd	r25, Y+52	; 0x34
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <LCD_Init+0xd4>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <LCD_Init+0x152>
	else if (__tmp > 65535)
    2030:	69 a9       	ldd	r22, Y+49	; 0x31
    2032:	7a a9       	ldd	r23, Y+50	; 0x32
    2034:	8b a9       	ldd	r24, Y+51	; 0x33
    2036:	9c a9       	ldd	r25, Y+52	; 0x34
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <LCD_Init+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6d a9       	ldd	r22, Y+53	; 0x35
    204a:	7e a9       	ldd	r23, Y+54	; 0x36
    204c:	8f a9       	ldd	r24, Y+55	; 0x37
    204e:	98 ad       	ldd	r25, Y+56	; 0x38
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	98 ab       	std	Y+48, r25	; 0x30
    206e:	8f a7       	std	Y+47, r24	; 0x2f
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <LCD_Init+0x134>
    2072:	88 ec       	ldi	r24, 0xC8	; 200
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9e a7       	std	Y+46, r25	; 0x2e
    2078:	8d a7       	std	Y+45, r24	; 0x2d
    207a:	8d a5       	ldd	r24, Y+45	; 0x2d
    207c:	9e a5       	ldd	r25, Y+46	; 0x2e
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_Init+0x122>
    2082:	9e a7       	std	Y+46, r25	; 0x2e
    2084:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8f a5       	ldd	r24, Y+47	; 0x2f
    2088:	98 a9       	ldd	r25, Y+48	; 0x30
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	98 ab       	std	Y+48, r25	; 0x30
    208e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8f a5       	ldd	r24, Y+47	; 0x2f
    2092:	98 a9       	ldd	r25, Y+48	; 0x30
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <LCD_Init+0x116>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <LCD_Init+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	69 a9       	ldd	r22, Y+49	; 0x31
    209c:	7a a9       	ldd	r23, Y+50	; 0x32
    209e:	8b a9       	ldd	r24, Y+51	; 0x33
    20a0:	9c a9       	ldd	r25, Y+52	; 0x34
    20a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	98 ab       	std	Y+48, r25	; 0x30
    20ac:	8f a7       	std	Y+47, r24	; 0x2f
    20ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b0:	98 a9       	ldd	r25, Y+48	; 0x30
    20b2:	9c a7       	std	Y+44, r25	; 0x2c
    20b4:	8b a7       	std	Y+43, r24	; 0x2b
    20b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_Init+0x15e>
    20be:	9c a7       	std	Y+44, r25	; 0x2c
    20c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);

	LCD_Write_CMD(LCD_FUNC_SET);
    20c2:	88 e3       	ldi	r24, 0x38	; 56
    20c4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 e8       	ldi	r26, 0x80	; 128
    20ce:	bf e3       	ldi	r27, 0x3F	; 63
    20d0:	8f a3       	std	Y+39, r24	; 0x27
    20d2:	98 a7       	std	Y+40, r25	; 0x28
    20d4:	a9 a7       	std	Y+41, r26	; 0x29
    20d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d8:	6f a1       	ldd	r22, Y+39	; 0x27
    20da:	78 a5       	ldd	r23, Y+40	; 0x28
    20dc:	89 a5       	ldd	r24, Y+41	; 0x29
    20de:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4a ef       	ldi	r20, 0xFA	; 250
    20e6:	54 e4       	ldi	r21, 0x44	; 68
    20e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8b a3       	std	Y+35, r24	; 0x23
    20f2:	9c a3       	std	Y+36, r25	; 0x24
    20f4:	ad a3       	std	Y+37, r26	; 0x25
    20f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20f8:	6b a1       	ldd	r22, Y+35	; 0x23
    20fa:	7c a1       	ldd	r23, Y+36	; 0x24
    20fc:	8d a1       	ldd	r24, Y+37	; 0x25
    20fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e8       	ldi	r20, 0x80	; 128
    2106:	5f e3       	ldi	r21, 0x3F	; 63
    2108:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    210c:	88 23       	and	r24, r24
    210e:	2c f4       	brge	.+10     	; 0x211a <LCD_Init+0x1be>
		__ticks = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9a a3       	std	Y+34, r25	; 0x22
    2116:	89 a3       	std	Y+33, r24	; 0x21
    2118:	3f c0       	rjmp	.+126    	; 0x2198 <LCD_Init+0x23c>
	else if (__tmp > 65535)
    211a:	6b a1       	ldd	r22, Y+35	; 0x23
    211c:	7c a1       	ldd	r23, Y+36	; 0x24
    211e:	8d a1       	ldd	r24, Y+37	; 0x25
    2120:	9e a1       	ldd	r25, Y+38	; 0x26
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	3f ef       	ldi	r19, 0xFF	; 255
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	57 e4       	ldi	r21, 0x47	; 71
    212a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    212e:	18 16       	cp	r1, r24
    2130:	4c f5       	brge	.+82     	; 0x2184 <LCD_Init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2132:	6f a1       	ldd	r22, Y+39	; 0x27
    2134:	78 a5       	ldd	r23, Y+40	; 0x28
    2136:	89 a5       	ldd	r24, Y+41	; 0x29
    2138:	9a a5       	ldd	r25, Y+42	; 0x2a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e2       	ldi	r20, 0x20	; 32
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	89 a3       	std	Y+33, r24	; 0x21
    215a:	0f c0       	rjmp	.+30     	; 0x217a <LCD_Init+0x21e>
    215c:	88 ec       	ldi	r24, 0xC8	; 200
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	98 a3       	std	Y+32, r25	; 0x20
    2162:	8f 8f       	std	Y+31, r24	; 0x1f
    2164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2166:	98 a1       	ldd	r25, Y+32	; 0x20
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_Init+0x20c>
    216c:	98 a3       	std	Y+32, r25	; 0x20
    216e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	9a a3       	std	Y+34, r25	; 0x22
    2178:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217a:	89 a1       	ldd	r24, Y+33	; 0x21
    217c:	9a a1       	ldd	r25, Y+34	; 0x22
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	69 f7       	brne	.-38     	; 0x215c <LCD_Init+0x200>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <LCD_Init+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2184:	6b a1       	ldd	r22, Y+35	; 0x23
    2186:	7c a1       	ldd	r23, Y+36	; 0x24
    2188:	8d a1       	ldd	r24, Y+37	; 0x25
    218a:	9e a1       	ldd	r25, Y+38	; 0x26
    218c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9a a3       	std	Y+34, r25	; 0x22
    2196:	89 a3       	std	Y+33, r24	; 0x21
    2198:	89 a1       	ldd	r24, Y+33	; 0x21
    219a:	9a a1       	ldd	r25, Y+34	; 0x22
    219c:	9e 8f       	std	Y+30, r25	; 0x1e
    219e:	8d 8f       	std	Y+29, r24	; 0x1d
    21a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_Init+0x248>
    21a8:	9e 8f       	std	Y+30, r25	; 0x1e
    21aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Write_CMD(LCD_DISP_CTRL);
    21ac:	8e e0       	ldi	r24, 0x0E	; 14
    21ae:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e8       	ldi	r26, 0x80	; 128
    21b8:	bf e3       	ldi	r27, 0x3F	; 63
    21ba:	89 8f       	std	Y+25, r24	; 0x19
    21bc:	9a 8f       	std	Y+26, r25	; 0x1a
    21be:	ab 8f       	std	Y+27, r26	; 0x1b
    21c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	69 8d       	ldd	r22, Y+25	; 0x19
    21c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8d 8b       	std	Y+21, r24	; 0x15
    21dc:	9e 8b       	std	Y+22, r25	; 0x16
    21de:	af 8b       	std	Y+23, r26	; 0x17
    21e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_Init+0x2a8>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9c 8b       	std	Y+20, r25	; 0x14
    2200:	8b 8b       	std	Y+19, r24	; 0x13
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <LCD_Init+0x326>
	else if (__tmp > 65535)
    2204:	6d 89       	ldd	r22, Y+21	; 0x15
    2206:	7e 89       	ldd	r23, Y+22	; 0x16
    2208:	8f 89       	ldd	r24, Y+23	; 0x17
    220a:	98 8d       	ldd	r25, Y+24	; 0x18
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <LCD_Init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	69 8d       	ldd	r22, Y+25	; 0x19
    221e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9c 8b       	std	Y+20, r25	; 0x14
    2242:	8b 8b       	std	Y+19, r24	; 0x13
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <LCD_Init+0x308>
    2246:	88 ec       	ldi	r24, 0xC8	; 200
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9a 8b       	std	Y+18, r25	; 0x12
    224c:	89 8b       	std	Y+17, r24	; 0x11
    224e:	89 89       	ldd	r24, Y+17	; 0x11
    2250:	9a 89       	ldd	r25, Y+18	; 0x12
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_Init+0x2f6>
    2256:	9a 8b       	std	Y+18, r25	; 0x12
    2258:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	8b 89       	ldd	r24, Y+19	; 0x13
    225c:	9c 89       	ldd	r25, Y+20	; 0x14
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9c 8b       	std	Y+20, r25	; 0x14
    2262:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	8b 89       	ldd	r24, Y+19	; 0x13
    2266:	9c 89       	ldd	r25, Y+20	; 0x14
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <LCD_Init+0x2ea>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <LCD_Init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6d 89       	ldd	r22, Y+21	; 0x15
    2270:	7e 89       	ldd	r23, Y+22	; 0x16
    2272:	8f 89       	ldd	r24, Y+23	; 0x17
    2274:	98 8d       	ldd	r25, Y+24	; 0x18
    2276:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9c 8b       	std	Y+20, r25	; 0x14
    2280:	8b 8b       	std	Y+19, r24	; 0x13
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	8f 87       	std	Y+15, r24	; 0x0f
    228a:	8f 85       	ldd	r24, Y+15	; 0x0f
    228c:	98 89       	ldd	r25, Y+16	; 0x10
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_Init+0x332>
    2292:	98 8b       	std	Y+16, r25	; 0x10
    2294:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Write_CMD(LCD_DISP_CLR);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 e4       	ldi	r26, 0x40	; 64
    22a2:	b0 e4       	ldi	r27, 0x40	; 64
    22a4:	8b 87       	std	Y+11, r24	; 0x0b
    22a6:	9c 87       	std	Y+12, r25	; 0x0c
    22a8:	ad 87       	std	Y+13, r26	; 0x0d
    22aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a ef       	ldi	r20, 0xFA	; 250
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8f 83       	std	Y+7, r24	; 0x07
    22c6:	98 87       	std	Y+8, r25	; 0x08
    22c8:	a9 87       	std	Y+9, r26	; 0x09
    22ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <LCD_Init+0x392>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <LCD_Init+0x410>
	else if (__tmp > 65535)
    22ee:	6f 81       	ldd	r22, Y+7	; 0x07
    22f0:	78 85       	ldd	r23, Y+8	; 0x08
    22f2:	89 85       	ldd	r24, Y+9	; 0x09
    22f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <LCD_Init+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	0f c0       	rjmp	.+30     	; 0x234e <LCD_Init+0x3f2>
    2330:	88 ec       	ldi	r24, 0xC8	; 200
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	8b 83       	std	Y+3, r24	; 0x03
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_Init+0x3e0>
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <LCD_Init+0x3d4>
    2356:	14 c0       	rjmp	.+40     	; 0x2380 <LCD_Init+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	89 83       	std	Y+1, r24	; 0x01
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <LCD_Init+0x41c>
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	LCD_Write_CMD(LCD_ENGLISH_ENT_MOD_SET);
    2380:	86 e0       	ldi	r24, 0x06	; 6
    2382:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>



	LCD_Write_CMD(LCD_CGRAM_ADDRESS);
    2386:	80 e4       	ldi	r24, 0x40	; 64
    2388:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>


	for(i=0;i<8;i++)
    238c:	1a ae       	std	Y+58, r1	; 0x3a
    238e:	20 c0       	rjmp	.+64     	; 0x23d0 <LCD_Init+0x474>
	{
		for(j=0;j<8;j++)
    2390:	19 ae       	std	Y+57, r1	; 0x39
    2392:	18 c0       	rjmp	.+48     	; 0x23c4 <LCD_Init+0x468>
		{
			LCD_WRITE_CHAR(LCD_u8CustomCharArray[i][j]);
    2394:	8a ad       	ldd	r24, Y+58	; 0x3a
    2396:	48 2f       	mov	r20, r24
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	89 ad       	ldd	r24, Y+57	; 0x39
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	ca 01       	movw	r24, r20
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	82 0f       	add	r24, r18
    23b0:	93 1f       	adc	r25, r19
    23b2:	fc 01       	movw	r30, r24
    23b4:	e8 59       	subi	r30, 0x98	; 152
    23b6:	fe 4f       	sbci	r31, 0xFE	; 254
    23b8:	80 81       	ld	r24, Z
    23ba:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_WRITE_CHAR>
	LCD_Write_CMD(LCD_CGRAM_ADDRESS);


	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
    23be:	89 ad       	ldd	r24, Y+57	; 0x39
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	89 af       	std	Y+57, r24	; 0x39
    23c4:	89 ad       	ldd	r24, Y+57	; 0x39
    23c6:	88 30       	cpi	r24, 0x08	; 8
    23c8:	28 f3       	brcs	.-54     	; 0x2394 <LCD_Init+0x438>


	LCD_Write_CMD(LCD_CGRAM_ADDRESS);


	for(i=0;i<8;i++)
    23ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	8a af       	std	Y+58, r24	; 0x3a
    23d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    23d2:	88 30       	cpi	r24, 0x08	; 8
    23d4:	e8 f2       	brcs	.-70     	; 0x2390 <LCD_Init+0x434>
		{
			LCD_WRITE_CHAR(LCD_u8CustomCharArray[i][j]);
		}
	}

	LCD_Return_Home();
    23d6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_Return_Home>

}
    23da:	ea 96       	adiw	r28, 0x3a	; 58
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_CLR_SCR>:
void LCD_CLR_SCR(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	2e 97       	sbiw	r28, 0x0e	; 14
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_DISP_CLR);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e4       	ldi	r26, 0x40	; 64
    240c:	b0 e4       	ldi	r27, 0x40	; 64
    240e:	8b 87       	std	Y+11, r24	; 0x0b
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	ad 87       	std	Y+13, r26	; 0x0d
    2414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a ef       	ldi	r20, 0xFA	; 250
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	a9 87       	std	Y+9, r26	; 0x09
    2434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <LCD_CLR_SCR+0x6c>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <LCD_CLR_SCR+0xea>
	else if (__tmp > 65535)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <LCD_CLR_SCR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <LCD_CLR_SCR+0xcc>
    249a:	88 ec       	ldi	r24, 0xC8	; 200
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_CLR_SCR+0xba>
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <LCD_CLR_SCR+0xae>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <LCD_CLR_SCR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_CLR_SCR+0xf6>
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    24ea:	2e 96       	adiw	r28, 0x0e	; 14
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(uint8 u8CharCopy)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	2f 97       	sbiw	r28, 0x0f	; 15
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8Set_Pin_Val(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	41 e0       	ldi	r20, 0x01	; 1
    2518:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_0,LCD_DATA_PIN_0,GET_BIT(u8CharCopy,0));
    2526:	8f 85       	ldd	r24, Y+15	; 0x0f
    2528:	98 2f       	mov	r25, r24
    252a:	91 70       	andi	r25, 0x01	; 1
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	49 2f       	mov	r20, r25
    2532:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_1,LCD_DATA_PIN_1,GET_BIT(u8CharCopy,1));
    2536:	8f 85       	ldd	r24, Y+15	; 0x0f
    2538:	86 95       	lsr	r24
    253a:	98 2f       	mov	r25, r24
    253c:	91 70       	andi	r25, 0x01	; 1
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	49 2f       	mov	r20, r25
    2544:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_2,LCD_DATA_PIN_2,GET_BIT(u8CharCopy,2));
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	86 95       	lsr	r24
    254c:	86 95       	lsr	r24
    254e:	98 2f       	mov	r25, r24
    2550:	91 70       	andi	r25, 0x01	; 1
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	62 e0       	ldi	r22, 0x02	; 2
    2556:	49 2f       	mov	r20, r25
    2558:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_3,LCD_DATA_PIN_3,GET_BIT(u8CharCopy,3));
    255c:	8f 85       	ldd	r24, Y+15	; 0x0f
    255e:	86 95       	lsr	r24
    2560:	86 95       	lsr	r24
    2562:	86 95       	lsr	r24
    2564:	98 2f       	mov	r25, r24
    2566:	91 70       	andi	r25, 0x01	; 1
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	63 e0       	ldi	r22, 0x03	; 3
    256c:	49 2f       	mov	r20, r25
    256e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_4,LCD_DATA_PIN_4,GET_BIT(u8CharCopy,4));
    2572:	8f 85       	ldd	r24, Y+15	; 0x0f
    2574:	82 95       	swap	r24
    2576:	8f 70       	andi	r24, 0x0F	; 15
    2578:	98 2f       	mov	r25, r24
    257a:	91 70       	andi	r25, 0x01	; 1
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	64 e0       	ldi	r22, 0x04	; 4
    2580:	49 2f       	mov	r20, r25
    2582:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_5,LCD_DATA_PIN_5,GET_BIT(u8CharCopy,5));
    2586:	8f 85       	ldd	r24, Y+15	; 0x0f
    2588:	82 95       	swap	r24
    258a:	86 95       	lsr	r24
    258c:	87 70       	andi	r24, 0x07	; 7
    258e:	98 2f       	mov	r25, r24
    2590:	91 70       	andi	r25, 0x01	; 1
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	65 e0       	ldi	r22, 0x05	; 5
    2596:	49 2f       	mov	r20, r25
    2598:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_6,LCD_DATA_PIN_6,GET_BIT(u8CharCopy,6));
    259c:	8f 85       	ldd	r24, Y+15	; 0x0f
    259e:	82 95       	swap	r24
    25a0:	86 95       	lsr	r24
    25a2:	86 95       	lsr	r24
    25a4:	83 70       	andi	r24, 0x03	; 3
    25a6:	98 2f       	mov	r25, r24
    25a8:	91 70       	andi	r25, 0x01	; 1
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	66 e0       	ldi	r22, 0x06	; 6
    25ae:	49 2f       	mov	r20, r25
    25b0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_7,LCD_DATA_PIN_7,GET_BIT(u8CharCopy,7));
    25b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b6:	98 2f       	mov	r25, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	99 27       	eor	r25, r25
    25bc:	99 1f       	adc	r25, r25
    25be:	82 e0       	ldi	r24, 0x02	; 2
    25c0:	67 e0       	ldi	r22, 0x07	; 7
    25c2:	49 2f       	mov	r20, r25
    25c4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	62 e0       	ldi	r22, 0x02	; 2
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e0       	ldi	r26, 0x00	; 0
    25d8:	b0 e4       	ldi	r27, 0x40	; 64
    25da:	8b 87       	std	Y+11, r24	; 0x0b
    25dc:	9c 87       	std	Y+12, r25	; 0x0c
    25de:	ad 87       	std	Y+13, r26	; 0x0d
    25e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8f 83       	std	Y+7, r24	; 0x07
    25fc:	98 87       	std	Y+8, r25	; 0x08
    25fe:	a9 87       	std	Y+9, r26	; 0x09
    2600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_WRITE_CHAR+0x128>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <LCD_WRITE_CHAR+0x1a6>
	else if (__tmp > 65535)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <LCD_WRITE_CHAR+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <LCD_WRITE_CHAR+0x188>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_WRITE_CHAR+0x176>
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <LCD_WRITE_CHAR+0x16a>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <LCD_WRITE_CHAR+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_WRITE_CHAR+0x1b2>
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	62 e0       	ldi	r22, 0x02	; 2
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>


}
    26c0:	2f 96       	adiw	r28, 0x0f	; 15
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(const uint8* u8pStringCopy)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <LCD_WRITE_STRING+0x6>
    26d8:	0f 92       	push	r0
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	9b 83       	std	Y+3, r25	; 0x03
    26e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    26e2:	19 82       	std	Y+1, r1	; 0x01
    26e4:	0e c0       	rjmp	.+28     	; 0x2702 <LCD_WRITE_STRING+0x30>
	//	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
	//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8pStringCopy[i]);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	fc 01       	movw	r30, r24
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	80 81       	ld	r24, Z
    26f8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_WRITE_CHAR>
		i++;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	8f 5f       	subi	r24, 0xFF	; 255
    2700:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WRITE_STRING(const uint8* u8pStringCopy)
{
	uint8 i=0;
	while(u8pStringCopy[i]!='\0')
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	28 2f       	mov	r18, r24
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	9b 81       	ldd	r25, Y+3	; 0x03
    270c:	fc 01       	movw	r30, r24
    270e:	e2 0f       	add	r30, r18
    2710:	f3 1f       	adc	r31, r19
    2712:	80 81       	ld	r24, Z
    2714:	88 23       	and	r24, r24
    2716:	39 f7       	brne	.-50     	; 0x26e6 <LCD_WRITE_STRING+0x14>
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
		i++;
	}
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <LCD_WRITE_STRING_Delayed>:
void LCD_WRITE_STRING_Delayed(const uint8* u8pStringCopy,uint16 u8DelayCopy)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	cd b7       	in	r28, 0x3d	; 61
    272a:	de b7       	in	r29, 0x3e	; 62
    272c:	63 97       	sbiw	r28, 0x13	; 19
    272e:	0f b6       	in	r0, 0x3f	; 63
    2730:	f8 94       	cli
    2732:	de bf       	out	0x3e, r29	; 62
    2734:	0f be       	out	0x3f, r0	; 63
    2736:	cd bf       	out	0x3d, r28	; 61
    2738:	99 8b       	std	Y+17, r25	; 0x11
    273a:	88 8b       	std	Y+16, r24	; 0x10
    273c:	7b 8b       	std	Y+19, r23	; 0x13
    273e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i=0;
    2740:	1f 86       	std	Y+15, r1	; 0x0f
    2742:	87 c0       	rjmp	.+270    	; 0x2852 <LCD_WRITE_STRING_Delayed+0x12e>
	//	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
	//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8pStringCopy[i]);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
    2744:	8f 85       	ldd	r24, Y+15	; 0x0f
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	88 89       	ldd	r24, Y+16	; 0x10
    274c:	99 89       	ldd	r25, Y+17	; 0x11
    274e:	fc 01       	movw	r30, r24
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	80 81       	ld	r24, Z
    2756:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_WRITE_CHAR>
		_delay_ms(u8DelayCopy);
    275a:	8a 89       	ldd	r24, Y+18	; 0x12
    275c:	9b 89       	ldd	r25, Y+19	; 0x13
    275e:	cc 01       	movw	r24, r24
    2760:	a0 e0       	ldi	r26, 0x00	; 0
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8b 87       	std	Y+11, r24	; 0x0b
    2772:	9c 87       	std	Y+12, r25	; 0x0c
    2774:	ad 87       	std	Y+13, r26	; 0x0d
    2776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6b 85       	ldd	r22, Y+11	; 0x0b
    277a:	7c 85       	ldd	r23, Y+12	; 0x0c
    277c:	8d 85       	ldd	r24, Y+13	; 0x0d
    277e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8f 83       	std	Y+7, r24	; 0x07
    2792:	98 87       	std	Y+8, r25	; 0x08
    2794:	a9 87       	std	Y+9, r26	; 0x09
    2796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <LCD_WRITE_STRING_Delayed+0x96>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <LCD_WRITE_STRING_Delayed+0x114>
	else if (__tmp > 65535)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <LCD_WRITE_STRING_Delayed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <LCD_WRITE_STRING_Delayed+0xf6>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_WRITE_STRING_Delayed+0xe4>
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8d 81       	ldd	r24, Y+5	; 0x05
    2812:	9e 81       	ldd	r25, Y+6	; 0x06
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9e 83       	std	Y+6, r25	; 0x06
    2818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <LCD_WRITE_STRING_Delayed+0xd8>
    2822:	14 c0       	rjmp	.+40     	; 0x284c <LCD_WRITE_STRING_Delayed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_WRITE_STRING_Delayed+0x120>
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	89 83       	std	Y+1, r24	; 0x01
		i++;
    284c:	8f 85       	ldd	r24, Y+15	; 0x0f
    284e:	8f 5f       	subi	r24, 0xFF	; 255
    2850:	8f 87       	std	Y+15, r24	; 0x0f
	}
}
void LCD_WRITE_STRING_Delayed(const uint8* u8pStringCopy,uint16 u8DelayCopy)
{
	uint8 i=0;
	while(u8pStringCopy[i]!='\0')
    2852:	8f 85       	ldd	r24, Y+15	; 0x0f
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	88 89       	ldd	r24, Y+16	; 0x10
    285a:	99 89       	ldd	r25, Y+17	; 0x11
    285c:	fc 01       	movw	r30, r24
    285e:	e2 0f       	add	r30, r18
    2860:	f3 1f       	adc	r31, r19
    2862:	80 81       	ld	r24, Z
    2864:	88 23       	and	r24, r24
    2866:	09 f0       	breq	.+2      	; 0x286a <LCD_WRITE_STRING_Delayed+0x146>
    2868:	6d cf       	rjmp	.-294    	; 0x2744 <LCD_WRITE_STRING_Delayed+0x20>
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
		_delay_ms(u8DelayCopy);
		i++;
	}
}
    286a:	63 96       	adiw	r28, 0x13	; 19
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <LCD_Entry_Mode_Arabic>:
void LCD_Entry_Mode_Arabic(void)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	2e 97       	sbiw	r28, 0x0e	; 14
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_ARABIC_ENT_MOD_SET);
    2890:	84 e0       	ldi	r24, 0x04	; 4
    2892:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e4       	ldi	r27, 0x40	; 64
    289e:	8b 87       	std	Y+11, r24	; 0x0b
    28a0:	9c 87       	std	Y+12, r25	; 0x0c
    28a2:	ad 87       	std	Y+13, r26	; 0x0d
    28a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	4a ef       	ldi	r20, 0xFA	; 250
    28b4:	54 e4       	ldi	r21, 0x44	; 68
    28b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	8f 83       	std	Y+7, r24	; 0x07
    28c0:	98 87       	std	Y+8, r25	; 0x08
    28c2:	a9 87       	std	Y+9, r26	; 0x09
    28c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c6:	6f 81       	ldd	r22, Y+7	; 0x07
    28c8:	78 85       	ldd	r23, Y+8	; 0x08
    28ca:	89 85       	ldd	r24, Y+9	; 0x09
    28cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	2c f4       	brge	.+10     	; 0x28e8 <LCD_Entry_Mode_Arabic+0x6c>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	3f c0       	rjmp	.+126    	; 0x2966 <LCD_Entry_Mode_Arabic+0xea>
	else if (__tmp > 65535)
    28e8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ea:	78 85       	ldd	r23, Y+8	; 0x08
    28ec:	89 85       	ldd	r24, Y+9	; 0x09
    28ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	4f e7       	ldi	r20, 0x7F	; 127
    28f6:	57 e4       	ldi	r21, 0x47	; 71
    28f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28fc:	18 16       	cp	r1, r24
    28fe:	4c f5       	brge	.+82     	; 0x2952 <LCD_Entry_Mode_Arabic+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2900:	6b 85       	ldd	r22, Y+11	; 0x0b
    2902:	7c 85       	ldd	r23, Y+12	; 0x0c
    2904:	8d 85       	ldd	r24, Y+13	; 0x0d
    2906:	9e 85       	ldd	r25, Y+14	; 0x0e
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e2       	ldi	r20, 0x20	; 32
    290e:	51 e4       	ldi	r21, 0x41	; 65
    2910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <LCD_Entry_Mode_Arabic+0xcc>
    292a:	88 ec       	ldi	r24, 0xC8	; 200
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c 83       	std	Y+4, r25	; 0x04
    2930:	8b 83       	std	Y+3, r24	; 0x03
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <LCD_Entry_Mode_Arabic+0xba>
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	69 f7       	brne	.-38     	; 0x292a <LCD_Entry_Mode_Arabic+0xae>
    2950:	14 c0       	rjmp	.+40     	; 0x297a <LCD_Entry_Mode_Arabic+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	6f 81       	ldd	r22, Y+7	; 0x07
    2954:	78 85       	ldd	r23, Y+8	; 0x08
    2956:	89 85       	ldd	r24, Y+9	; 0x09
    2958:	9a 85       	ldd	r25, Y+10	; 0x0a
    295a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	9e 83       	std	Y+6, r25	; 0x06
    2964:	8d 83       	std	Y+5, r24	; 0x05
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <LCD_Entry_Mode_Arabic+0xf6>
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    297a:	2e 96       	adiw	r28, 0x0e	; 14
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LCD_GoTo_X_Y>:
void LCD_GoTo_X_Y(uint8 X,uint8 Y )
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	00 d0       	rcall	.+0      	; 0x2992 <LCD_GoTo_X_Y+0x6>
    2992:	00 d0       	rcall	.+0      	; 0x2994 <LCD_GoTo_X_Y+0x8>
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	89 83       	std	Y+1, r24	; 0x01
    299a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Y)
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	3c 83       	std	Y+4, r19	; 0x04
    29a4:	2b 83       	std	Y+3, r18	; 0x03
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	91 05       	cpc	r25, r1
    29ae:	31 f0       	breq	.+12     	; 0x29bc <LCD_GoTo_X_Y+0x30>
    29b0:	2b 81       	ldd	r18, Y+3	; 0x03
    29b2:	3c 81       	ldd	r19, Y+4	; 0x04
    29b4:	22 30       	cpi	r18, 0x02	; 2
    29b6:	31 05       	cpc	r19, r1
    29b8:	31 f0       	breq	.+12     	; 0x29c6 <LCD_GoTo_X_Y+0x3a>
    29ba:	09 c0       	rjmp	.+18     	; 0x29ce <LCD_GoTo_X_Y+0x42>
	{
		case 1:
			LCD_Write_CMD(LCD_JMP_TOP_LEFT+X);
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	80 58       	subi	r24, 0x80	; 128
    29c0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <LCD_GoTo_X_Y+0x42>
			break;
		case 2:
			LCD_Write_CMD(LCD_JMP_BOT_LEFT+X);
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	80 54       	subi	r24, 0x40	; 64
    29ca:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
			break;
	}

}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <LCD_Return_Home>:
void LCD_Return_Home(void)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	2e 97       	sbiw	r28, 0x0e	; 14
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_RET_HOME);
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	a0 e0       	ldi	r26, 0x00	; 0
    29fc:	b0 e4       	ldi	r27, 0x40	; 64
    29fe:	8b 87       	std	Y+11, r24	; 0x0b
    2a00:	9c 87       	std	Y+12, r25	; 0x0c
    2a02:	ad 87       	std	Y+13, r26	; 0x0d
    2a04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a ef       	ldi	r20, 0xFA	; 250
    2a14:	54 e4       	ldi	r21, 0x44	; 68
    2a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	8f 83       	std	Y+7, r24	; 0x07
    2a20:	98 87       	std	Y+8, r25	; 0x08
    2a22:	a9 87       	std	Y+9, r26	; 0x09
    2a24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a26:	6f 81       	ldd	r22, Y+7	; 0x07
    2a28:	78 85       	ldd	r23, Y+8	; 0x08
    2a2a:	89 85       	ldd	r24, Y+9	; 0x09
    2a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f e3       	ldi	r21, 0x3F	; 63
    2a36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	2c f4       	brge	.+10     	; 0x2a48 <LCD_Return_Home+0x6c>
		__ticks = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	3f c0       	rjmp	.+126    	; 0x2ac6 <LCD_Return_Home+0xea>
	else if (__tmp > 65535)
    2a48:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4a:	78 85       	ldd	r23, Y+8	; 0x08
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	3f ef       	ldi	r19, 0xFF	; 255
    2a54:	4f e7       	ldi	r20, 0x7F	; 127
    2a56:	57 e4       	ldi	r21, 0x47	; 71
    2a58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a5c:	18 16       	cp	r1, r24
    2a5e:	4c f5       	brge	.+82     	; 0x2ab2 <LCD_Return_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e2       	ldi	r20, 0x20	; 32
    2a6e:	51 e4       	ldi	r21, 0x41	; 65
    2a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	0f c0       	rjmp	.+30     	; 0x2aa8 <LCD_Return_Home+0xcc>
    2a8a:	88 ec       	ldi	r24, 0xC8	; 200
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9c 83       	std	Y+4, r25	; 0x04
    2a90:	8b 83       	std	Y+3, r24	; 0x03
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <LCD_Return_Home+0xba>
    2a9a:	9c 83       	std	Y+4, r25	; 0x04
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	69 f7       	brne	.-38     	; 0x2a8a <LCD_Return_Home+0xae>
    2ab0:	14 c0       	rjmp	.+40     	; 0x2ada <LCD_Return_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab4:	78 85       	ldd	r23, Y+8	; 0x08
    2ab6:	89 85       	ldd	r24, Y+9	; 0x09
    2ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9e 83       	std	Y+6, r25	; 0x06
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <LCD_Return_Home+0xf6>
    2ad6:	9a 83       	std	Y+2, r25	; 0x02
    2ad8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2ada:	2e 96       	adiw	r28, 0x0e	; 14
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <LCD_Write_INT>:



//void LCD_Write_INT(sint32 s32IntCopy)
void LCD_Write_INT(const sint32 s32IntCopy)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <LCD_Write_INT+0x6>
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <LCD_Write_INT+0x8>
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <LCD_Write_INT+0xa>
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	6b 83       	std	Y+3, r22	; 0x03
    2afc:	7c 83       	std	Y+4, r23	; 0x04
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	9e 83       	std	Y+6, r25	; 0x06
//	{
//		str2[begin]=str[i];
//	}
//	str2[begin]='\0';

	itoa(s32IntCopy, str, 10);
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	29 81       	ldd	r18, Y+1	; 0x01
    2b08:	3a 81       	ldd	r19, Y+2	; 0x02
    2b0a:	b9 01       	movw	r22, r18
    2b0c:	4a e0       	ldi	r20, 0x0A	; 10
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	0e 94 8f 1a 	call	0x351e	; 0x351e <itoa>
	LCD_WRITE_STRING(str);
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_WRITE_STRING>
}
    2b1c:	26 96       	adiw	r28, 0x06	; 6
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <LCD_SHIFT_Cursor_Left>:
 *
 */


void LCD_SHIFT_Cursor_Left(void)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	2e 97       	sbiw	r28, 0x0e	; 14
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_Cursor_LEFT);
    2b42:	80 e1       	ldi	r24, 0x10	; 16
    2b44:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e4       	ldi	r27, 0x40	; 64
    2b50:	8b 87       	std	Y+11, r24	; 0x0b
    2b52:	9c 87       	std	Y+12, r25	; 0x0c
    2b54:	ad 87       	std	Y+13, r26	; 0x0d
    2b56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4a ef       	ldi	r20, 0xFA	; 250
    2b66:	54 e4       	ldi	r21, 0x44	; 68
    2b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8f 83       	std	Y+7, r24	; 0x07
    2b72:	98 87       	std	Y+8, r25	; 0x08
    2b74:	a9 87       	std	Y+9, r26	; 0x09
    2b76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b78:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7a:	78 85       	ldd	r23, Y+8	; 0x08
    2b7c:	89 85       	ldd	r24, Y+9	; 0x09
    2b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b8c:	88 23       	and	r24, r24
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <LCD_SHIFT_Cursor_Left+0x6c>
		__ticks = 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	3f c0       	rjmp	.+126    	; 0x2c18 <LCD_SHIFT_Cursor_Left+0xea>
	else if (__tmp > 65535)
    2b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9c:	78 85       	ldd	r23, Y+8	; 0x08
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bae:	18 16       	cp	r1, r24
    2bb0:	4c f5       	brge	.+82     	; 0x2c04 <LCD_SHIFT_Cursor_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <LCD_SHIFT_Cursor_Left+0xcc>
    2bdc:	88 ec       	ldi	r24, 0xC8	; 200
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9c 83       	std	Y+4, r25	; 0x04
    2be2:	8b 83       	std	Y+3, r24	; 0x03
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <LCD_SHIFT_Cursor_Left+0xba>
    2bec:	9c 83       	std	Y+4, r25	; 0x04
    2bee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <LCD_SHIFT_Cursor_Left+0xae>
    2c02:	14 c0       	rjmp	.+40     	; 0x2c2c <LCD_SHIFT_Cursor_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	9a 83       	std	Y+2, r25	; 0x02
    2c1e:	89 83       	std	Y+1, r24	; 0x01
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	9a 81       	ldd	r25, Y+2	; 0x02
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	f1 f7       	brne	.-4      	; 0x2c24 <LCD_SHIFT_Cursor_Left+0xf6>
    2c28:	9a 83       	std	Y+2, r25	; 0x02
    2c2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2c2c:	2e 96       	adiw	r28, 0x0e	; 14
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <LCD_SHIFT_Cursor_Right>:


void LCD_SHIFT_Cursor_Right(void)
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	2e 97       	sbiw	r28, 0x0e	; 14
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_Cursor_RIGHT);
    2c52:	84 e1       	ldi	r24, 0x14	; 20
    2c54:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	a0 e0       	ldi	r26, 0x00	; 0
    2c5e:	b0 e4       	ldi	r27, 0x40	; 64
    2c60:	8b 87       	std	Y+11, r24	; 0x0b
    2c62:	9c 87       	std	Y+12, r25	; 0x0c
    2c64:	ad 87       	std	Y+13, r26	; 0x0d
    2c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a ef       	ldi	r20, 0xFA	; 250
    2c76:	54 e4       	ldi	r21, 0x44	; 68
    2c78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8f 83       	std	Y+7, r24	; 0x07
    2c82:	98 87       	std	Y+8, r25	; 0x08
    2c84:	a9 87       	std	Y+9, r26	; 0x09
    2c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e8       	ldi	r20, 0x80	; 128
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c9c:	88 23       	and	r24, r24
    2c9e:	2c f4       	brge	.+10     	; 0x2caa <LCD_SHIFT_Cursor_Right+0x6c>
		__ticks = 1;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	3f c0       	rjmp	.+126    	; 0x2d28 <LCD_SHIFT_Cursor_Right+0xea>
	else if (__tmp > 65535)
    2caa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cac:	78 85       	ldd	r23, Y+8	; 0x08
    2cae:	89 85       	ldd	r24, Y+9	; 0x09
    2cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	4f e7       	ldi	r20, 0x7F	; 127
    2cb8:	57 e4       	ldi	r21, 0x47	; 71
    2cba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cbe:	18 16       	cp	r1, r24
    2cc0:	4c f5       	brge	.+82     	; 0x2d14 <LCD_SHIFT_Cursor_Right+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <LCD_SHIFT_Cursor_Right+0xcc>
    2cec:	88 ec       	ldi	r24, 0xC8	; 200
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_SHIFT_Cursor_Right+0xba>
    2cfc:	9c 83       	std	Y+4, r25	; 0x04
    2cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	69 f7       	brne	.-38     	; 0x2cec <LCD_SHIFT_Cursor_Right+0xae>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <LCD_SHIFT_Cursor_Right+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d14:	6f 81       	ldd	r22, Y+7	; 0x07
    2d16:	78 85       	ldd	r23, Y+8	; 0x08
    2d18:	89 85       	ldd	r24, Y+9	; 0x09
    2d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <LCD_SHIFT_Cursor_Right+0xf6>
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2d3c:	2e 96       	adiw	r28, 0x0e	; 14
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret

00002d4e <LCD_SHIFT_Display_Right>:



void LCD_SHIFT_Display_Right(void)
{
    2d4e:	df 93       	push	r29
    2d50:	cf 93       	push	r28
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	2e 97       	sbiw	r28, 0x0e	; 14
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_DSP_RIGHT);
    2d62:	8c e1       	ldi	r24, 0x1C	; 28
    2d64:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 e0       	ldi	r26, 0x00	; 0
    2d6e:	b0 e4       	ldi	r27, 0x40	; 64
    2d70:	8b 87       	std	Y+11, r24	; 0x0b
    2d72:	9c 87       	std	Y+12, r25	; 0x0c
    2d74:	ad 87       	std	Y+13, r26	; 0x0d
    2d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	4a ef       	ldi	r20, 0xFA	; 250
    2d86:	54 e4       	ldi	r21, 0x44	; 68
    2d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8f 83       	std	Y+7, r24	; 0x07
    2d92:	98 87       	std	Y+8, r25	; 0x08
    2d94:	a9 87       	std	Y+9, r26	; 0x09
    2d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <LCD_SHIFT_Display_Right+0x6c>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <LCD_SHIFT_Display_Right+0xea>
	else if (__tmp > 65535)
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <LCD_SHIFT_Display_Right+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <LCD_SHIFT_Display_Right+0xcc>
    2dfc:	88 ec       	ldi	r24, 0xC8	; 200
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <LCD_SHIFT_Display_Right+0xba>
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <LCD_SHIFT_Display_Right+0xae>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <LCD_SHIFT_Display_Right+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <LCD_SHIFT_Display_Right+0xf6>
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2e4c:	2e 96       	adiw	r28, 0x0e	; 14
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <LCD_SHIFT_Display_Left>:



void LCD_SHIFT_Display_Left(void)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	2e 97       	sbiw	r28, 0x0e	; 14
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_DSP_LEFT);
    2e72:	88 e1       	ldi	r24, 0x18	; 24
    2e74:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	a0 e0       	ldi	r26, 0x00	; 0
    2e7e:	b0 e4       	ldi	r27, 0x40	; 64
    2e80:	8b 87       	std	Y+11, r24	; 0x0b
    2e82:	9c 87       	std	Y+12, r25	; 0x0c
    2e84:	ad 87       	std	Y+13, r26	; 0x0d
    2e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	4a ef       	ldi	r20, 0xFA	; 250
    2e96:	54 e4       	ldi	r21, 0x44	; 68
    2e98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	8f 83       	std	Y+7, r24	; 0x07
    2ea2:	98 87       	std	Y+8, r25	; 0x08
    2ea4:	a9 87       	std	Y+9, r26	; 0x09
    2ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eaa:	78 85       	ldd	r23, Y+8	; 0x08
    2eac:	89 85       	ldd	r24, Y+9	; 0x09
    2eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e8       	ldi	r20, 0x80	; 128
    2eb6:	5f e3       	ldi	r21, 0x3F	; 63
    2eb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ebc:	88 23       	and	r24, r24
    2ebe:	2c f4       	brge	.+10     	; 0x2eca <LCD_SHIFT_Display_Left+0x6c>
		__ticks = 1;
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	3f c0       	rjmp	.+126    	; 0x2f48 <LCD_SHIFT_Display_Left+0xea>
	else if (__tmp > 65535)
    2eca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ecc:	78 85       	ldd	r23, Y+8	; 0x08
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	3f ef       	ldi	r19, 0xFF	; 255
    2ed6:	4f e7       	ldi	r20, 0x7F	; 127
    2ed8:	57 e4       	ldi	r21, 0x47	; 71
    2eda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ede:	18 16       	cp	r1, r24
    2ee0:	4c f5       	brge	.+82     	; 0x2f34 <LCD_SHIFT_Display_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e2       	ldi	r20, 0x20	; 32
    2ef0:	51 e4       	ldi	r21, 0x41	; 65
    2ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	0f c0       	rjmp	.+30     	; 0x2f2a <LCD_SHIFT_Display_Left+0xcc>
    2f0c:	88 ec       	ldi	r24, 0xC8	; 200
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
    2f14:	8b 81       	ldd	r24, Y+3	; 0x03
    2f16:	9c 81       	ldd	r25, Y+4	; 0x04
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <LCD_SHIFT_Display_Left+0xba>
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	69 f7       	brne	.-38     	; 0x2f0c <LCD_SHIFT_Display_Left+0xae>
    2f32:	14 c0       	rjmp	.+40     	; 0x2f5c <LCD_SHIFT_Display_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f34:	6f 81       	ldd	r22, Y+7	; 0x07
    2f36:	78 85       	ldd	r23, Y+8	; 0x08
    2f38:	89 85       	ldd	r24, Y+9	; 0x09
    2f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9e 83       	std	Y+6, r25	; 0x06
    2f46:	8d 83       	std	Y+5, r24	; 0x05
    2f48:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	9a 81       	ldd	r25, Y+2	; 0x02
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <LCD_SHIFT_Display_Left+0xf6>
    2f58:	9a 83       	std	Y+2, r25	; 0x02
    2f5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2f5c:	2e 96       	adiw	r28, 0x0e	; 14
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <LCD_JMP_Bottom_Left>:


void LCD_JMP_Bottom_Left(void)
{
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	2e 97       	sbiw	r28, 0x0e	; 14
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_JMP_BOT_LEFT);
    2f82:	80 ec       	ldi	r24, 0xC0	; 192
    2f84:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	a0 e0       	ldi	r26, 0x00	; 0
    2f8e:	b0 e4       	ldi	r27, 0x40	; 64
    2f90:	8b 87       	std	Y+11, r24	; 0x0b
    2f92:	9c 87       	std	Y+12, r25	; 0x0c
    2f94:	ad 87       	std	Y+13, r26	; 0x0d
    2f96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a ef       	ldi	r20, 0xFA	; 250
    2fa6:	54 e4       	ldi	r21, 0x44	; 68
    2fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8f 83       	std	Y+7, r24	; 0x07
    2fb2:	98 87       	std	Y+8, r25	; 0x08
    2fb4:	a9 87       	std	Y+9, r26	; 0x09
    2fb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fba:	78 85       	ldd	r23, Y+8	; 0x08
    2fbc:	89 85       	ldd	r24, Y+9	; 0x09
    2fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e8       	ldi	r20, 0x80	; 128
    2fc6:	5f e3       	ldi	r21, 0x3F	; 63
    2fc8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fcc:	88 23       	and	r24, r24
    2fce:	2c f4       	brge	.+10     	; 0x2fda <LCD_JMP_Bottom_Left+0x6c>
		__ticks = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
    2fd8:	3f c0       	rjmp	.+126    	; 0x3058 <LCD_JMP_Bottom_Left+0xea>
	else if (__tmp > 65535)
    2fda:	6f 81       	ldd	r22, Y+7	; 0x07
    2fdc:	78 85       	ldd	r23, Y+8	; 0x08
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	4f e7       	ldi	r20, 0x7F	; 127
    2fe8:	57 e4       	ldi	r21, 0x47	; 71
    2fea:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fee:	18 16       	cp	r1, r24
    2ff0:	4c f5       	brge	.+82     	; 0x3044 <LCD_JMP_Bottom_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e2       	ldi	r20, 0x20	; 32
    3000:	51 e4       	ldi	r21, 0x41	; 65
    3002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	bc 01       	movw	r22, r24
    300c:	cd 01       	movw	r24, r26
    300e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
    301a:	0f c0       	rjmp	.+30     	; 0x303a <LCD_JMP_Bottom_Left+0xcc>
    301c:	88 ec       	ldi	r24, 0xC8	; 200
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	9c 83       	std	Y+4, r25	; 0x04
    3022:	8b 83       	std	Y+3, r24	; 0x03
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <LCD_JMP_Bottom_Left+0xba>
    302c:	9c 83       	std	Y+4, r25	; 0x04
    302e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	9e 83       	std	Y+6, r25	; 0x06
    3038:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	9e 81       	ldd	r25, Y+6	; 0x06
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	69 f7       	brne	.-38     	; 0x301c <LCD_JMP_Bottom_Left+0xae>
    3042:	14 c0       	rjmp	.+40     	; 0x306c <LCD_JMP_Bottom_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3044:	6f 81       	ldd	r22, Y+7	; 0x07
    3046:	78 85       	ldd	r23, Y+8	; 0x08
    3048:	89 85       	ldd	r24, Y+9	; 0x09
    304a:	9a 85       	ldd	r25, Y+10	; 0x0a
    304c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <LCD_JMP_Bottom_Left+0xf6>
    3068:	9a 83       	std	Y+2, r25	; 0x02
    306a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    306c:	2e 96       	adiw	r28, 0x0e	; 14
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <LCD_JMP_UP_Left>:


void LCD_JMP_UP_Left(void)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	2e 97       	sbiw	r28, 0x0e	; 14
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_JMP_TOP_LEFT);
    3092:	80 e8       	ldi	r24, 0x80	; 128
    3094:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_Write_CMD>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e4       	ldi	r27, 0x40	; 64
    30a0:	8b 87       	std	Y+11, r24	; 0x0b
    30a2:	9c 87       	std	Y+12, r25	; 0x0c
    30a4:	ad 87       	std	Y+13, r26	; 0x0d
    30a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	4a ef       	ldi	r20, 0xFA	; 250
    30b6:	54 e4       	ldi	r21, 0x44	; 68
    30b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	8f 83       	std	Y+7, r24	; 0x07
    30c2:	98 87       	std	Y+8, r25	; 0x08
    30c4:	a9 87       	std	Y+9, r26	; 0x09
    30c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e8       	ldi	r20, 0x80	; 128
    30d6:	5f e3       	ldi	r21, 0x3F	; 63
    30d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30dc:	88 23       	and	r24, r24
    30de:	2c f4       	brge	.+10     	; 0x30ea <LCD_JMP_UP_Left+0x6c>
		__ticks = 1;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	3f c0       	rjmp	.+126    	; 0x3168 <LCD_JMP_UP_Left+0xea>
	else if (__tmp > 65535)
    30ea:	6f 81       	ldd	r22, Y+7	; 0x07
    30ec:	78 85       	ldd	r23, Y+8	; 0x08
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	4f e7       	ldi	r20, 0x7F	; 127
    30f8:	57 e4       	ldi	r21, 0x47	; 71
    30fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30fe:	18 16       	cp	r1, r24
    3100:	4c f5       	brge	.+82     	; 0x3154 <LCD_JMP_UP_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	6b 85       	ldd	r22, Y+11	; 0x0b
    3104:	7c 85       	ldd	r23, Y+12	; 0x0c
    3106:	8d 85       	ldd	r24, Y+13	; 0x0d
    3108:	9e 85       	ldd	r25, Y+14	; 0x0e
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	0f c0       	rjmp	.+30     	; 0x314a <LCD_JMP_UP_Left+0xcc>
    312c:	88 ec       	ldi	r24, 0xC8	; 200
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	9c 81       	ldd	r25, Y+4	; 0x04
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <LCD_JMP_UP_Left+0xba>
    313c:	9c 83       	std	Y+4, r25	; 0x04
    313e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	00 97       	sbiw	r24, 0x00	; 0
    3150:	69 f7       	brne	.-38     	; 0x312c <LCD_JMP_UP_Left+0xae>
    3152:	14 c0       	rjmp	.+40     	; 0x317c <LCD_JMP_UP_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	01 97       	sbiw	r24, 0x01	; 1
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCD_JMP_UP_Left+0xf6>
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    317c:	2e 96       	adiw	r28, 0x0e	; 14
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <Keypad_Int>:
#include "keypad_config.h"



void Keypad_Int(void)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Set Row and Columns as Input
	 */

	DIO_u8Set_Pin_Dir(PORTC1,PINC1,INPUT);
    3196:	83 e0       	ldi	r24, 0x03	; 3
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC2,PINC2,INPUT);
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	61 e0       	ldi	r22, 0x01	; 1
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC3,PINC3,INPUT);
    31aa:	83 e0       	ldi	r24, 0x03	; 3
    31ac:	62 e0       	ldi	r22, 0x02	; 2
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC4,PINC4,INPUT);
    31b4:	83 e0       	ldi	r24, 0x03	; 3
    31b6:	63 e0       	ldi	r22, 0x03	; 3
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR1,PINR1,OUTPUT);
    31be:	83 e0       	ldi	r24, 0x03	; 3
    31c0:	64 e0       	ldi	r22, 0x04	; 4
    31c2:	41 e0       	ldi	r20, 0x01	; 1
    31c4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR2,PINR2,OUTPUT);
    31c8:	83 e0       	ldi	r24, 0x03	; 3
    31ca:	65 e0       	ldi	r22, 0x05	; 5
    31cc:	41 e0       	ldi	r20, 0x01	; 1
    31ce:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR3,PINR3,OUTPUT);
    31d2:	83 e0       	ldi	r24, 0x03	; 3
    31d4:	66 e0       	ldi	r22, 0x06	; 6
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR4,PINR4,OUTPUT);
    31dc:	83 e0       	ldi	r24, 0x03	; 3
    31de:	67 e0       	ldi	r22, 0x07	; 7
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>

	/*
	 * 	Set PULL UP
	 */

	DIO_u8Set_Pin_Val(PORTC1,PINC1,PUE);
    31e6:	83 e0       	ldi	r24, 0x03	; 3
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC2,PINC2,PUE);
    31f0:	83 e0       	ldi	r24, 0x03	; 3
    31f2:	61 e0       	ldi	r22, 0x01	; 1
    31f4:	41 e0       	ldi	r20, 0x01	; 1
    31f6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC3,PINC3,PUE);
    31fa:	83 e0       	ldi	r24, 0x03	; 3
    31fc:	62 e0       	ldi	r22, 0x02	; 2
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC4,PINC4,PUE);
    3204:	83 e0       	ldi	r24, 0x03	; 3
    3206:	63 e0       	ldi	r22, 0x03	; 3
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR1,PINR1,HIGH);
    320e:	83 e0       	ldi	r24, 0x03	; 3
    3210:	64 e0       	ldi	r22, 0x04	; 4
    3212:	41 e0       	ldi	r20, 0x01	; 1
    3214:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR2,PINR2,HIGH);
    3218:	83 e0       	ldi	r24, 0x03	; 3
    321a:	65 e0       	ldi	r22, 0x05	; 5
    321c:	41 e0       	ldi	r20, 0x01	; 1
    321e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR3,PINR3,HIGH);
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	66 e0       	ldi	r22, 0x06	; 6
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR4,PINR4,HIGH);
    322c:	83 e0       	ldi	r24, 0x03	; 3
    322e:	67 e0       	ldi	r22, 0x07	; 7
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>

}
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <Keypad_u8Selector>:



uint8 Keypad_u8Selector(void)
{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	a9 97       	sbiw	r28, 0x29	; 41
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
	uint8 port_col[4]={PORTC1,PORTC2,PORTC3,PORTC4};
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	8c 83       	std	Y+4, r24	; 0x04
    3254:	83 e0       	ldi	r24, 0x03	; 3
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	8e 83       	std	Y+6, r24	; 0x06
    325c:	83 e0       	ldi	r24, 0x03	; 3
    325e:	8f 83       	std	Y+7, r24	; 0x07
	uint8 port_row[4]={PORTR1,PORTR2,PORTR3,PORTR4};
    3260:	83 e0       	ldi	r24, 0x03	; 3
    3262:	88 87       	std	Y+8, r24	; 0x08
    3264:	83 e0       	ldi	r24, 0x03	; 3
    3266:	89 87       	std	Y+9, r24	; 0x09
    3268:	83 e0       	ldi	r24, 0x03	; 3
    326a:	8a 87       	std	Y+10, r24	; 0x0a
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 pin_col[4]={PINC1,PINC2,PINC3,PINC4};
    3270:	1c 86       	std	Y+12, r1	; 0x0c
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	8d 87       	std	Y+13, r24	; 0x0d
    3276:	82 e0       	ldi	r24, 0x02	; 2
    3278:	8e 87       	std	Y+14, r24	; 0x0e
    327a:	83 e0       	ldi	r24, 0x03	; 3
    327c:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 pin_row[4]={PINR1,PINR2,PINR3,PINR4};
    327e:	84 e0       	ldi	r24, 0x04	; 4
    3280:	88 8b       	std	Y+16, r24	; 0x10
    3282:	85 e0       	ldi	r24, 0x05	; 5
    3284:	89 8b       	std	Y+17, r24	; 0x11
    3286:	86 e0       	ldi	r24, 0x06	; 6
    3288:	8a 8b       	std	Y+18, r24	; 0x12
    328a:	87 e0       	ldi	r24, 0x07	; 7
    328c:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 Local_Col_Count,Local_Row_Count;
	uint8 Local_Button_Status;
	uint8 Local_Return_Status=KEY_NOT_PRESSED;
    328e:	8f ef       	ldi	r24, 0xFF	; 255
    3290:	89 83       	std	Y+1, r24	; 0x01
				13,	//ROW 3 Col 0
				14,	//ROW 3 Col 1
				15,	//ROW 3 Col 2
				16,	//ROW 3 Col 3
			}
	};
    3292:	ce 01       	movw	r24, r28
    3294:	45 96       	adiw	r24, 0x15	; 21
    3296:	9e a3       	std	Y+38, r25	; 0x26
    3298:	8d a3       	std	Y+37, r24	; 0x25
    329a:	e8 ea       	ldi	r30, 0xA8	; 168
    329c:	f1 e0       	ldi	r31, 0x01	; 1
    329e:	f8 a7       	std	Y+40, r31	; 0x28
    32a0:	ef a3       	std	Y+39, r30	; 0x27
    32a2:	f0 e1       	ldi	r31, 0x10	; 16
    32a4:	f9 a7       	std	Y+41, r31	; 0x29
    32a6:	ef a1       	ldd	r30, Y+39	; 0x27
    32a8:	f8 a5       	ldd	r31, Y+40	; 0x28
    32aa:	00 80       	ld	r0, Z
    32ac:	8f a1       	ldd	r24, Y+39	; 0x27
    32ae:	98 a5       	ldd	r25, Y+40	; 0x28
    32b0:	01 96       	adiw	r24, 0x01	; 1
    32b2:	98 a7       	std	Y+40, r25	; 0x28
    32b4:	8f a3       	std	Y+39, r24	; 0x27
    32b6:	ed a1       	ldd	r30, Y+37	; 0x25
    32b8:	fe a1       	ldd	r31, Y+38	; 0x26
    32ba:	00 82       	st	Z, r0
    32bc:	8d a1       	ldd	r24, Y+37	; 0x25
    32be:	9e a1       	ldd	r25, Y+38	; 0x26
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	9e a3       	std	Y+38, r25	; 0x26
    32c4:	8d a3       	std	Y+37, r24	; 0x25
    32c6:	99 a5       	ldd	r25, Y+41	; 0x29
    32c8:	91 50       	subi	r25, 0x01	; 1
    32ca:	99 a7       	std	Y+41, r25	; 0x29
    32cc:	e9 a5       	ldd	r30, Y+41	; 0x29
    32ce:	ee 23       	and	r30, r30
    32d0:	51 f7       	brne	.-44     	; 0x32a6 <Keypad_u8Selector+0x6a>


	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
    32d2:	1a 82       	std	Y+2, r1	; 0x02
    32d4:	89 c0       	rjmp	.+274    	; 0x33e8 <Keypad_u8Selector+0x1ac>
	{

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],LOW);
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	ce 01       	movw	r24, r28
    32de:	08 96       	adiw	r24, 0x08	; 8
    32e0:	fc 01       	movw	r30, r24
    32e2:	e2 0f       	add	r30, r18
    32e4:	f3 1f       	adc	r31, r19
    32e6:	40 81       	ld	r20, Z
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	28 2f       	mov	r18, r24
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	ce 01       	movw	r24, r28
    32f0:	40 96       	adiw	r24, 0x10	; 16
    32f2:	fc 01       	movw	r30, r24
    32f4:	e2 0f       	add	r30, r18
    32f6:	f3 1f       	adc	r31, r19
    32f8:	90 81       	ld	r25, Z
    32fa:	84 2f       	mov	r24, r20
    32fc:	69 2f       	mov	r22, r25
    32fe:	40 e0       	ldi	r20, 0x00	; 0
    3300:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
		for(Local_Col_Count=0;Local_Col_Count<KEYPAD_COLS;Local_Col_Count++)
    3304:	1b 82       	std	Y+3, r1	; 0x03
    3306:	52 c0       	rjmp	.+164    	; 0x33ac <Keypad_u8Selector+0x170>
		{

			DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	ce 01       	movw	r24, r28
    3310:	04 96       	adiw	r24, 0x04	; 4
    3312:	fc 01       	movw	r30, r24
    3314:	e2 0f       	add	r30, r18
    3316:	f3 1f       	adc	r31, r19
    3318:	40 81       	ld	r20, Z
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	ce 01       	movw	r24, r28
    3322:	0c 96       	adiw	r24, 0x0c	; 12
    3324:	fc 01       	movw	r30, r24
    3326:	e2 0f       	add	r30, r18
    3328:	f3 1f       	adc	r31, r19
    332a:	90 81       	ld	r25, Z
    332c:	9e 01       	movw	r18, r28
    332e:	2c 5e       	subi	r18, 0xEC	; 236
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	84 2f       	mov	r24, r20
    3334:	69 2f       	mov	r22, r25
    3336:	a9 01       	movw	r20, r18
    3338:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DIO_u8Get_Pin_Val>
			if(Local_Button_Status==0)
    333c:	8c 89       	ldd	r24, Y+20	; 0x14
    333e:	88 23       	and	r24, r24
    3340:	91 f5       	brne	.+100    	; 0x33a6 <Keypad_u8Selector+0x16a>
			{
				Local_Return_Status=KEYPAD_au8KeyVal[Local_Row_Count][Local_Col_Count];
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	48 2f       	mov	r20, r24
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	22 0f       	add	r18, r18
    3350:	33 1f       	adc	r19, r19
    3352:	22 0f       	add	r18, r18
    3354:	33 1f       	adc	r19, r19
    3356:	ce 01       	movw	r24, r28
    3358:	01 96       	adiw	r24, 0x01	; 1
    335a:	82 0f       	add	r24, r18
    335c:	93 1f       	adc	r25, r19
    335e:	84 0f       	add	r24, r20
    3360:	95 1f       	adc	r25, r21
    3362:	fc 01       	movw	r30, r24
    3364:	74 96       	adiw	r30, 0x14	; 20
    3366:	80 81       	ld	r24, Z
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	1a c0       	rjmp	.+52     	; 0x33a0 <Keypad_u8Selector+0x164>
#if KEYPAD_MODE==KEYPAD_POLLING
				while(Local_Button_Status==0)
				{
					DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	ce 01       	movw	r24, r28
    3374:	04 96       	adiw	r24, 0x04	; 4
    3376:	fc 01       	movw	r30, r24
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	40 81       	ld	r20, Z
    337e:	8b 81       	ldd	r24, Y+3	; 0x03
    3380:	28 2f       	mov	r18, r24
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	ce 01       	movw	r24, r28
    3386:	0c 96       	adiw	r24, 0x0c	; 12
    3388:	fc 01       	movw	r30, r24
    338a:	e2 0f       	add	r30, r18
    338c:	f3 1f       	adc	r31, r19
    338e:	90 81       	ld	r25, Z
    3390:	9e 01       	movw	r18, r28
    3392:	2c 5e       	subi	r18, 0xEC	; 236
    3394:	3f 4f       	sbci	r19, 0xFF	; 255
    3396:	84 2f       	mov	r24, r20
    3398:	69 2f       	mov	r22, r25
    339a:	a9 01       	movw	r20, r18
    339c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DIO_u8Get_Pin_Val>
			DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
			if(Local_Button_Status==0)
			{
				Local_Return_Status=KEYPAD_au8KeyVal[Local_Row_Count][Local_Col_Count];
#if KEYPAD_MODE==KEYPAD_POLLING
				while(Local_Button_Status==0)
    33a0:	8c 89       	ldd	r24, Y+20	; 0x14
    33a2:	88 23       	and	r24, r24
    33a4:	19 f3       	breq	.-58     	; 0x336c <Keypad_u8Selector+0x130>

	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
	{

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],LOW);
		for(Local_Col_Count=0;Local_Col_Count<KEYPAD_COLS;Local_Col_Count++)
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	8f 5f       	subi	r24, 0xFF	; 255
    33aa:	8b 83       	std	Y+3, r24	; 0x03
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	84 30       	cpi	r24, 0x04	; 4
    33b0:	08 f4       	brcc	.+2      	; 0x33b4 <Keypad_u8Selector+0x178>
    33b2:	aa cf       	rjmp	.-172    	; 0x3308 <Keypad_u8Selector+0xcc>

			}

		}

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],HIGH);
    33b4:	8a 81       	ldd	r24, Y+2	; 0x02
    33b6:	28 2f       	mov	r18, r24
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	ce 01       	movw	r24, r28
    33bc:	08 96       	adiw	r24, 0x08	; 8
    33be:	fc 01       	movw	r30, r24
    33c0:	e2 0f       	add	r30, r18
    33c2:	f3 1f       	adc	r31, r19
    33c4:	40 81       	ld	r20, Z
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	ce 01       	movw	r24, r28
    33ce:	40 96       	adiw	r24, 0x10	; 16
    33d0:	fc 01       	movw	r30, r24
    33d2:	e2 0f       	add	r30, r18
    33d4:	f3 1f       	adc	r31, r19
    33d6:	90 81       	ld	r25, Z
    33d8:	84 2f       	mov	r24, r20
    33da:	69 2f       	mov	r22, r25
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
				16,	//ROW 3 Col 3
			}
	};


	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	8f 5f       	subi	r24, 0xFF	; 255
    33e6:	8a 83       	std	Y+2, r24	; 0x02
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	84 30       	cpi	r24, 0x04	; 4
    33ec:	08 f4       	brcc	.+2      	; 0x33f0 <Keypad_u8Selector+0x1b4>
    33ee:	73 cf       	rjmp	.-282    	; 0x32d6 <Keypad_u8Selector+0x9a>

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],HIGH);
	}


	return	Local_Return_Status;
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33f2:	a9 96       	adiw	r28, 0x29	; 41
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <Button_String_u8Set_Dir>:
 */
#include "../../SERV/stdtypes.h"
#include "../../MCAL/DIO/dio_int.h"
#include "button_cfg.h"
void Button_String_u8Set_Dir(void)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(FULL_BUTTON_PORT,FULL_INPUT);
    340c:	83 e0       	ldi	r24, 0x03	; 3
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8Set_Port_Dir>
	DIO_u8Set_Port_Val(FULL_BUTTON_PORT,FULL_PUE);
    3414:	83 e0       	ldi	r24, 0x03	; 3
    3416:	6f ef       	ldi	r22, 0xFF	; 255
    3418:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_u8Set_Port_Val>
}
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <Button_Pin_u8Set_Dir>:
void Button_Pin_u8Set_Dir(void)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Pin_Dir(BUTTON_PORT,BUTTON_PIN,FULL_INPUT);
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	61 e0       	ldi	r22, 0x01	; 1
    342e:	40 e0       	ldi	r20, 0x00	; 0
    3430:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Val(BUTTON_PORT,BUTTON_PIN,PUE);
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	41 e0       	ldi	r20, 0x01	; 1
    343a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <DIO_u8Set_Pin_Val>
}
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <Button_Pin_u8Get_Val>:
//{
//
//	DIO_u8Get_Port_Val(u8PortIdCopy,*u8pValCopy);
//}
void Button_Pin_u8Get_Val(uint8 * u8pValCopy)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	00 d0       	rcall	.+0      	; 0x344a <Button_Pin_u8Get_Val+0x6>
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Get_Pin_Val(BUTTON_PORT,BUTTON_PIN,u8pValCopy);
    3452:	29 81       	ldd	r18, Y+1	; 0x01
    3454:	3a 81       	ldd	r19, Y+2	; 0x02
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	61 e0       	ldi	r22, 0x01	; 1
    345a:	a9 01       	movw	r20, r18
    345c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <DIO_u8Get_Pin_Val>
}
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <Seven_Seg_u8Set_Dir>:

const uint8 u8SevenSegArray[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};


void  Seven_Seg_u8Set_Dir(void)
{
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(SEVEN_SEGMENT_PORT,FULL_OUTPUT);
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	6f ef       	ldi	r22, 0xFF	; 255
    3476:	0e 94 a6 09 	call	0x134c	; 0x134c <DIO_u8Set_Port_Dir>
}
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <Seven_Seg_u8Set_Val>:
void Seven_Seg_u8Set_Val(uint8 u8ValCopy)
{
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	0f 92       	push	r0
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	89 83       	std	Y+1, r24	; 0x01
	if((u8ValCopy>=0)&&(u8ValCopy<=9))
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	8a 30       	cpi	r24, 0x0A	; 10
    3490:	58 f4       	brcc	.+22     	; 0x34a8 <Seven_Seg_u8Set_Val+0x28>
	{
		DIO_u8Set_Port_Val(SEVEN_SEGMENT_PORT,u8SevenSegArray[u8ValCopy]);
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	fc 01       	movw	r30, r24
    349a:	e8 54       	subi	r30, 0x48	; 72
    349c:	fe 4f       	sbci	r31, 0xFE	; 254
    349e:	90 81       	ld	r25, Z
    34a0:	82 e0       	ldi	r24, 0x02	; 2
    34a2:	69 2f       	mov	r22, r25
    34a4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_u8Set_Port_Val>
	}
	else
	{

	}
}
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <__prologue_saves__>:
    34b0:	2f 92       	push	r2
    34b2:	3f 92       	push	r3
    34b4:	4f 92       	push	r4
    34b6:	5f 92       	push	r5
    34b8:	6f 92       	push	r6
    34ba:	7f 92       	push	r7
    34bc:	8f 92       	push	r8
    34be:	9f 92       	push	r9
    34c0:	af 92       	push	r10
    34c2:	bf 92       	push	r11
    34c4:	cf 92       	push	r12
    34c6:	df 92       	push	r13
    34c8:	ef 92       	push	r14
    34ca:	ff 92       	push	r15
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	ca 1b       	sub	r28, r26
    34da:	db 0b       	sbc	r29, r27
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	09 94       	ijmp

000034e8 <__epilogue_restores__>:
    34e8:	2a 88       	ldd	r2, Y+18	; 0x12
    34ea:	39 88       	ldd	r3, Y+17	; 0x11
    34ec:	48 88       	ldd	r4, Y+16	; 0x10
    34ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34fa:	b9 84       	ldd	r11, Y+9	; 0x09
    34fc:	c8 84       	ldd	r12, Y+8	; 0x08
    34fe:	df 80       	ldd	r13, Y+7	; 0x07
    3500:	ee 80       	ldd	r14, Y+6	; 0x06
    3502:	fd 80       	ldd	r15, Y+5	; 0x05
    3504:	0c 81       	ldd	r16, Y+4	; 0x04
    3506:	1b 81       	ldd	r17, Y+3	; 0x03
    3508:	aa 81       	ldd	r26, Y+2	; 0x02
    350a:	b9 81       	ldd	r27, Y+1	; 0x01
    350c:	ce 0f       	add	r28, r30
    350e:	d1 1d       	adc	r29, r1
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	ed 01       	movw	r28, r26
    351c:	08 95       	ret

0000351e <itoa>:
    351e:	fb 01       	movw	r30, r22
    3520:	9f 01       	movw	r18, r30
    3522:	e8 94       	clt
    3524:	42 30       	cpi	r20, 0x02	; 2
    3526:	c4 f0       	brlt	.+48     	; 0x3558 <itoa+0x3a>
    3528:	45 32       	cpi	r20, 0x25	; 37
    352a:	b4 f4       	brge	.+44     	; 0x3558 <itoa+0x3a>
    352c:	4a 30       	cpi	r20, 0x0A	; 10
    352e:	29 f4       	brne	.+10     	; 0x353a <itoa+0x1c>
    3530:	97 fb       	bst	r25, 7
    3532:	1e f4       	brtc	.+6      	; 0x353a <itoa+0x1c>
    3534:	90 95       	com	r25
    3536:	81 95       	neg	r24
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	64 2f       	mov	r22, r20
    353c:	77 27       	eor	r23, r23
    353e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__udivmodhi4>
    3542:	80 5d       	subi	r24, 0xD0	; 208
    3544:	8a 33       	cpi	r24, 0x3A	; 58
    3546:	0c f0       	brlt	.+2      	; 0x354a <itoa+0x2c>
    3548:	89 5d       	subi	r24, 0xD9	; 217
    354a:	81 93       	st	Z+, r24
    354c:	cb 01       	movw	r24, r22
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	a1 f7       	brne	.-24     	; 0x353a <itoa+0x1c>
    3552:	16 f4       	brtc	.+4      	; 0x3558 <itoa+0x3a>
    3554:	5d e2       	ldi	r21, 0x2D	; 45
    3556:	51 93       	st	Z+, r21
    3558:	10 82       	st	Z, r1
    355a:	c9 01       	movw	r24, r18
    355c:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <strrev>

00003560 <strrev>:
    3560:	dc 01       	movw	r26, r24
    3562:	fc 01       	movw	r30, r24
    3564:	67 2f       	mov	r22, r23
    3566:	71 91       	ld	r23, Z+
    3568:	77 23       	and	r23, r23
    356a:	e1 f7       	brne	.-8      	; 0x3564 <strrev+0x4>
    356c:	32 97       	sbiw	r30, 0x02	; 2
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <strrev+0x18>
    3570:	7c 91       	ld	r23, X
    3572:	6d 93       	st	X+, r22
    3574:	70 83       	st	Z, r23
    3576:	62 91       	ld	r22, -Z
    3578:	ae 17       	cp	r26, r30
    357a:	bf 07       	cpc	r27, r31
    357c:	c8 f3       	brcs	.-14     	; 0x3570 <strrev+0x10>
    357e:	08 95       	ret

00003580 <__udivmodhi4>:
    3580:	aa 1b       	sub	r26, r26
    3582:	bb 1b       	sub	r27, r27
    3584:	51 e1       	ldi	r21, 0x11	; 17
    3586:	07 c0       	rjmp	.+14     	; 0x3596 <__udivmodhi4_ep>

00003588 <__udivmodhi4_loop>:
    3588:	aa 1f       	adc	r26, r26
    358a:	bb 1f       	adc	r27, r27
    358c:	a6 17       	cp	r26, r22
    358e:	b7 07       	cpc	r27, r23
    3590:	10 f0       	brcs	.+4      	; 0x3596 <__udivmodhi4_ep>
    3592:	a6 1b       	sub	r26, r22
    3594:	b7 0b       	sbc	r27, r23

00003596 <__udivmodhi4_ep>:
    3596:	88 1f       	adc	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	5a 95       	dec	r21
    359c:	a9 f7       	brne	.-22     	; 0x3588 <__udivmodhi4_loop>
    359e:	80 95       	com	r24
    35a0:	90 95       	com	r25
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	08 95       	ret

000035a8 <_exit>:
    35a8:	f8 94       	cli

000035aa <__stop_program>:
    35aa:	ff cf       	rjmp	.-2      	; 0x35aa <__stop_program>
