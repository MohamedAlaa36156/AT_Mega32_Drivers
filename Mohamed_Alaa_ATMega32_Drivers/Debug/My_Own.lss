
My_Own.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000334c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  0000334c  000033e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001ce  008001ce  0000354e  2**0
                  ALLOC
  3 .stab         000033cc  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ea  00000000  00000000  0000691c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00007f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00008159  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000a168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000c47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000c73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cfeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3d       	cpi	r26, 0xD8	; 216
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <main>
      8a:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ec 58       	subi	r30, 0x8C	; 140
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <Timer_0_Init>:
//#endif
//	TIMSK_REG|=1;
//}

void Timer_0_Init (void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     cde:	0e 94 c9 06 	call	0xd92	; 0xd92 <EXT_INT_Global_Enable>

	TCNT0_REG=TCNT0_INIT;
     ce2:	e2 e5       	ldi	r30, 0x52	; 82
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	10 82       	st	Z, r1

	SET_BIT(TCCR0_REG,WGM00);
	CLR_BIT(TCCR0_REG,WGM01);
#elif MODE_TIMER_0==FAST_PWM

	SET_BIT(TCCR0_REG,WGM00);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	88 60       	ori	r24, 0x08	; 8
     cf4:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01);
     cf6:	a3 e5       	ldi	r26, 0x53	; 83
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e3 e5       	ldi	r30, 0x53	; 83
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	80 64       	ori	r24, 0x40	; 64
     d02:	8c 93       	st	X, r24
#endif
	/*
	 * Enable Interrupt
	 */
	TIMSK_REG|=TIMER_0_CMP_MATCH_INT_ENABLE;
     d04:	a9 e5       	ldi	r26, 0x59	; 89
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e9 e5       	ldi	r30, 0x59	; 89
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 60       	ori	r24, 0x02	; 2
     d10:	8c 93       	st	X, r24
	/*
	 * Compare Mode
	 */
	TCCR0_REG|=COMPARE_MODE_TIMER_0;
     d12:	a3 e5       	ldi	r26, 0x53	; 83
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	80 63       	ori	r24, 0x30	; 48
     d1e:	8c 93       	st	X, r24
/**************************/
	/*
	 * Setting Prescaler
	 */

	TCCR0_REG|=PRESCALING_TIMER_0;
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	8c 93       	st	X, r24
/************************/



}
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <Timer_2_Init>:

void Timer_2_Init (void)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     d3c:	0e 94 c9 06 	call	0xd92	; 0xd92 <EXT_INT_Global_Enable>

	TCNT2_REG=TCNT2_INIT;
     d40:	e4 e4       	ldi	r30, 0x44	; 68
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
#if MODE_TIMER_2== NORMAL
	CLR_BIT(TCCR2_REG,WGM20);
	CLR_BIT(TCCR2_REG,WGM21);
#elif MODE_TIMER_2==PWM_PHASE_CORRECT

	SET_BIT(TCCR2_REG,WGM20);
     d46:	a5 e4       	ldi	r26, 0x45	; 69
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e4       	ldi	r30, 0x45	; 69
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	88 60       	ori	r24, 0x08	; 8
     d52:	8c 93       	st	X, r24
	CLR_BIT(TCCR2_REG,WGM21);
     d54:	a5 e4       	ldi	r26, 0x45	; 69
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e4       	ldi	r30, 0x45	; 69
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	8f 7b       	andi	r24, 0xBF	; 191
     d60:	8c 93       	st	X, r24
#endif

	/*
	 * Enable Interrupt
	 */
	TIMSK_REG|=TIMER_2_CMP_MATCH_INT_ENABLE;
     d62:	a9 e5       	ldi	r26, 0x59	; 89
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e9 e5       	ldi	r30, 0x59	; 89
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	8c 93       	st	X, r24
	/*
	 * Compare Mode
	 */
	TCCR2_REG|=COMPARE_MODE_TIMER_2;
     d70:	a5 e4       	ldi	r26, 0x45	; 69
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e5 e4       	ldi	r30, 0x45	; 69
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	80 61       	ori	r24, 0x10	; 16
     d7c:	8c 93       	st	X, r24
/**************************/
	/*
	 * Setting Prescaler
	 */

	TCCR2_REG|=PRESCALING_TIMER_2;
     d7e:	a5 e4       	ldi	r26, 0x45	; 69
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e5 e4       	ldi	r30, 0x45	; 69
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	85 60       	ori	r24, 0x05	; 5
     d8a:	8c 93       	st	X, r24
/************************/



}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <EXT_INT_Global_Enable>:
#include "int_reg.h"
#include "int_conf.h"


void EXT_INT_Global_Enable(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,GLOBAL_INT_BIT);
     d9a:	af e5       	ldi	r26, 0x5F	; 95
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ef e5       	ldi	r30, 0x5F	; 95
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	8c 93       	st	X, r24
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <EXT_INT_0_Enable>:

void EXT_INT_0_Enable(void)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(GICR_REG,INT_0_EABLE);
     db6:	ab e5       	ldi	r26, 0x5B	; 91
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e5       	ldi	r30, 0x5B	; 91
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 64       	ori	r24, 0x40	; 64
     dc2:	8c 93       	st	X, r24
#if INT_0_SENSE_CONTROL	==	LOW_LEVEL_INT_REQ
	CLR_BIT(MCUCR_REG,ISC00);
	CLR_BIT(MCUCR_REG,ISC01);

#elif	INT_0_SENSE_CONTROL	==	ANY_LOGICAL_LEVEL
	SET_BIT(MCUCR_REG,ISC00);
     dc4:	a5 e5       	ldi	r26, 0x55	; 85
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e5 e5       	ldi	r30, 0x55	; 85
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,ISC01);
     dd2:	a5 e5       	ldi	r26, 0x55	; 85
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e5 e5       	ldi	r30, 0x55	; 85
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8d 7f       	andi	r24, 0xFD	; 253
     dde:	8c 93       	st	X, r24
#elif	INT_0_SENSE_CONTROL	==	RISING_EDGE
	SET_BIT(MCUCR_REG,ISC00);
	SET_BIT(MCUCR_REG,ISC01);
#endif

}
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <EXT_INT_1_Enable>:

void EXT_INT_1_Enable(void)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_1_EABLE);
     dee:	ab e5       	ldi	r26, 0x5B	; 91
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	eb e5       	ldi	r30, 0x5B	; 91
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 68       	ori	r24, 0x80	; 128
     dfa:	8c 93       	st	X, r24
#if INT_1_SENSE_CONTROL	==	LOW_LEVEL_INT_REQ
	CLR_BIT(MCUCR_REG,ISC10);
	CLR_BIT(MCUCR_REG,ISC11);

#elif	INT_1_SENSE_CONTROL	==	ANY_LOGICAL_LEVEL
	SET_BIT(MCUCR_REG,ISC10);
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,ISC11);
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	8c 93       	st	X, r24
#elif	INT_1_SENSE_CONTROL	==	RISING_EDGE
	SET_BIT(MCUCR_REG,ISC10);
	SET_BIT(MCUCR_REG,ISC11);
#endif

}
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <EXT_INT_2_Enable>:

void EXT_INT_2_Enable(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_2_EABLE);
     e26:	ab e5       	ldi	r26, 0x5B	; 91
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	eb e5       	ldi	r30, 0x5B	; 91
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 62       	ori	r24, 0x20	; 32
     e32:	8c 93       	st	X, r24


#endif


}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <DIO_u8Set_Port_Dir>:
#include "dio_reg.h"
#include "dio_int.h"


uint8 DIO_u8Set_Port_Dir(uint8 u8PortIdCopy , uint8 u8DirCopy)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_u8Set_Port_Dir+0x6>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_u8Set_Port_Dir+0x8>
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
     e4c:	19 82       	std	Y+1, r1	; 0x01

		switch(u8PortIdCopy)
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3d 83       	std	Y+5, r19	; 0x05
     e56:	2c 83       	std	Y+4, r18	; 0x04
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	d1 f0       	breq	.+52     	; 0xe96 <DIO_u8Set_Port_Dir+0x5c>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <DIO_u8Set_Port_Dir+0x3c>
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	9d 81       	ldd	r25, Y+5	; 0x05
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	61 f0       	breq	.+24     	; 0xe8c <DIO_u8Set_Port_Dir+0x52>
     e74:	1f c0       	rjmp	.+62     	; 0xeb4 <DIO_u8Set_Port_Dir+0x7a>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	81 f0       	breq	.+32     	; 0xea0 <DIO_u8Set_Port_Dir+0x66>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	91 05       	cpc	r25, r1
     e88:	81 f0       	breq	.+32     	; 0xeaa <DIO_u8Set_Port_Dir+0x70>
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <DIO_u8Set_Port_Dir+0x7a>
		{
			case PORT_A :	DDRA_REG = u8DirCopy;
     e8c:	ea e3       	ldi	r30, 0x3A	; 58
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	80 83       	st	Z, r24
     e94:	11 c0       	rjmp	.+34     	; 0xeb8 <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_B :	DDRB_REG = u8DirCopy;
     e96:	e7 e3       	ldi	r30, 0x37	; 55
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	80 83       	st	Z, r24
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_C :	DDRC_REG = u8DirCopy;
     ea0:	e4 e3       	ldi	r30, 0x34	; 52
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	80 83       	st	Z, r24
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_D :	DDRD_REG = u8DirCopy;
     eaa:	e1 e3       	ldi	r30, 0x31	; 49
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	80 83       	st	Z, r24
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_u8Set_Port_Dir+0x7e>
										break;
			default		:	Error_Status = E_NOK ;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	89 83       	std	Y+1, r24	; 0x01

		}



	return Error_Status;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <DIO_u8Set_Port_Val>:
uint8 DIO_u8Set_Port_Val(uint8 u8PortIdCopy , uint8 u8ValCopy)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_u8Set_Port_Val+0x6>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <DIO_u8Set_Port_Val+0x8>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
     eda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
     edc:	19 82       	std	Y+1, r1	; 0x01


			switch(u8PortIdCopy)
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3d 83       	std	Y+5, r19	; 0x05
     ee6:	2c 83       	std	Y+4, r18	; 0x04
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	d1 f0       	breq	.+52     	; 0xf26 <DIO_u8Set_Port_Val+0x5c>
     ef2:	2c 81       	ldd	r18, Y+4	; 0x04
     ef4:	3d 81       	ldd	r19, Y+5	; 0x05
     ef6:	22 30       	cpi	r18, 0x02	; 2
     ef8:	31 05       	cpc	r19, r1
     efa:	2c f4       	brge	.+10     	; 0xf06 <DIO_u8Set_Port_Val+0x3c>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	61 f0       	breq	.+24     	; 0xf1c <DIO_u8Set_Port_Val+0x52>
     f04:	1f c0       	rjmp	.+62     	; 0xf44 <DIO_u8Set_Port_Val+0x7a>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	31 05       	cpc	r19, r1
     f0e:	81 f0       	breq	.+32     	; 0xf30 <DIO_u8Set_Port_Val+0x66>
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	91 05       	cpc	r25, r1
     f18:	81 f0       	breq	.+32     	; 0xf3a <DIO_u8Set_Port_Val+0x70>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <DIO_u8Set_Port_Val+0x7a>
			{
				case PORT_A :	PORTA_REG = u8ValCopy;
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	80 83       	st	Z, r24
     f24:	11 c0       	rjmp	.+34     	; 0xf48 <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_B :	PORTB_REG =	u8ValCopy;
     f26:	e8 e3       	ldi	r30, 0x38	; 56
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
     f2e:	0c c0       	rjmp	.+24     	; 0xf48 <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_C :	PORTC_REG = u8ValCopy;
     f30:	e5 e3       	ldi	r30, 0x35	; 53
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	80 83       	st	Z, r24
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_D :	PORTD_REG = u8ValCopy;
     f3a:	e2 e3       	ldi	r30, 0x32	; 50
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	80 83       	st	Z, r24
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_u8Set_Port_Val+0x7e>
											break;
				default		:	Error_Status=E_NOK;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01

			}



	return Error_Status;
     f48:	89 81       	ldd	r24, Y+1	; 0x01

}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <DIO_u8Get_Port_Val>:
uint8 DIO_u8Get_Port_Val(uint8 u8PortIdCopy , uint8 * u8pValCopy)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <DIO_u8Get_Port_Val+0x6>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <DIO_u8Get_Port_Val+0x8>
     f62:	00 d0       	rcall	.+0      	; 0xf64 <DIO_u8Get_Port_Val+0xa>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8a 83       	std	Y+2, r24	; 0x02
     f6a:	7c 83       	std	Y+4, r23	; 0x04
     f6c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
     f6e:	19 82       	std	Y+1, r1	; 0x01


				switch(u8PortIdCopy)
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3e 83       	std	Y+6, r19	; 0x06
     f78:	2d 83       	std	Y+5, r18	; 0x05
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	e1 f0       	breq	.+56     	; 0xfbc <DIO_u8Get_Port_Val+0x62>
     f84:	2d 81       	ldd	r18, Y+5	; 0x05
     f86:	3e 81       	ldd	r19, Y+6	; 0x06
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <DIO_u8Get_Port_Val+0x3e>
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	9e 81       	ldd	r25, Y+6	; 0x06
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	61 f0       	breq	.+24     	; 0xfae <DIO_u8Get_Port_Val+0x54>
     f96:	27 c0       	rjmp	.+78     	; 0xfe6 <DIO_u8Get_Port_Val+0x8c>
     f98:	2d 81       	ldd	r18, Y+5	; 0x05
     f9a:	3e 81       	ldd	r19, Y+6	; 0x06
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	a1 f0       	breq	.+40     	; 0xfca <DIO_u8Get_Port_Val+0x70>
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	91 05       	cpc	r25, r1
     faa:	b1 f0       	breq	.+44     	; 0xfd8 <DIO_u8Get_Port_Val+0x7e>
     fac:	1c c0       	rjmp	.+56     	; 0xfe6 <DIO_u8Get_Port_Val+0x8c>
				{
					case PORT_A :	*u8pValCopy = PINA_REG;
     fae:	e9 e3       	ldi	r30, 0x39	; 57
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	eb 81       	ldd	r30, Y+3	; 0x03
     fb6:	fc 81       	ldd	r31, Y+4	; 0x04
     fb8:	80 83       	st	Z, r24
     fba:	17 c0       	rjmp	.+46     	; 0xfea <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_B :	*u8pValCopy = PINB_REG;
     fbc:	e6 e3       	ldi	r30, 0x36	; 54
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	eb 81       	ldd	r30, Y+3	; 0x03
     fc4:	fc 81       	ldd	r31, Y+4	; 0x04
     fc6:	80 83       	st	Z, r24
     fc8:	10 c0       	rjmp	.+32     	; 0xfea <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_C :	*u8pValCopy = PINC_REG;
     fca:	e3 e3       	ldi	r30, 0x33	; 51
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	eb 81       	ldd	r30, Y+3	; 0x03
     fd2:	fc 81       	ldd	r31, Y+4	; 0x04
     fd4:	80 83       	st	Z, r24
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_D :	*u8pValCopy = PIND_REG;
     fd8:	e0 e3       	ldi	r30, 0x30	; 48
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	eb 81       	ldd	r30, Y+3	; 0x03
     fe0:	fc 81       	ldd	r31, Y+4	; 0x04
     fe2:	80 83       	st	Z, r24
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_u8Get_Port_Val+0x90>
												break;
					default		:	Error_Status=E_NOK;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
												break;

				}
	return Error_Status;
     fea:	89 81       	ldd	r24, Y+1	; 0x01

}
     fec:	26 96       	adiw	r28, 0x06	; 6
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <DIO_u8TOG_PORT_Val>:
uint8 DIO_u8TOG_PORT_Val (uint8  u8PortIdCopy 	)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <DIO_u8TOG_PORT_Val+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <DIO_u8TOG_PORT_Val+0x8>
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_Status=E_OK;
    100c:	19 82       	std	Y+1, r1	; 0x01

		switch(u8PortIdCopy)
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3c 83       	std	Y+4, r19	; 0x04
    1016:	2b 83       	std	Y+3, r18	; 0x03
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	e9 f0       	breq	.+58     	; 0x105c <DIO_u8TOG_PORT_Val+0x5e>
    1022:	2b 81       	ldd	r18, Y+3	; 0x03
    1024:	3c 81       	ldd	r19, Y+4	; 0x04
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	2c f4       	brge	.+10     	; 0x1036 <DIO_u8TOG_PORT_Val+0x38>
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	61 f0       	breq	.+24     	; 0x104c <DIO_u8TOG_PORT_Val+0x4e>
    1034:	2b c0       	rjmp	.+86     	; 0x108c <DIO_u8TOG_PORT_Val+0x8e>
    1036:	2b 81       	ldd	r18, Y+3	; 0x03
    1038:	3c 81       	ldd	r19, Y+4	; 0x04
    103a:	22 30       	cpi	r18, 0x02	; 2
    103c:	31 05       	cpc	r19, r1
    103e:	b1 f0       	breq	.+44     	; 0x106c <DIO_u8TOG_PORT_Val+0x6e>
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	c9 f0       	breq	.+50     	; 0x107c <DIO_u8TOG_PORT_Val+0x7e>
    104a:	20 c0       	rjmp	.+64     	; 0x108c <DIO_u8TOG_PORT_Val+0x8e>
			{
				case PORT_A :	PORTA_REG = ~PORTA_REG;
    104c:	ab e3       	ldi	r26, 0x3B	; 59
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	eb e3       	ldi	r30, 0x3B	; 59
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 95       	com	r24
    1058:	8c 93       	st	X, r24
    105a:	1a c0       	rjmp	.+52     	; 0x1090 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_B :	PORTB_REG = ~PORTB_REG;
    105c:	a8 e3       	ldi	r26, 0x38	; 56
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e8 e3       	ldi	r30, 0x38	; 56
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	80 95       	com	r24
    1068:	8c 93       	st	X, r24
    106a:	12 c0       	rjmp	.+36     	; 0x1090 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_C :	PORTC_REG = ~PORTC_REG;
    106c:	a5 e3       	ldi	r26, 0x35	; 53
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e3       	ldi	r30, 0x35	; 53
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 95       	com	r24
    1078:	8c 93       	st	X, r24
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_D :	PORTD_REG = ~PORTD_REG;
    107c:	a2 e3       	ldi	r26, 0x32	; 50
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e2 e3       	ldi	r30, 0x32	; 50
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 95       	com	r24
    1088:	8c 93       	st	X, r24
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_u8TOG_PORT_Val+0x92>
													break;
				default		:	Error_Status=E_NOK;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01





	return Error_Status;
    1090:	89 81       	ldd	r24, Y+1	; 0x01

}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_u8Set_Pin_Dir>:

uint8 DIO_u8Set_Pin_Dir(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 u8DirCopy)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	28 97       	sbiw	r28, 0x08	; 8
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	6b 83       	std	Y+3, r22	; 0x03
    10b8:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    10ba:	19 82       	std	Y+1, r1	; 0x01

	if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 30       	cpi	r24, 0x08	; 8
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <DIO_u8Set_Pin_Dir+0x24>
    10c2:	f4 c0       	rjmp	.+488    	; 0x12ac <DIO_u8Set_Pin_Dir+0x20c>
	{
		if(u8DirCopy==INPUT)
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	88 23       	and	r24, r24
    10c8:	09 f0       	breq	.+2      	; 0x10cc <DIO_u8Set_Pin_Dir+0x2c>
    10ca:	77 c0       	rjmp	.+238    	; 0x11ba <DIO_u8Set_Pin_Dir+0x11a>
		{
			switch(u8PortIdCopy)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	38 87       	std	Y+8, r19	; 0x08
    10d4:	2f 83       	std	Y+7, r18	; 0x07
    10d6:	8f 81       	ldd	r24, Y+7	; 0x07
    10d8:	98 85       	ldd	r25, Y+8	; 0x08
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	59 f1       	breq	.+86     	; 0x1136 <DIO_u8Set_Pin_Dir+0x96>
    10e0:	2f 81       	ldd	r18, Y+7	; 0x07
    10e2:	38 85       	ldd	r19, Y+8	; 0x08
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <DIO_u8Set_Pin_Dir+0x54>
    10ea:	8f 81       	ldd	r24, Y+7	; 0x07
    10ec:	98 85       	ldd	r25, Y+8	; 0x08
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	69 f0       	breq	.+26     	; 0x110c <DIO_u8Set_Pin_Dir+0x6c>
    10f2:	60 c0       	rjmp	.+192    	; 0x11b4 <DIO_u8Set_Pin_Dir+0x114>
    10f4:	2f 81       	ldd	r18, Y+7	; 0x07
    10f6:	38 85       	ldd	r19, Y+8	; 0x08
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	31 05       	cpc	r19, r1
    10fc:	89 f1       	breq	.+98     	; 0x1160 <DIO_u8Set_Pin_Dir+0xc0>
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	98 85       	ldd	r25, Y+8	; 0x08
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <DIO_u8Set_Pin_Dir+0x6a>
    1108:	40 c0       	rjmp	.+128    	; 0x118a <DIO_u8Set_Pin_Dir+0xea>
    110a:	54 c0       	rjmp	.+168    	; 0x11b4 <DIO_u8Set_Pin_Dir+0x114>
				{
					case PORT_A :	CLR_BIT(DDRA_REG,u8Pin_IdCopy);
    110c:	aa e3       	ldi	r26, 0x3A	; 58
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8Set_Pin_Dir+0x8a>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8Set_Pin_Dir+0x86>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	bd c0       	rjmp	.+378    	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_B :	CLR_BIT(DDRB_REG,u8Pin_IdCopy);
    1136:	a7 e3       	ldi	r26, 0x37	; 55
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e7 e3       	ldi	r30, 0x37	; 55
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8Set_Pin_Dir+0xb4>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8Set_Pin_Dir+0xb0>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	a8 c0       	rjmp	.+336    	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_C :	CLR_BIT(DDRC_REG,u8Pin_IdCopy);
    1160:	a4 e3       	ldi	r26, 0x34	; 52
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8Set_Pin_Dir+0xde>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8Set_Pin_Dir+0xda>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	93 c0       	rjmp	.+294    	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_D :	CLR_BIT(DDRD_REG,u8Pin_IdCopy);
    118a:	a1 e3       	ldi	r26, 0x31	; 49
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e1 e3       	ldi	r30, 0x31	; 49
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_u8Set_Pin_Dir+0x108>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_u8Set_Pin_Dir+0x104>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	7e c0       	rjmp	.+252    	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					default		:	Error_Status=E_NOK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	7b c0       	rjmp	.+246    	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;

				}
		}
		else if(u8DirCopy==OUTPUT)
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <DIO_u8Set_Pin_Dir+0x122>
    11c0:	72 c0       	rjmp	.+228    	; 0x12a6 <DIO_u8Set_Pin_Dir+0x206>
		{
			switch(u8PortIdCopy)
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3e 83       	std	Y+6, r19	; 0x06
    11ca:	2d 83       	std	Y+5, r18	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	49 f1       	breq	.+82     	; 0x1228 <DIO_u8Set_Pin_Dir+0x188>
    11d6:	2d 81       	ldd	r18, Y+5	; 0x05
    11d8:	3e 81       	ldd	r19, Y+6	; 0x06
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_u8Set_Pin_Dir+0x14a>
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	9e 81       	ldd	r25, Y+6	; 0x06
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	61 f0       	breq	.+24     	; 0x1200 <DIO_u8Set_Pin_Dir+0x160>
    11e8:	5b c0       	rjmp	.+182    	; 0x12a0 <DIO_u8Set_Pin_Dir+0x200>
    11ea:	2d 81       	ldd	r18, Y+5	; 0x05
    11ec:	3e 81       	ldd	r19, Y+6	; 0x06
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	71 f1       	breq	.+92     	; 0x1250 <DIO_u8Set_Pin_Dir+0x1b0>
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	9e 81       	ldd	r25, Y+6	; 0x06
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	e9 f1       	breq	.+122    	; 0x1278 <DIO_u8Set_Pin_Dir+0x1d8>
    11fe:	50 c0       	rjmp	.+160    	; 0x12a0 <DIO_u8Set_Pin_Dir+0x200>
				{
					case PORT_A :	SET_BIT(DDRA_REG,u8Pin_IdCopy);
    1200:	aa e3       	ldi	r26, 0x3A	; 58
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_u8Set_Pin_Dir+0x17e>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_u8Set_Pin_Dir+0x17a>
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	44 c0       	rjmp	.+136    	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_B :	SET_BIT(DDRB_REG,u8Pin_IdCopy);
    1228:	a7 e3       	ldi	r26, 0x37	; 55
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e7 e3       	ldi	r30, 0x37	; 55
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_u8Set_Pin_Dir+0x1a6>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_u8Set_Pin_Dir+0x1a2>
    124a:	84 2b       	or	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	30 c0       	rjmp	.+96     	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_C :	SET_BIT(DDRC_REG,u8Pin_IdCopy);
    1250:	a4 e3       	ldi	r26, 0x34	; 52
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e4 e3       	ldi	r30, 0x34	; 52
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8Set_Pin_Dir+0x1ce>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8Set_Pin_Dir+0x1ca>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	1c c0       	rjmp	.+56     	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_D :	SET_BIT(DDRD_REG,u8Pin_IdCopy);
    1278:	a1 e3       	ldi	r26, 0x31	; 49
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_u8Set_Pin_Dir+0x1f6>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_u8Set_Pin_Dir+0x1f2>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
													break;
					default		:	Error_Status=E_NOK;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
					}
				}

		else
		{
			Error_Status=E_NOK;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_u8Set_Pin_Dir+0x210>
		}
	}
	else
	{
		Error_Status=E_NOK;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_Status;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01


}
    12b2:	28 96       	adiw	r28, 0x08	; 8
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <DIO_u8Set_Pin_Val>:
uint8 DIO_u8Set_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 u8ValCopy)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	28 97       	sbiw	r28, 0x08	; 8
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	6b 83       	std	Y+3, r22	; 0x03
    12dc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    12de:	19 82       	std	Y+1, r1	; 0x01

	if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <DIO_u8Set_Pin_Val+0x24>
    12e6:	f4 c0       	rjmp	.+488    	; 0x14d0 <DIO_u8Set_Pin_Val+0x20c>
	{
		if(u8ValCopy==LOW)
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	88 23       	and	r24, r24
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <DIO_u8Set_Pin_Val+0x2c>
    12ee:	77 c0       	rjmp	.+238    	; 0x13de <DIO_u8Set_Pin_Val+0x11a>
		{
			switch(u8PortIdCopy)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	38 87       	std	Y+8, r19	; 0x08
    12f8:	2f 83       	std	Y+7, r18	; 0x07
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	98 85       	ldd	r25, Y+8	; 0x08
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	59 f1       	breq	.+86     	; 0x135a <DIO_u8Set_Pin_Val+0x96>
    1304:	2f 81       	ldd	r18, Y+7	; 0x07
    1306:	38 85       	ldd	r19, Y+8	; 0x08
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <DIO_u8Set_Pin_Val+0x54>
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	98 85       	ldd	r25, Y+8	; 0x08
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f0       	breq	.+26     	; 0x1330 <DIO_u8Set_Pin_Val+0x6c>
    1316:	60 c0       	rjmp	.+192    	; 0x13d8 <DIO_u8Set_Pin_Val+0x114>
    1318:	2f 81       	ldd	r18, Y+7	; 0x07
    131a:	38 85       	ldd	r19, Y+8	; 0x08
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	89 f1       	breq	.+98     	; 0x1384 <DIO_u8Set_Pin_Val+0xc0>
    1322:	8f 81       	ldd	r24, Y+7	; 0x07
    1324:	98 85       	ldd	r25, Y+8	; 0x08
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	09 f4       	brne	.+2      	; 0x132e <DIO_u8Set_Pin_Val+0x6a>
    132c:	40 c0       	rjmp	.+128    	; 0x13ae <DIO_u8Set_Pin_Val+0xea>
    132e:	54 c0       	rjmp	.+168    	; 0x13d8 <DIO_u8Set_Pin_Val+0x114>
				{
					case PORT_A :	CLR_BIT(PORTA_REG,u8Pin_IdCopy);
    1330:	ab e3       	ldi	r26, 0x3B	; 59
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_u8Set_Pin_Val+0x8a>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_u8Set_Pin_Val+0x86>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	bd c0       	rjmp	.+378    	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_B :	CLR_BIT(PORTB_REG,u8Pin_IdCopy);
    135a:	a8 e3       	ldi	r26, 0x38	; 56
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e8 e3       	ldi	r30, 0x38	; 56
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_u8Set_Pin_Val+0xb4>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_u8Set_Pin_Val+0xb0>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	a8 c0       	rjmp	.+336    	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_C :	CLR_BIT(PORTC_REG,u8Pin_IdCopy);
    1384:	a5 e3       	ldi	r26, 0x35	; 53
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e3       	ldi	r30, 0x35	; 53
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_u8Set_Pin_Val+0xde>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_u8Set_Pin_Val+0xda>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	93 c0       	rjmp	.+294    	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_D :	CLR_BIT(PORTD_REG,u8Pin_IdCopy);
    13ae:	a2 e3       	ldi	r26, 0x32	; 50
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e2 e3       	ldi	r30, 0x32	; 50
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8Set_Pin_Val+0x108>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8Set_Pin_Val+0x104>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	7e c0       	rjmp	.+252    	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					default		:	Error_Status=E_NOK;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	7b c0       	rjmp	.+246    	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;

				}
		}
		else if(u8ValCopy==HIGH)
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <DIO_u8Set_Pin_Val+0x122>
    13e4:	72 c0       	rjmp	.+228    	; 0x14ca <DIO_u8Set_Pin_Val+0x206>
		{
			switch(u8PortIdCopy)
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3e 83       	std	Y+6, r19	; 0x06
    13ee:	2d 83       	std	Y+5, r18	; 0x05
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	49 f1       	breq	.+82     	; 0x144c <DIO_u8Set_Pin_Val+0x188>
    13fa:	2d 81       	ldd	r18, Y+5	; 0x05
    13fc:	3e 81       	ldd	r19, Y+6	; 0x06
    13fe:	22 30       	cpi	r18, 0x02	; 2
    1400:	31 05       	cpc	r19, r1
    1402:	2c f4       	brge	.+10     	; 0x140e <DIO_u8Set_Pin_Val+0x14a>
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	61 f0       	breq	.+24     	; 0x1424 <DIO_u8Set_Pin_Val+0x160>
    140c:	5b c0       	rjmp	.+182    	; 0x14c4 <DIO_u8Set_Pin_Val+0x200>
    140e:	2d 81       	ldd	r18, Y+5	; 0x05
    1410:	3e 81       	ldd	r19, Y+6	; 0x06
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	71 f1       	breq	.+92     	; 0x1474 <DIO_u8Set_Pin_Val+0x1b0>
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	e9 f1       	breq	.+122    	; 0x149c <DIO_u8Set_Pin_Val+0x1d8>
    1422:	50 c0       	rjmp	.+160    	; 0x14c4 <DIO_u8Set_Pin_Val+0x200>
				{
					case PORT_A :	SET_BIT(PORTA_REG,u8Pin_IdCopy);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_u8Set_Pin_Val+0x17e>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_u8Set_Pin_Val+0x17a>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	44 c0       	rjmp	.+136    	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_B :	SET_BIT(PORTB_REG,u8Pin_IdCopy);
    144c:	a8 e3       	ldi	r26, 0x38	; 56
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e8 e3       	ldi	r30, 0x38	; 56
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_u8Set_Pin_Val+0x1a6>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_u8Set_Pin_Val+0x1a2>
    146e:	84 2b       	or	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	30 c0       	rjmp	.+96     	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_C :	SET_BIT(PORTC_REG,u8Pin_IdCopy);
    1474:	a5 e3       	ldi	r26, 0x35	; 53
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e3       	ldi	r30, 0x35	; 53
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_u8Set_Pin_Val+0x1ce>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_u8Set_Pin_Val+0x1ca>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	1c c0       	rjmp	.+56     	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_D :	SET_BIT(PORTD_REG,u8Pin_IdCopy);
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_u8Set_Pin_Val+0x1f6>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_u8Set_Pin_Val+0x1f2>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
													break;
					default		:	Error_Status=E_NOK;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
				}
		}

		else
		{
			Error_Status=E_NOK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_u8Set_Pin_Val+0x210>
		}
	}
	else
	{
		Error_Status=E_NOK;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_Status;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	28 96       	adiw	r28, 0x08	; 8
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <DIO_u8Get_Pin_Val>:
uint8 DIO_u8Get_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 * u8pValCopy)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	27 97       	sbiw	r28, 0x07	; 7
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	6b 83       	std	Y+3, r22	; 0x03
    1500:	5d 83       	std	Y+5, r21	; 0x05
    1502:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    1504:	19 82       	std	Y+1, r1	; 0x01

		if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	08 f0       	brcs	.+2      	; 0x150e <DIO_u8Get_Pin_Val+0x26>
    150c:	74 c0       	rjmp	.+232    	; 0x15f6 <DIO_u8Get_Pin_Val+0x10e>
		{

			switch(u8PortIdCopy)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3f 83       	std	Y+7, r19	; 0x07
    1516:	2e 83       	std	Y+6, r18	; 0x06
    1518:	4e 81       	ldd	r20, Y+6	; 0x06
    151a:	5f 81       	ldd	r21, Y+7	; 0x07
    151c:	41 30       	cpi	r20, 0x01	; 1
    151e:	51 05       	cpc	r21, r1
    1520:	59 f1       	breq	.+86     	; 0x1578 <DIO_u8Get_Pin_Val+0x90>
    1522:	8e 81       	ldd	r24, Y+6	; 0x06
    1524:	9f 81       	ldd	r25, Y+7	; 0x07
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	91 05       	cpc	r25, r1
    152a:	34 f4       	brge	.+12     	; 0x1538 <DIO_u8Get_Pin_Val+0x50>
    152c:	2e 81       	ldd	r18, Y+6	; 0x06
    152e:	3f 81       	ldd	r19, Y+7	; 0x07
    1530:	21 15       	cp	r18, r1
    1532:	31 05       	cpc	r19, r1
    1534:	69 f0       	breq	.+26     	; 0x1550 <DIO_u8Get_Pin_Val+0x68>
    1536:	5c c0       	rjmp	.+184    	; 0x15f0 <DIO_u8Get_Pin_Val+0x108>
    1538:	4e 81       	ldd	r20, Y+6	; 0x06
    153a:	5f 81       	ldd	r21, Y+7	; 0x07
    153c:	42 30       	cpi	r20, 0x02	; 2
    153e:	51 05       	cpc	r21, r1
    1540:	79 f1       	breq	.+94     	; 0x15a0 <DIO_u8Get_Pin_Val+0xb8>
    1542:	8e 81       	ldd	r24, Y+6	; 0x06
    1544:	9f 81       	ldd	r25, Y+7	; 0x07
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <DIO_u8Get_Pin_Val+0x66>
    154c:	3d c0       	rjmp	.+122    	; 0x15c8 <DIO_u8Get_Pin_Val+0xe0>
    154e:	50 c0       	rjmp	.+160    	; 0x15f0 <DIO_u8Get_Pin_Val+0x108>
				{
					case PORT_A : *u8pValCopy=GET_BIT(PINA_REG,u8Pin_IdCopy);
    1550:	e9 e3       	ldi	r30, 0x39	; 57
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a9 01       	movw	r20, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_u8Get_Pin_Val+0x80>
    1564:	55 95       	asr	r21
    1566:	47 95       	ror	r20
    1568:	8a 95       	dec	r24
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_u8Get_Pin_Val+0x7c>
    156c:	ca 01       	movw	r24, r20
    156e:	81 70       	andi	r24, 0x01	; 1
    1570:	ec 81       	ldd	r30, Y+4	; 0x04
    1572:	fd 81       	ldd	r31, Y+5	; 0x05
    1574:	80 83       	st	Z, r24
    1576:	41 c0       	rjmp	.+130    	; 0x15fa <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_B : *u8pValCopy=GET_BIT(PINB_REG,u8Pin_IdCopy);
    1578:	e6 e3       	ldi	r30, 0x36	; 54
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_u8Get_Pin_Val+0xa8>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_u8Get_Pin_Val+0xa4>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	ec 81       	ldd	r30, Y+4	; 0x04
    159a:	fd 81       	ldd	r31, Y+5	; 0x05
    159c:	80 83       	st	Z, r24
    159e:	2d c0       	rjmp	.+90     	; 0x15fa <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_C : *u8pValCopy=GET_BIT(PINC_REG,u8Pin_IdCopy);
    15a0:	e3 e3       	ldi	r30, 0x33	; 51
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a9 01       	movw	r20, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_u8Get_Pin_Val+0xd0>
    15b4:	55 95       	asr	r21
    15b6:	47 95       	ror	r20
    15b8:	8a 95       	dec	r24
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_u8Get_Pin_Val+0xcc>
    15bc:	ca 01       	movw	r24, r20
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	ec 81       	ldd	r30, Y+4	; 0x04
    15c2:	fd 81       	ldd	r31, Y+5	; 0x05
    15c4:	80 83       	st	Z, r24
    15c6:	19 c0       	rjmp	.+50     	; 0x15fa <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_D : *u8pValCopy=GET_BIT(PIND_REG,u8Pin_IdCopy);
    15c8:	e0 e3       	ldi	r30, 0x30	; 48
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_u8Get_Pin_Val+0xf8>
    15dc:	55 95       	asr	r21
    15de:	47 95       	ror	r20
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_u8Get_Pin_Val+0xf4>
    15e4:	ca 01       	movw	r24, r20
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	ec 81       	ldd	r30, Y+4	; 0x04
    15ea:	fd 81       	ldd	r31, Y+5	; 0x05
    15ec:	80 83       	st	Z, r24
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <DIO_u8Get_Pin_Val+0x112>
													break;
					default		:	Error_Status=E_NOK;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_u8Get_Pin_Val+0x112>
				}

		}
		else
		{
			Error_Status=E_NOK;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_Status;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    15fc:	27 96       	adiw	r28, 0x07	; 7
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <DIO_u8TOG_Pin_Val>:
uint8 DIO_u8TOG_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy )
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <DIO_u8TOG_Pin_Val+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <DIO_u8TOG_Pin_Val+0x8>
    1616:	0f 92       	push	r0
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    1620:	19 82       	std	Y+1, r1	; 0x01

		if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	88 30       	cpi	r24, 0x08	; 8
    1626:	08 f0       	brcs	.+2      	; 0x162a <DIO_u8TOG_Pin_Val+0x1c>
    1628:	72 c0       	rjmp	.+228    	; 0x170e <DIO_u8TOG_Pin_Val+0x100>
		{

			switch(u8PortIdCopy)
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	3d 83       	std	Y+5, r19	; 0x05
    1632:	2c 83       	std	Y+4, r18	; 0x04
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	91 05       	cpc	r25, r1
    163c:	49 f1       	breq	.+82     	; 0x1690 <DIO_u8TOG_Pin_Val+0x82>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	2c f4       	brge	.+10     	; 0x1652 <DIO_u8TOG_Pin_Val+0x44>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	61 f0       	breq	.+24     	; 0x1668 <DIO_u8TOG_Pin_Val+0x5a>
    1650:	5b c0       	rjmp	.+182    	; 0x1708 <DIO_u8TOG_Pin_Val+0xfa>
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	3d 81       	ldd	r19, Y+5	; 0x05
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	71 f1       	breq	.+92     	; 0x16b8 <DIO_u8TOG_Pin_Val+0xaa>
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	e9 f1       	breq	.+122    	; 0x16e0 <DIO_u8TOG_Pin_Val+0xd2>
    1666:	50 c0       	rjmp	.+160    	; 0x1708 <DIO_u8TOG_Pin_Val+0xfa>
				{
					case PORT_A : TOGGLE_BIT(PORTA_REG,u8Pin_IdCopy);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_u8TOG_Pin_Val+0x78>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_u8TOG_Pin_Val+0x74>
    168a:	84 27       	eor	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	41 c0       	rjmp	.+130    	; 0x1712 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_B : TOGGLE_BIT(PORTB_REG,u8Pin_IdCopy);
    1690:	a8 e3       	ldi	r26, 0x38	; 56
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e8 e3       	ldi	r30, 0x38	; 56
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_u8TOG_Pin_Val+0xa0>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_u8TOG_Pin_Val+0x9c>
    16b2:	84 27       	eor	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	2d c0       	rjmp	.+90     	; 0x1712 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_C : TOGGLE_BIT(PORTC_REG,u8Pin_IdCopy);
    16b8:	a5 e3       	ldi	r26, 0x35	; 53
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_u8TOG_Pin_Val+0xc8>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_u8TOG_Pin_Val+0xc4>
    16da:	84 27       	eor	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	19 c0       	rjmp	.+50     	; 0x1712 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_D : TOGGLE_BIT(PORTD_REG,u8Pin_IdCopy);
    16e0:	a2 e3       	ldi	r26, 0x32	; 50
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e2 e3       	ldi	r30, 0x32	; 50
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_u8TOG_Pin_Val+0xf0>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_u8TOG_Pin_Val+0xec>
    1702:	84 27       	eor	r24, r20
    1704:	8c 93       	st	X, r24
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					default		:	Error_Status=E_NOK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_u8TOG_Pin_Val+0x104>
				}

		}
		else
		{
			Error_Status=E_NOK;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_Status;
    1712:	89 81       	ldd	r24, Y+1	; 0x01

}
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <ADC_INIT>:
#include "../../SERV/bit_math.h"
#include "../../SERV/stdtypes.h"
#include "adc_init.h"
#include "adc_reg.h"
void ADC_INIT(void)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Enable ADC
	 */
	SET_BIT(ADCSRA_REG,ADEN);
    172c:	a6 e2       	ldi	r26, 0x26	; 38
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e6 e2       	ldi	r30, 0x26	; 38
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	80 68       	ori	r24, 0x80	; 128
    1738:	8c 93       	st	X, r24
	 */
#if	ADC_INPUT_REFRENCE==ADC_EXTERNAL_INPUT
	CLR_BIT(ADMUX_REG,REFS0);
	CLR_BIT(ADMUX_REG,REFS1);
#elif ADC_INPUT_REFRENCE==ADC_INTERNAL_VCC
	SET_BIT(ADMUX_REG,REFS0);
    173a:	a7 e2       	ldi	r26, 0x27	; 39
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e7 e2       	ldi	r30, 0x27	; 39
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 64       	ori	r24, 0x40	; 64
    1746:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1);
    1748:	a7 e2       	ldi	r26, 0x27	; 39
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e7 e2       	ldi	r30, 0x27	; 39
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8f 77       	andi	r24, 0x7F	; 127
    1754:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,REFS1);
#endif
	/*
	 * Select PRESCALER
	 */
	ADCSRA_REG|=ADC_PRESCALER_SELECTOR;
    1756:	a6 e2       	ldi	r26, 0x26	; 38
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e6 e2       	ldi	r30, 0x26	; 38
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	86 60       	ori	r24, 0x06	; 6
    1762:	8c 93       	st	X, r24

	/*
	 * ADJUST RESULT EITHER LEFT OR RIGHT
	 */
#if ADC_ADJUST_RESULT== ADC_ADJUST_RIGHT
	CLR_BIT(ADCSRA_REG,ADLAR);
    1764:	a6 e2       	ldi	r26, 0x26	; 38
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e6 e2       	ldi	r30, 0x26	; 38
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8f 7d       	andi	r24, 0xDF	; 223
    1770:	8c 93       	st	X, r24
#elif ADC_ADJUST_RESULT== ADC_ADJUST_LEFT
	SET_BIT(ADCSRA_REG,ADLAR);
#endif

}
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <ADC_u16_Read_>:

uint16 ADC_u16_Read_(void)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <ADC_u16_Read_+0x6>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Select Channel
	 */
	ADMUX_REG&=CLEAR_MUX_MUSK;
    1782:	a7 e2       	ldi	r26, 0x27	; 39
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e7 e2       	ldi	r30, 0x27	; 39
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 7e       	andi	r24, 0xE0	; 224
    178e:	8c 93       	st	X, r24
	ADMUX_REG|=ADC_MUX_CHANNEL_SELECTOR;
    1790:	a7 e2       	ldi	r26, 0x27	; 39
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e7 e2       	ldi	r30, 0x27	; 39
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8c 93       	st	X, r24
	/*
	 * CONVERSION MODE
	 */
#if	 ADC_CONVERSION_MODE == ADC_SINGLE_CONFERSION
		SET_BIT(ADCSRA_REG,ADSC);
    179c:	a6 e2       	ldi	r26, 0x26	; 38
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e6 e2       	ldi	r30, 0x26	; 38
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 64       	ori	r24, 0x40	; 64
    17a8:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_REG,ADATE);
    17aa:	a6 e2       	ldi	r26, 0x26	; 38
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e6 e2       	ldi	r30, 0x26	; 38
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 7d       	andi	r24, 0xDF	; 223
    17b6:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA_REG,ADIF)==0);
    17b8:	e6 e2       	ldi	r30, 0x26	; 38
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	82 95       	swap	r24
    17c0:	8f 70       	andi	r24, 0x0F	; 15
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	a9 f3       	breq	.-22     	; 0x17b8 <ADC_u16_Read_+0x40>
		SET_BIT(ADCSRA_REG,ADIF);
    17ce:	a6 e2       	ldi	r26, 0x26	; 38
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e6 e2       	ldi	r30, 0x26	; 38
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 61       	ori	r24, 0x10	; 16
    17da:	8c 93       	st	X, r24
		/*
		 * RETURN REGISTER ONLY LEFT.
		 */
		uint16 ADC_Val=ADC_REG;
    17dc:	e4 e2       	ldi	r30, 0x24	; 36
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(ADCSRA_REG,ADSC);
		SET_BIT(ADCSRA_REG,ADATE);
#endif


	return ADC_Val;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <Led_String_u8Set_Dir>:
/*
 * 		Enable Output on Full Port.
 *
 */
void  Led_String_u8Set_Dir(void)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(LED_PORT_FULL,FULL_OUTPUT);
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	6f ef       	ldi	r22, 0xFF	; 255
    1802:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_u8Set_Port_Dir>
}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <Led_Pin_u8Set_Dir>:



void Led_Pin_u8Set_Dir(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Pin_Dir(LED_PORT,LED_PIN,OUTPUT);
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	64 e0       	ldi	r22, 0x04	; 4
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <Led_String_u8Set_On_Off>:



void Led_String_u8Set_On_Off(uint8 u8ValCopy)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Port_Val(LED_PORT_FULL,u8ValCopy);
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	69 81       	ldd	r22, Y+1	; 0x01
    1834:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8Set_Port_Val>
}
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <Led_Pin_u8Set_On_Off>:



void Led_Pin_u8Set_On_Off(uint8 u8ValCopy)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Pin_Val(LED_PORT,LED_PIN,u8ValCopy);
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	64 e0       	ldi	r22, 0x04	; 4
    1850:	49 81       	ldd	r20, Y+1	; 0x01
    1852:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
}
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <Led_Pin_u8Tog_Val>:



void Led_Pin_u8Tog_Val(void)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TOG_Pin_Val(LED_PORT,LED_PIN);
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	64 e0       	ldi	r22, 0x04	; 4
    186a:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_u8TOG_Pin_Val>
}
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <LCD_Write_CMD>:




void LCD_Write_CMD(uint8 u8CommandCopy)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2f 97       	sbiw	r28, 0x0f	; 15
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8Set_Pin_Val(LCD_RS_PORT,LCD_RS_PIN,LOW);
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	40 e0       	ldi	r20, 0x00	; 0
    1890:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>

	DIO_u8Set_Pin_Val(LCD_DATA_PORT_0,LCD_DATA_PIN_0,GET_BIT(u8CommandCopy,0));
    189e:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a0:	98 2f       	mov	r25, r24
    18a2:	91 70       	andi	r25, 0x01	; 1
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	49 2f       	mov	r20, r25
    18aa:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_1,LCD_DATA_PIN_1,GET_BIT(u8CommandCopy,1));
    18ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b0:	86 95       	lsr	r24
    18b2:	98 2f       	mov	r25, r24
    18b4:	91 70       	andi	r25, 0x01	; 1
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	49 2f       	mov	r20, r25
    18bc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_2,LCD_DATA_PIN_2,GET_BIT(u8CommandCopy,2));
    18c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c2:	86 95       	lsr	r24
    18c4:	86 95       	lsr	r24
    18c6:	98 2f       	mov	r25, r24
    18c8:	91 70       	andi	r25, 0x01	; 1
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	62 e0       	ldi	r22, 0x02	; 2
    18ce:	49 2f       	mov	r20, r25
    18d0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_3,LCD_DATA_PIN_3,GET_BIT(u8CommandCopy,3));
    18d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d6:	86 95       	lsr	r24
    18d8:	86 95       	lsr	r24
    18da:	86 95       	lsr	r24
    18dc:	98 2f       	mov	r25, r24
    18de:	91 70       	andi	r25, 0x01	; 1
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	49 2f       	mov	r20, r25
    18e6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_4,LCD_DATA_PIN_4,GET_BIT(u8CommandCopy,4));
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	82 95       	swap	r24
    18ee:	8f 70       	andi	r24, 0x0F	; 15
    18f0:	98 2f       	mov	r25, r24
    18f2:	91 70       	andi	r25, 0x01	; 1
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	64 e0       	ldi	r22, 0x04	; 4
    18f8:	49 2f       	mov	r20, r25
    18fa:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_5,LCD_DATA_PIN_5,GET_BIT(u8CommandCopy,5));
    18fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1900:	82 95       	swap	r24
    1902:	86 95       	lsr	r24
    1904:	87 70       	andi	r24, 0x07	; 7
    1906:	98 2f       	mov	r25, r24
    1908:	91 70       	andi	r25, 0x01	; 1
    190a:	82 e0       	ldi	r24, 0x02	; 2
    190c:	65 e0       	ldi	r22, 0x05	; 5
    190e:	49 2f       	mov	r20, r25
    1910:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_6,LCD_DATA_PIN_6,GET_BIT(u8CommandCopy,6));
    1914:	8f 85       	ldd	r24, Y+15	; 0x0f
    1916:	82 95       	swap	r24
    1918:	86 95       	lsr	r24
    191a:	86 95       	lsr	r24
    191c:	83 70       	andi	r24, 0x03	; 3
    191e:	98 2f       	mov	r25, r24
    1920:	91 70       	andi	r25, 0x01	; 1
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	66 e0       	ldi	r22, 0x06	; 6
    1926:	49 2f       	mov	r20, r25
    1928:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_7,LCD_DATA_PIN_7,GET_BIT(u8CommandCopy,7));
    192c:	8f 85       	ldd	r24, Y+15	; 0x0f
    192e:	98 2f       	mov	r25, r24
    1930:	99 1f       	adc	r25, r25
    1932:	99 27       	eor	r25, r25
    1934:	99 1f       	adc	r25, r25
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	67 e0       	ldi	r22, 0x07	; 7
    193a:	49 2f       	mov	r20, r25
    193c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>

//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8CommandCopy);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e0       	ldi	r26, 0x00	; 0
    1950:	b0 e4       	ldi	r27, 0x40	; 64
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <LCD_Write_CMD+0x128>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <LCD_Write_CMD+0x1a6>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <LCD_Write_CMD+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_Write_CMD+0x188>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_Write_CMD+0x176>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <LCD_Write_CMD+0x16a>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <LCD_Write_CMD+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_Write_CMD+0x1b2>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	62 e0       	ldi	r22, 0x02	; 2
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>

}
    1a38:	2f 96       	adiw	r28, 0x0f	; 15
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_Init>:

void LCD_Init(void)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	ea 97       	sbiw	r28, 0x3a	; 58
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
	uint8 i,j;

	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_0,LCD_DATA_PIN_0,OUTPUT);
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_1,LCD_DATA_PIN_1,OUTPUT);
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_2,LCD_DATA_PIN_2,OUTPUT);
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	41 e0       	ldi	r20, 0x01	; 1
    1a78:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_3,LCD_DATA_PIN_3,OUTPUT);
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	63 e0       	ldi	r22, 0x03	; 3
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_4,LCD_DATA_PIN_4,OUTPUT);
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	64 e0       	ldi	r22, 0x04	; 4
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_5,LCD_DATA_PIN_5,OUTPUT);
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	65 e0       	ldi	r22, 0x05	; 5
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_6,LCD_DATA_PIN_6,OUTPUT);
    1a9a:	82 e0       	ldi	r24, 0x02	; 2
    1a9c:	66 e0       	ldi	r22, 0x06	; 6
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_7,LCD_DATA_PIN_7,OUTPUT);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	67 e0       	ldi	r22, 0x07	; 7
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>

	DIO_u8Set_Pin_Dir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e2       	ldi	r26, 0x20	; 32
    1ad2:	b2 e4       	ldi	r27, 0x42	; 66
    1ad4:	8d ab       	std	Y+53, r24	; 0x35
    1ad6:	9e ab       	std	Y+54, r25	; 0x36
    1ad8:	af ab       	std	Y+55, r26	; 0x37
    1ada:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ade:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a ef       	ldi	r20, 0xFA	; 250
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	89 ab       	std	Y+49, r24	; 0x31
    1af6:	9a ab       	std	Y+50, r25	; 0x32
    1af8:	ab ab       	std	Y+51, r26	; 0x33
    1afa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1afc:	69 a9       	ldd	r22, Y+49	; 0x31
    1afe:	7a a9       	ldd	r23, Y+50	; 0x32
    1b00:	8b a9       	ldd	r24, Y+51	; 0x33
    1b02:	9c a9       	ldd	r25, Y+52	; 0x34
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_Init+0xd4>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_Init+0x152>
	else if (__tmp > 65535)
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_Init+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6d a9       	ldd	r22, Y+53	; 0x35
    1b38:	7e a9       	ldd	r23, Y+54	; 0x36
    1b3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	98 ab       	std	Y+48, r25	; 0x30
    1b5c:	8f a7       	std	Y+47, r24	; 0x2f
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_Init+0x134>
    1b60:	88 ec       	ldi	r24, 0xC8	; 200
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e a7       	std	Y+46, r25	; 0x2e
    1b66:	8d a7       	std	Y+45, r24	; 0x2d
    1b68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_Init+0x122>
    1b70:	9e a7       	std	Y+46, r25	; 0x2e
    1b72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b76:	98 a9       	ldd	r25, Y+48	; 0x30
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b80:	98 a9       	ldd	r25, Y+48	; 0x30
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_Init+0x116>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <LCD_Init+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	69 a9       	ldd	r22, Y+49	; 0x31
    1b8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	98 ab       	std	Y+48, r25	; 0x30
    1b9a:	8f a7       	std	Y+47, r24	; 0x2f
    1b9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba0:	9c a7       	std	Y+44, r25	; 0x2c
    1ba2:	8b a7       	std	Y+43, r24	; 0x2b
    1ba4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_Init+0x15e>
    1bac:	9c a7       	std	Y+44, r25	; 0x2c
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);

	LCD_Write_CMD(LCD_FUNC_SET);
    1bb0:	88 e3       	ldi	r24, 0x38	; 56
    1bb2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a0 e8       	ldi	r26, 0x80	; 128
    1bbc:	bf e3       	ldi	r27, 0x3F	; 63
    1bbe:	8f a3       	std	Y+39, r24	; 0x27
    1bc0:	98 a7       	std	Y+40, r25	; 0x28
    1bc2:	a9 a7       	std	Y+41, r26	; 0x29
    1bc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bca:	89 a5       	ldd	r24, Y+41	; 0x29
    1bcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a ef       	ldi	r20, 0xFA	; 250
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8b a3       	std	Y+35, r24	; 0x23
    1be0:	9c a3       	std	Y+36, r25	; 0x24
    1be2:	ad a3       	std	Y+37, r26	; 0x25
    1be4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <LCD_Init+0x1be>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	89 a3       	std	Y+33, r24	; 0x21
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <LCD_Init+0x23c>
	else if (__tmp > 65535)
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <LCD_Init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6f a1       	ldd	r22, Y+39	; 0x27
    1c22:	78 a5       	ldd	r23, Y+40	; 0x28
    1c24:	89 a5       	ldd	r24, Y+41	; 0x29
    1c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <LCD_Init+0x21e>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	98 a3       	std	Y+32, r25	; 0x20
    1c50:	8f 8f       	std	Y+31, r24	; 0x1f
    1c52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c54:	98 a1       	ldd	r25, Y+32	; 0x20
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <LCD_Init+0x20c>
    1c5a:	98 a3       	std	Y+32, r25	; 0x20
    1c5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c60:	9a a1       	ldd	r25, Y+34	; 0x22
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <LCD_Init+0x200>
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <LCD_Init+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6b a1       	ldd	r22, Y+35	; 0x23
    1c74:	7c a1       	ldd	r23, Y+36	; 0x24
    1c76:	8d a1       	ldd	r24, Y+37	; 0x25
    1c78:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9a a3       	std	Y+34, r25	; 0x22
    1c84:	89 a3       	std	Y+33, r24	; 0x21
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_Init+0x248>
    1c96:	9e 8f       	std	Y+30, r25	; 0x1e
    1c98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Write_CMD(LCD_DISP_CTRL);
    1c9a:	8e e0       	ldi	r24, 0x0E	; 14
    1c9c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e8       	ldi	r26, 0x80	; 128
    1ca6:	bf e3       	ldi	r27, 0x3F	; 63
    1ca8:	89 8f       	std	Y+25, r24	; 0x19
    1caa:	9a 8f       	std	Y+26, r25	; 0x1a
    1cac:	ab 8f       	std	Y+27, r26	; 0x1b
    1cae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8d 8b       	std	Y+21, r24	; 0x15
    1cca:	9e 8b       	std	Y+22, r25	; 0x16
    1ccc:	af 8b       	std	Y+23, r26	; 0x17
    1cce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <LCD_Init+0x2a8>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9c 8b       	std	Y+20, r25	; 0x14
    1cee:	8b 8b       	std	Y+19, r24	; 0x13
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <LCD_Init+0x326>
	else if (__tmp > 65535)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <LCD_Init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <LCD_Init+0x308>
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
    1d3c:	89 89       	ldd	r24, Y+17	; 0x11
    1d3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_Init+0x2f6>
    1d44:	9a 8b       	std	Y+18, r25	; 0x12
    1d46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <LCD_Init+0x2ea>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <LCD_Init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9c 8b       	std	Y+20, r25	; 0x14
    1d6e:	8b 8b       	std	Y+19, r24	; 0x13
    1d70:	8b 89       	ldd	r24, Y+19	; 0x13
    1d72:	9c 89       	ldd	r25, Y+20	; 0x14
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
    1d78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7a:	98 89       	ldd	r25, Y+16	; 0x10
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_Init+0x332>
    1d80:	98 8b       	std	Y+16, r25	; 0x10
    1d82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Write_CMD(LCD_DISP_CLR);
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e4       	ldi	r26, 0x40	; 64
    1d90:	b0 e4       	ldi	r27, 0x40	; 64
    1d92:	8b 87       	std	Y+11, r24	; 0x0b
    1d94:	9c 87       	std	Y+12, r25	; 0x0c
    1d96:	ad 87       	std	Y+13, r26	; 0x0d
    1d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a ef       	ldi	r20, 0xFA	; 250
    1da8:	54 e4       	ldi	r21, 0x44	; 68
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8f 83       	std	Y+7, r24	; 0x07
    1db4:	98 87       	std	Y+8, r25	; 0x08
    1db6:	a9 87       	std	Y+9, r26	; 0x09
    1db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <LCD_Init+0x392>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <LCD_Init+0x410>
	else if (__tmp > 65535)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <LCD_Init+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <LCD_Init+0x3f2>
    1e1e:	88 ec       	ldi	r24, 0xC8	; 200
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_Init+0x3e0>
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <LCD_Init+0x3d4>
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <LCD_Init+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_Init+0x41c>
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	LCD_Write_CMD(LCD_ENGLISH_ENT_MOD_SET);
    1e6e:	86 e0       	ldi	r24, 0x06	; 6
    1e70:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>



	LCD_Write_CMD(LCD_CGRAM_ADDRESS);
    1e74:	80 e4       	ldi	r24, 0x40	; 64
    1e76:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>


	for(i=0;i<8;i++)
    1e7a:	1a ae       	std	Y+58, r1	; 0x3a
    1e7c:	20 c0       	rjmp	.+64     	; 0x1ebe <LCD_Init+0x474>
	{
		for(j=0;j<8;j++)
    1e7e:	19 ae       	std	Y+57, r1	; 0x39
    1e80:	18 c0       	rjmp	.+48     	; 0x1eb2 <LCD_Init+0x468>
		{
			LCD_WRITE_CHAR(LCD_u8CustomCharArray[i][j]);
    1e82:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e84:	48 2f       	mov	r20, r24
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	89 ad       	ldd	r24, Y+57	; 0x39
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	ca 01       	movw	r24, r20
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	82 0f       	add	r24, r18
    1e9e:	93 1f       	adc	r25, r19
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	ec 58       	subi	r30, 0x8C	; 140
    1ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea6:	80 81       	ld	r24, Z
    1ea8:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_WRITE_CHAR>
	LCD_Write_CMD(LCD_CGRAM_ADDRESS);


	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
    1eac:	89 ad       	ldd	r24, Y+57	; 0x39
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	89 af       	std	Y+57, r24	; 0x39
    1eb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb4:	88 30       	cpi	r24, 0x08	; 8
    1eb6:	28 f3       	brcs	.-54     	; 0x1e82 <LCD_Init+0x438>


	LCD_Write_CMD(LCD_CGRAM_ADDRESS);


	for(i=0;i<8;i++)
    1eb8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	8a af       	std	Y+58, r24	; 0x3a
    1ebe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ec0:	88 30       	cpi	r24, 0x08	; 8
    1ec2:	e8 f2       	brcs	.-70     	; 0x1e7e <LCD_Init+0x434>
		{
			LCD_WRITE_CHAR(LCD_u8CustomCharArray[i][j]);
		}
	}

	LCD_Return_Home();
    1ec4:	0e 94 65 12 	call	0x24ca	; 0x24ca <LCD_Return_Home>

}
    1ec8:	ea 96       	adiw	r28, 0x3a	; 58
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <LCD_CLR_SCR>:
void LCD_CLR_SCR(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_DISP_CLR);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	a0 e4       	ldi	r26, 0x40	; 64
    1efa:	b0 e4       	ldi	r27, 0x40	; 64
    1efc:	8b 87       	std	Y+11, r24	; 0x0b
    1efe:	9c 87       	std	Y+12, r25	; 0x0c
    1f00:	ad 87       	std	Y+13, r26	; 0x0d
    1f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a ef       	ldi	r20, 0xFA	; 250
    1f12:	54 e4       	ldi	r21, 0x44	; 68
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8f 83       	std	Y+7, r24	; 0x07
    1f1e:	98 87       	std	Y+8, r25	; 0x08
    1f20:	a9 87       	std	Y+9, r26	; 0x09
    1f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e8       	ldi	r20, 0x80	; 128
    1f32:	5f e3       	ldi	r21, 0x3F	; 63
    1f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f38:	88 23       	and	r24, r24
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <LCD_CLR_SCR+0x6c>
		__ticks = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	3f c0       	rjmp	.+126    	; 0x1fc4 <LCD_CLR_SCR+0xea>
	else if (__tmp > 65535)
    1f46:	6f 81       	ldd	r22, Y+7	; 0x07
    1f48:	78 85       	ldd	r23, Y+8	; 0x08
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	4c f5       	brge	.+82     	; 0x1fb0 <LCD_CLR_SCR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e4       	ldi	r21, 0x41	; 65
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <LCD_CLR_SCR+0xcc>
    1f88:	88 ec       	ldi	r24, 0xC8	; 200
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	8b 83       	std	Y+3, r24	; 0x03
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_CLR_SCR+0xba>
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <LCD_CLR_SCR+0xae>
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <LCD_CLR_SCR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	9a 83       	std	Y+2, r25	; 0x02
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_CLR_SCR+0xf6>
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1fd8:	2e 96       	adiw	r28, 0x0e	; 14
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(uint8 u8CharCopy)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8Set_Pin_Val(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_0,LCD_DATA_PIN_0,GET_BIT(u8CharCopy,0));
    2014:	8f 85       	ldd	r24, Y+15	; 0x0f
    2016:	98 2f       	mov	r25, r24
    2018:	91 70       	andi	r25, 0x01	; 1
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	49 2f       	mov	r20, r25
    2020:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_1,LCD_DATA_PIN_1,GET_BIT(u8CharCopy,1));
    2024:	8f 85       	ldd	r24, Y+15	; 0x0f
    2026:	86 95       	lsr	r24
    2028:	98 2f       	mov	r25, r24
    202a:	91 70       	andi	r25, 0x01	; 1
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	61 e0       	ldi	r22, 0x01	; 1
    2030:	49 2f       	mov	r20, r25
    2032:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_2,LCD_DATA_PIN_2,GET_BIT(u8CharCopy,2));
    2036:	8f 85       	ldd	r24, Y+15	; 0x0f
    2038:	86 95       	lsr	r24
    203a:	86 95       	lsr	r24
    203c:	98 2f       	mov	r25, r24
    203e:	91 70       	andi	r25, 0x01	; 1
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	49 2f       	mov	r20, r25
    2046:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_3,LCD_DATA_PIN_3,GET_BIT(u8CharCopy,3));
    204a:	8f 85       	ldd	r24, Y+15	; 0x0f
    204c:	86 95       	lsr	r24
    204e:	86 95       	lsr	r24
    2050:	86 95       	lsr	r24
    2052:	98 2f       	mov	r25, r24
    2054:	91 70       	andi	r25, 0x01	; 1
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	63 e0       	ldi	r22, 0x03	; 3
    205a:	49 2f       	mov	r20, r25
    205c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_4,LCD_DATA_PIN_4,GET_BIT(u8CharCopy,4));
    2060:	8f 85       	ldd	r24, Y+15	; 0x0f
    2062:	82 95       	swap	r24
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	98 2f       	mov	r25, r24
    2068:	91 70       	andi	r25, 0x01	; 1
    206a:	82 e0       	ldi	r24, 0x02	; 2
    206c:	64 e0       	ldi	r22, 0x04	; 4
    206e:	49 2f       	mov	r20, r25
    2070:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_5,LCD_DATA_PIN_5,GET_BIT(u8CharCopy,5));
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	82 95       	swap	r24
    2078:	86 95       	lsr	r24
    207a:	87 70       	andi	r24, 0x07	; 7
    207c:	98 2f       	mov	r25, r24
    207e:	91 70       	andi	r25, 0x01	; 1
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	65 e0       	ldi	r22, 0x05	; 5
    2084:	49 2f       	mov	r20, r25
    2086:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_6,LCD_DATA_PIN_6,GET_BIT(u8CharCopy,6));
    208a:	8f 85       	ldd	r24, Y+15	; 0x0f
    208c:	82 95       	swap	r24
    208e:	86 95       	lsr	r24
    2090:	86 95       	lsr	r24
    2092:	83 70       	andi	r24, 0x03	; 3
    2094:	98 2f       	mov	r25, r24
    2096:	91 70       	andi	r25, 0x01	; 1
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	66 e0       	ldi	r22, 0x06	; 6
    209c:	49 2f       	mov	r20, r25
    209e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_7,LCD_DATA_PIN_7,GET_BIT(u8CharCopy,7));
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	98 2f       	mov	r25, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	99 27       	eor	r25, r25
    20aa:	99 1f       	adc	r25, r25
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	67 e0       	ldi	r22, 0x07	; 7
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	62 e0       	ldi	r22, 0x02	; 2
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e0       	ldi	r26, 0x00	; 0
    20c6:	b0 e4       	ldi	r27, 0x40	; 64
    20c8:	8b 87       	std	Y+11, r24	; 0x0b
    20ca:	9c 87       	std	Y+12, r25	; 0x0c
    20cc:	ad 87       	std	Y+13, r26	; 0x0d
    20ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4a ef       	ldi	r20, 0xFA	; 250
    20de:	54 e4       	ldi	r21, 0x44	; 68
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8f 83       	std	Y+7, r24	; 0x07
    20ea:	98 87       	std	Y+8, r25	; 0x08
    20ec:	a9 87       	std	Y+9, r26	; 0x09
    20ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f0:	6f 81       	ldd	r22, Y+7	; 0x07
    20f2:	78 85       	ldd	r23, Y+8	; 0x08
    20f4:	89 85       	ldd	r24, Y+9	; 0x09
    20f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e8       	ldi	r20, 0x80	; 128
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2104:	88 23       	and	r24, r24
    2106:	2c f4       	brge	.+10     	; 0x2112 <LCD_WRITE_CHAR+0x128>
		__ticks = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	8d 83       	std	Y+5, r24	; 0x05
    2110:	3f c0       	rjmp	.+126    	; 0x2190 <LCD_WRITE_CHAR+0x1a6>
	else if (__tmp > 65535)
    2112:	6f 81       	ldd	r22, Y+7	; 0x07
    2114:	78 85       	ldd	r23, Y+8	; 0x08
    2116:	89 85       	ldd	r24, Y+9	; 0x09
    2118:	9a 85       	ldd	r25, Y+10	; 0x0a
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	4c f5       	brge	.+82     	; 0x217c <LCD_WRITE_CHAR+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	6b 85       	ldd	r22, Y+11	; 0x0b
    212c:	7c 85       	ldd	r23, Y+12	; 0x0c
    212e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2130:	9e 85       	ldd	r25, Y+14	; 0x0e
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <LCD_WRITE_CHAR+0x188>
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_WRITE_CHAR+0x176>
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <LCD_WRITE_CHAR+0x16a>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <LCD_WRITE_CHAR+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	6f 81       	ldd	r22, Y+7	; 0x07
    217e:	78 85       	ldd	r23, Y+8	; 0x08
    2180:	89 85       	ldd	r24, Y+9	; 0x09
    2182:	9a 85       	ldd	r25, Y+10	; 0x0a
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	8d 81       	ldd	r24, Y+5	; 0x05
    2192:	9e 81       	ldd	r25, Y+6	; 0x06
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_WRITE_CHAR+0x1b2>
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	62 e0       	ldi	r22, 0x02	; 2
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>


}
    21ae:	2f 96       	adiw	r28, 0x0f	; 15
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(const uint8* u8pStringCopy)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <LCD_WRITE_STRING+0x6>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	9b 83       	std	Y+3, r25	; 0x03
    21ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	0e c0       	rjmp	.+28     	; 0x21f0 <LCD_WRITE_STRING+0x30>
	//	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
	//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8pStringCopy[i]);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	fc 01       	movw	r30, r24
    21e0:	e2 0f       	add	r30, r18
    21e2:	f3 1f       	adc	r31, r19
    21e4:	80 81       	ld	r24, Z
    21e6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_WRITE_CHAR>
		i++;
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WRITE_STRING(const uint8* u8pStringCopy)
{
	uint8 i=0;
	while(u8pStringCopy[i]!='\0')
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	9b 81       	ldd	r25, Y+3	; 0x03
    21fa:	fc 01       	movw	r30, r24
    21fc:	e2 0f       	add	r30, r18
    21fe:	f3 1f       	adc	r31, r19
    2200:	80 81       	ld	r24, Z
    2202:	88 23       	and	r24, r24
    2204:	39 f7       	brne	.-50     	; 0x21d4 <LCD_WRITE_STRING+0x14>
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
		i++;
	}
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_WRITE_STRING_Delayed>:
void LCD_WRITE_STRING_Delayed(const uint8* u8pStringCopy,uint16 u8DelayCopy)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	63 97       	sbiw	r28, 0x13	; 19
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	99 8b       	std	Y+17, r25	; 0x11
    2228:	88 8b       	std	Y+16, r24	; 0x10
    222a:	7b 8b       	std	Y+19, r23	; 0x13
    222c:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i=0;
    222e:	1f 86       	std	Y+15, r1	; 0x0f
    2230:	87 c0       	rjmp	.+270    	; 0x2340 <LCD_WRITE_STRING_Delayed+0x12e>
	//	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
	//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8pStringCopy[i]);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
    2232:	8f 85       	ldd	r24, Y+15	; 0x0f
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	88 89       	ldd	r24, Y+16	; 0x10
    223a:	99 89       	ldd	r25, Y+17	; 0x11
    223c:	fc 01       	movw	r30, r24
    223e:	e2 0f       	add	r30, r18
    2240:	f3 1f       	adc	r31, r19
    2242:	80 81       	ld	r24, Z
    2244:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <LCD_WRITE_CHAR>
		_delay_ms(u8DelayCopy);
    2248:	8a 89       	ldd	r24, Y+18	; 0x12
    224a:	9b 89       	ldd	r25, Y+19	; 0x13
    224c:	cc 01       	movw	r24, r24
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_WRITE_STRING_Delayed+0x96>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_WRITE_STRING_Delayed+0x114>
	else if (__tmp > 65535)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_WRITE_STRING_Delayed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_WRITE_STRING_Delayed+0xf6>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_WRITE_STRING_Delayed+0xe4>
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_WRITE_STRING_Delayed+0xd8>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_WRITE_STRING_Delayed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_WRITE_STRING_Delayed+0x120>
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
		i++;
    233a:	8f 85       	ldd	r24, Y+15	; 0x0f
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	8f 87       	std	Y+15, r24	; 0x0f
	}
}
void LCD_WRITE_STRING_Delayed(const uint8* u8pStringCopy,uint16 u8DelayCopy)
{
	uint8 i=0;
	while(u8pStringCopy[i]!='\0')
    2340:	8f 85       	ldd	r24, Y+15	; 0x0f
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	88 89       	ldd	r24, Y+16	; 0x10
    2348:	99 89       	ldd	r25, Y+17	; 0x11
    234a:	fc 01       	movw	r30, r24
    234c:	e2 0f       	add	r30, r18
    234e:	f3 1f       	adc	r31, r19
    2350:	80 81       	ld	r24, Z
    2352:	88 23       	and	r24, r24
    2354:	09 f0       	breq	.+2      	; 0x2358 <LCD_WRITE_STRING_Delayed+0x146>
    2356:	6d cf       	rjmp	.-294    	; 0x2232 <LCD_WRITE_STRING_Delayed+0x20>
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
		_delay_ms(u8DelayCopy);
		i++;
	}
}
    2358:	63 96       	adiw	r28, 0x13	; 19
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <LCD_Entry_Mode_Arabic>:
void LCD_Entry_Mode_Arabic(void)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	2e 97       	sbiw	r28, 0x0e	; 14
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_ARABIC_ENT_MOD_SET);
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e0       	ldi	r26, 0x00	; 0
    238a:	b0 e4       	ldi	r27, 0x40	; 64
    238c:	8b 87       	std	Y+11, r24	; 0x0b
    238e:	9c 87       	std	Y+12, r25	; 0x0c
    2390:	ad 87       	std	Y+13, r26	; 0x0d
    2392:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6b 85       	ldd	r22, Y+11	; 0x0b
    2396:	7c 85       	ldd	r23, Y+12	; 0x0c
    2398:	8d 85       	ldd	r24, Y+13	; 0x0d
    239a:	9e 85       	ldd	r25, Y+14	; 0x0e
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a ef       	ldi	r20, 0xFA	; 250
    23a2:	54 e4       	ldi	r21, 0x44	; 68
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8f 83       	std	Y+7, r24	; 0x07
    23ae:	98 87       	std	Y+8, r25	; 0x08
    23b0:	a9 87       	std	Y+9, r26	; 0x09
    23b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_Entry_Mode_Arabic+0x6c>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_Entry_Mode_Arabic+0xea>
	else if (__tmp > 65535)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_Entry_Mode_Arabic+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_Entry_Mode_Arabic+0xcc>
    2418:	88 ec       	ldi	r24, 0xC8	; 200
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_Entry_Mode_Arabic+0xba>
    2428:	9c 83       	std	Y+4, r25	; 0x04
    242a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	9e 81       	ldd	r25, Y+6	; 0x06
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_Entry_Mode_Arabic+0xae>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <LCD_Entry_Mode_Arabic+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_Entry_Mode_Arabic+0xf6>
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2468:	2e 96       	adiw	r28, 0x0e	; 14
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <LCD_GoTo_X_Y>:
void LCD_GoTo_X_Y(uint8 X,uint8 Y )
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <LCD_GoTo_X_Y+0x6>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <LCD_GoTo_X_Y+0x8>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	6a 83       	std	Y+2, r22	; 0x02
	switch(Y)
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	3c 83       	std	Y+4, r19	; 0x04
    2492:	2b 83       	std	Y+3, r18	; 0x03
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	91 05       	cpc	r25, r1
    249c:	31 f0       	breq	.+12     	; 0x24aa <LCD_GoTo_X_Y+0x30>
    249e:	2b 81       	ldd	r18, Y+3	; 0x03
    24a0:	3c 81       	ldd	r19, Y+4	; 0x04
    24a2:	22 30       	cpi	r18, 0x02	; 2
    24a4:	31 05       	cpc	r19, r1
    24a6:	31 f0       	breq	.+12     	; 0x24b4 <LCD_GoTo_X_Y+0x3a>
    24a8:	09 c0       	rjmp	.+18     	; 0x24bc <LCD_GoTo_X_Y+0x42>
	{
		case 1:
			LCD_Write_CMD(LCD_JMP_TOP_LEFT+X);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	80 58       	subi	r24, 0x80	; 128
    24ae:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    24b2:	04 c0       	rjmp	.+8      	; 0x24bc <LCD_GoTo_X_Y+0x42>
			break;
		case 2:
			LCD_Write_CMD(LCD_JMP_BOT_LEFT+X);
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	80 54       	subi	r24, 0x40	; 64
    24b8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
			break;
	}

}
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <LCD_Return_Home>:
void LCD_Return_Home(void)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	2e 97       	sbiw	r28, 0x0e	; 14
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_RET_HOME);
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e0       	ldi	r26, 0x00	; 0
    24ea:	b0 e4       	ldi	r27, 0x40	; 64
    24ec:	8b 87       	std	Y+11, r24	; 0x0b
    24ee:	9c 87       	std	Y+12, r25	; 0x0c
    24f0:	ad 87       	std	Y+13, r26	; 0x0d
    24f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a ef       	ldi	r20, 0xFA	; 250
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8f 83       	std	Y+7, r24	; 0x07
    250e:	98 87       	std	Y+8, r25	; 0x08
    2510:	a9 87       	std	Y+9, r26	; 0x09
    2512:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2514:	6f 81       	ldd	r22, Y+7	; 0x07
    2516:	78 85       	ldd	r23, Y+8	; 0x08
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_Return_Home+0x6c>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_Return_Home+0xea>
	else if (__tmp > 65535)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_Return_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2550:	7c 85       	ldd	r23, Y+12	; 0x0c
    2552:	8d 85       	ldd	r24, Y+13	; 0x0d
    2554:	9e 85       	ldd	r25, Y+14	; 0x0e
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_Return_Home+0xcc>
    2578:	88 ec       	ldi	r24, 0xC8	; 200
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_Return_Home+0xba>
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_Return_Home+0xae>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_Return_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_Return_Home+0xf6>
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    25c8:	2e 96       	adiw	r28, 0x0e	; 14
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LCD_Write_INT>:

void LCD_Write_INT(const uint32 u32IntCopy)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LCD_Write_INT+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <LCD_Write_INT+0x8>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <LCD_Write_INT+0xa>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	6b 83       	std	Y+3, r22	; 0x03
    25ea:	7c 83       	std	Y+4, r23	; 0x04
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	9e 83       	std	Y+6, r25	; 0x06
	uint8 *str;
	itoa(u32IntCopy, str, 10);
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	29 81       	ldd	r18, Y+1	; 0x01
    25f6:	3a 81       	ldd	r19, Y+2	; 0x02
    25f8:	b9 01       	movw	r22, r18
    25fa:	4a e0       	ldi	r20, 0x0A	; 10
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	0e 94 5f 19 	call	0x32be	; 0x32be <itoa>
	LCD_WRITE_STRING(str);
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_WRITE_STRING>
}
    260a:	26 96       	adiw	r28, 0x06	; 6
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <LCD_SHIFT_Cursor_Left>:
 *
 */


void LCD_SHIFT_Cursor_Left(void)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	2e 97       	sbiw	r28, 0x0e	; 14
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_Cursor_LEFT);
    2630:	80 e1       	ldi	r24, 0x10	; 16
    2632:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e0       	ldi	r26, 0x00	; 0
    263c:	b0 e4       	ldi	r27, 0x40	; 64
    263e:	8b 87       	std	Y+11, r24	; 0x0b
    2640:	9c 87       	std	Y+12, r25	; 0x0c
    2642:	ad 87       	std	Y+13, r26	; 0x0d
    2644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a ef       	ldi	r20, 0xFA	; 250
    2654:	54 e4       	ldi	r21, 0x44	; 68
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8f 83       	std	Y+7, r24	; 0x07
    2660:	98 87       	std	Y+8, r25	; 0x08
    2662:	a9 87       	std	Y+9, r26	; 0x09
    2664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2666:	6f 81       	ldd	r22, Y+7	; 0x07
    2668:	78 85       	ldd	r23, Y+8	; 0x08
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_SHIFT_Cursor_Left+0x6c>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9e 83       	std	Y+6, r25	; 0x06
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <LCD_SHIFT_Cursor_Left+0xea>
	else if (__tmp > 65535)
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <LCD_SHIFT_Cursor_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9e 83       	std	Y+6, r25	; 0x06
    26c6:	8d 83       	std	Y+5, r24	; 0x05
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <LCD_SHIFT_Cursor_Left+0xcc>
    26ca:	88 ec       	ldi	r24, 0xC8	; 200
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9c 83       	std	Y+4, r25	; 0x04
    26d0:	8b 83       	std	Y+3, r24	; 0x03
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_SHIFT_Cursor_Left+0xba>
    26da:	9c 83       	std	Y+4, r25	; 0x04
    26dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9e 83       	std	Y+6, r25	; 0x06
    26e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <LCD_SHIFT_Cursor_Left+0xae>
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <LCD_SHIFT_Cursor_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9e 83       	std	Y+6, r25	; 0x06
    2704:	8d 83       	std	Y+5, r24	; 0x05
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_SHIFT_Cursor_Left+0xf6>
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    271a:	2e 96       	adiw	r28, 0x0e	; 14
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <LCD_SHIFT_Cursor_Right>:


void LCD_SHIFT_Cursor_Right(void)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	2e 97       	sbiw	r28, 0x0e	; 14
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_Cursor_RIGHT);
    2740:	84 e1       	ldi	r24, 0x14	; 20
    2742:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e0       	ldi	r26, 0x00	; 0
    274c:	b0 e4       	ldi	r27, 0x40	; 64
    274e:	8b 87       	std	Y+11, r24	; 0x0b
    2750:	9c 87       	std	Y+12, r25	; 0x0c
    2752:	ad 87       	std	Y+13, r26	; 0x0d
    2754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	6b 85       	ldd	r22, Y+11	; 0x0b
    2758:	7c 85       	ldd	r23, Y+12	; 0x0c
    275a:	8d 85       	ldd	r24, Y+13	; 0x0d
    275c:	9e 85       	ldd	r25, Y+14	; 0x0e
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8f 83       	std	Y+7, r24	; 0x07
    2770:	98 87       	std	Y+8, r25	; 0x08
    2772:	a9 87       	std	Y+9, r26	; 0x09
    2774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2776:	6f 81       	ldd	r22, Y+7	; 0x07
    2778:	78 85       	ldd	r23, Y+8	; 0x08
    277a:	89 85       	ldd	r24, Y+9	; 0x09
    277c:	9a 85       	ldd	r25, Y+10	; 0x0a
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_SHIFT_Cursor_Right+0x6c>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <LCD_SHIFT_Cursor_Right+0xea>
	else if (__tmp > 65535)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <LCD_SHIFT_Cursor_Right+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_SHIFT_Cursor_Right+0xcc>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_SHIFT_Cursor_Right+0xba>
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8d 81       	ldd	r24, Y+5	; 0x05
    27f0:	9e 81       	ldd	r25, Y+6	; 0x06
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_SHIFT_Cursor_Right+0xae>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <LCD_SHIFT_Cursor_Right+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_SHIFT_Cursor_Right+0xf6>
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    282a:	2e 96       	adiw	r28, 0x0e	; 14
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <LCD_SHIFT_Display_Right>:



void LCD_SHIFT_Display_Right(void)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	2e 97       	sbiw	r28, 0x0e	; 14
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_DSP_RIGHT);
    2850:	8c e1       	ldi	r24, 0x1C	; 28
    2852:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	a0 e0       	ldi	r26, 0x00	; 0
    285c:	b0 e4       	ldi	r27, 0x40	; 64
    285e:	8b 87       	std	Y+11, r24	; 0x0b
    2860:	9c 87       	std	Y+12, r25	; 0x0c
    2862:	ad 87       	std	Y+13, r26	; 0x0d
    2864:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2866:	6b 85       	ldd	r22, Y+11	; 0x0b
    2868:	7c 85       	ldd	r23, Y+12	; 0x0c
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	4a ef       	ldi	r20, 0xFA	; 250
    2874:	54 e4       	ldi	r21, 0x44	; 68
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8f 83       	std	Y+7, r24	; 0x07
    2880:	98 87       	std	Y+8, r25	; 0x08
    2882:	a9 87       	std	Y+9, r26	; 0x09
    2884:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289a:	88 23       	and	r24, r24
    289c:	2c f4       	brge	.+10     	; 0x28a8 <LCD_SHIFT_Display_Right+0x6c>
		__ticks = 1;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9e 83       	std	Y+6, r25	; 0x06
    28a4:	8d 83       	std	Y+5, r24	; 0x05
    28a6:	3f c0       	rjmp	.+126    	; 0x2926 <LCD_SHIFT_Display_Right+0xea>
	else if (__tmp > 65535)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	3f ef       	ldi	r19, 0xFF	; 255
    28b4:	4f e7       	ldi	r20, 0x7F	; 127
    28b6:	57 e4       	ldi	r21, 0x47	; 71
    28b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28bc:	18 16       	cp	r1, r24
    28be:	4c f5       	brge	.+82     	; 0x2912 <LCD_SHIFT_Display_Right+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <LCD_SHIFT_Display_Right+0xcc>
    28ea:	88 ec       	ldi	r24, 0xC8	; 200
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_SHIFT_Display_Right+0xba>
    28fa:	9c 83       	std	Y+4, r25	; 0x04
    28fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2900:	9e 81       	ldd	r25, Y+6	; 0x06
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <LCD_SHIFT_Display_Right+0xae>
    2910:	14 c0       	rjmp	.+40     	; 0x293a <LCD_SHIFT_Display_Right+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	6f 81       	ldd	r22, Y+7	; 0x07
    2914:	78 85       	ldd	r23, Y+8	; 0x08
    2916:	89 85       	ldd	r24, Y+9	; 0x09
    2918:	9a 85       	ldd	r25, Y+10	; 0x0a
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	9e 81       	ldd	r25, Y+6	; 0x06
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <LCD_SHIFT_Display_Right+0xf6>
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    293a:	2e 96       	adiw	r28, 0x0e	; 14
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <LCD_SHIFT_Display_Left>:



void LCD_SHIFT_Display_Left(void)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	2e 97       	sbiw	r28, 0x0e	; 14
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_DSP_LEFT);
    2960:	88 e1       	ldi	r24, 0x18	; 24
    2962:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e0       	ldi	r26, 0x00	; 0
    296c:	b0 e4       	ldi	r27, 0x40	; 64
    296e:	8b 87       	std	Y+11, r24	; 0x0b
    2970:	9c 87       	std	Y+12, r25	; 0x0c
    2972:	ad 87       	std	Y+13, r26	; 0x0d
    2974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a ef       	ldi	r20, 0xFA	; 250
    2984:	54 e4       	ldi	r21, 0x44	; 68
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8f 83       	std	Y+7, r24	; 0x07
    2990:	98 87       	std	Y+8, r25	; 0x08
    2992:	a9 87       	std	Y+9, r26	; 0x09
    2994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e8       	ldi	r20, 0x80	; 128
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29aa:	88 23       	and	r24, r24
    29ac:	2c f4       	brge	.+10     	; 0x29b8 <LCD_SHIFT_Display_Left+0x6c>
		__ticks = 1;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	3f c0       	rjmp	.+126    	; 0x2a36 <LCD_SHIFT_Display_Left+0xea>
	else if (__tmp > 65535)
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	4c f5       	brge	.+82     	; 0x2a22 <LCD_SHIFT_Display_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e2       	ldi	r20, 0x20	; 32
    29de:	51 e4       	ldi	r21, 0x41	; 65
    29e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9e 83       	std	Y+6, r25	; 0x06
    29f6:	8d 83       	std	Y+5, r24	; 0x05
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <LCD_SHIFT_Display_Left+0xcc>
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_SHIFT_Display_Left+0xba>
    2a0a:	9c 83       	std	Y+4, r25	; 0x04
    2a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	9e 83       	std	Y+6, r25	; 0x06
    2a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	69 f7       	brne	.-38     	; 0x29fa <LCD_SHIFT_Display_Left+0xae>
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <LCD_SHIFT_Display_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a22:	6f 81       	ldd	r22, Y+7	; 0x07
    2a24:	78 85       	ldd	r23, Y+8	; 0x08
    2a26:	89 85       	ldd	r24, Y+9	; 0x09
    2a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9e 83       	std	Y+6, r25	; 0x06
    2a34:	8d 83       	std	Y+5, r24	; 0x05
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	9a 83       	std	Y+2, r25	; 0x02
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_SHIFT_Display_Left+0xf6>
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2a4a:	2e 96       	adiw	r28, 0x0e	; 14
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_JMP_Bottom_Left>:


void LCD_JMP_Bottom_Left(void)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	2e 97       	sbiw	r28, 0x0e	; 14
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_JMP_BOT_LEFT);
    2a70:	80 ec       	ldi	r24, 0xC0	; 192
    2a72:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e0       	ldi	r26, 0x00	; 0
    2a7c:	b0 e4       	ldi	r27, 0x40	; 64
    2a7e:	8b 87       	std	Y+11, r24	; 0x0b
    2a80:	9c 87       	std	Y+12, r25	; 0x0c
    2a82:	ad 87       	std	Y+13, r26	; 0x0d
    2a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a ef       	ldi	r20, 0xFA	; 250
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	8f 83       	std	Y+7, r24	; 0x07
    2aa0:	98 87       	std	Y+8, r25	; 0x08
    2aa2:	a9 87       	std	Y+9, r26	; 0x09
    2aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa8:	78 85       	ldd	r23, Y+8	; 0x08
    2aaa:	89 85       	ldd	r24, Y+9	; 0x09
    2aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	2c f4       	brge	.+10     	; 0x2ac8 <LCD_JMP_Bottom_Left+0x6c>
		__ticks = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	9e 83       	std	Y+6, r25	; 0x06
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	3f c0       	rjmp	.+126    	; 0x2b46 <LCD_JMP_Bottom_Left+0xea>
	else if (__tmp > 65535)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	3f ef       	ldi	r19, 0xFF	; 255
    2ad4:	4f e7       	ldi	r20, 0x7F	; 127
    2ad6:	57 e4       	ldi	r21, 0x47	; 71
    2ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2adc:	18 16       	cp	r1, r24
    2ade:	4c f5       	brge	.+82     	; 0x2b32 <LCD_JMP_Bottom_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e2       	ldi	r20, 0x20	; 32
    2aee:	51 e4       	ldi	r21, 0x41	; 65
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	9e 83       	std	Y+6, r25	; 0x06
    2b06:	8d 83       	std	Y+5, r24	; 0x05
    2b08:	0f c0       	rjmp	.+30     	; 0x2b28 <LCD_JMP_Bottom_Left+0xcc>
    2b0a:	88 ec       	ldi	r24, 0xC8	; 200
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
    2b10:	8b 83       	std	Y+3, r24	; 0x03
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <LCD_JMP_Bottom_Left+0xba>
    2b1a:	9c 83       	std	Y+4, r25	; 0x04
    2b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b20:	9e 81       	ldd	r25, Y+6	; 0x06
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	69 f7       	brne	.-38     	; 0x2b0a <LCD_JMP_Bottom_Left+0xae>
    2b30:	14 c0       	rjmp	.+40     	; 0x2b5a <LCD_JMP_Bottom_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	9a 83       	std	Y+2, r25	; 0x02
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <LCD_JMP_Bottom_Left+0xf6>
    2b56:	9a 83       	std	Y+2, r25	; 0x02
    2b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2b5a:	2e 96       	adiw	r28, 0x0e	; 14
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <LCD_JMP_UP_Left>:


void LCD_JMP_UP_Left(void)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	2e 97       	sbiw	r28, 0x0e	; 14
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_JMP_TOP_LEFT);
    2b80:	80 e8       	ldi	r24, 0x80	; 128
    2b82:	0e 94 3a 0c 	call	0x1874	; 0x1874 <LCD_Write_CMD>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e4       	ldi	r27, 0x40	; 64
    2b8e:	8b 87       	std	Y+11, r24	; 0x0b
    2b90:	9c 87       	std	Y+12, r25	; 0x0c
    2b92:	ad 87       	std	Y+13, r26	; 0x0d
    2b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	4a ef       	ldi	r20, 0xFA	; 250
    2ba4:	54 e4       	ldi	r21, 0x44	; 68
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	8f 83       	std	Y+7, r24	; 0x07
    2bb0:	98 87       	std	Y+8, r25	; 0x08
    2bb2:	a9 87       	std	Y+9, r26	; 0x09
    2bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb8:	78 85       	ldd	r23, Y+8	; 0x08
    2bba:	89 85       	ldd	r24, Y+9	; 0x09
    2bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e8       	ldi	r20, 0x80	; 128
    2bc4:	5f e3       	ldi	r21, 0x3F	; 63
    2bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bca:	88 23       	and	r24, r24
    2bcc:	2c f4       	brge	.+10     	; 0x2bd8 <LCD_JMP_UP_Left+0x6c>
		__ticks = 1;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	3f c0       	rjmp	.+126    	; 0x2c56 <LCD_JMP_UP_Left+0xea>
	else if (__tmp > 65535)
    2bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bda:	78 85       	ldd	r23, Y+8	; 0x08
    2bdc:	89 85       	ldd	r24, Y+9	; 0x09
    2bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	3f ef       	ldi	r19, 0xFF	; 255
    2be4:	4f e7       	ldi	r20, 0x7F	; 127
    2be6:	57 e4       	ldi	r21, 0x47	; 71
    2be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bec:	18 16       	cp	r1, r24
    2bee:	4c f5       	brge	.+82     	; 0x2c42 <LCD_JMP_UP_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e2       	ldi	r20, 0x20	; 32
    2bfe:	51 e4       	ldi	r21, 0x41	; 65
    2c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	0f c0       	rjmp	.+30     	; 0x2c38 <LCD_JMP_UP_Left+0xcc>
    2c1a:	88 ec       	ldi	r24, 0xC8	; 200
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	9c 81       	ldd	r25, Y+4	; 0x04
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <LCD_JMP_UP_Left+0xba>
    2c2a:	9c 83       	std	Y+4, r25	; 0x04
    2c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c30:	9e 81       	ldd	r25, Y+6	; 0x06
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	69 f7       	brne	.-38     	; 0x2c1a <LCD_JMP_UP_Left+0xae>
    2c40:	14 c0       	rjmp	.+40     	; 0x2c6a <LCD_JMP_UP_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c42:	6f 81       	ldd	r22, Y+7	; 0x07
    2c44:	78 85       	ldd	r23, Y+8	; 0x08
    2c46:	89 85       	ldd	r24, Y+9	; 0x09
    2c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	8d 81       	ldd	r24, Y+5	; 0x05
    2c58:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	9a 81       	ldd	r25, Y+2	; 0x02
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <LCD_JMP_UP_Left+0xf6>
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2c6a:	2e 96       	adiw	r28, 0x0e	; 14
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <Keypad_Int>:
#include "keypad_config.h"



void Keypad_Int(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Set Row and Columns as Input
	 */

	DIO_u8Set_Pin_Dir(PORTC1,PINC1,INPUT);
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC2,PINC2,INPUT);
    2c8e:	83 e0       	ldi	r24, 0x03	; 3
    2c90:	61 e0       	ldi	r22, 0x01	; 1
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC3,PINC3,INPUT);
    2c98:	83 e0       	ldi	r24, 0x03	; 3
    2c9a:	62 e0       	ldi	r22, 0x02	; 2
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC4,PINC4,INPUT);
    2ca2:	83 e0       	ldi	r24, 0x03	; 3
    2ca4:	63 e0       	ldi	r22, 0x03	; 3
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR1,PINR1,OUTPUT);
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	64 e0       	ldi	r22, 0x04	; 4
    2cb0:	41 e0       	ldi	r20, 0x01	; 1
    2cb2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR2,PINR2,OUTPUT);
    2cb6:	83 e0       	ldi	r24, 0x03	; 3
    2cb8:	65 e0       	ldi	r22, 0x05	; 5
    2cba:	41 e0       	ldi	r20, 0x01	; 1
    2cbc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR3,PINR3,OUTPUT);
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	66 e0       	ldi	r22, 0x06	; 6
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR4,PINR4,OUTPUT);
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	67 e0       	ldi	r22, 0x07	; 7
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>

	/*
	 * 	Set PULL UP
	 */

	DIO_u8Set_Pin_Val(PORTC1,PINC1,PUE);
    2cd4:	83 e0       	ldi	r24, 0x03	; 3
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC2,PINC2,PUE);
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	61 e0       	ldi	r22, 0x01	; 1
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC3,PINC3,PUE);
    2ce8:	83 e0       	ldi	r24, 0x03	; 3
    2cea:	62 e0       	ldi	r22, 0x02	; 2
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC4,PINC4,PUE);
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	63 e0       	ldi	r22, 0x03	; 3
    2cf6:	41 e0       	ldi	r20, 0x01	; 1
    2cf8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR1,PINR1,HIGH);
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
    2cfe:	64 e0       	ldi	r22, 0x04	; 4
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR2,PINR2,HIGH);
    2d06:	83 e0       	ldi	r24, 0x03	; 3
    2d08:	65 e0       	ldi	r22, 0x05	; 5
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR3,PINR3,HIGH);
    2d10:	83 e0       	ldi	r24, 0x03	; 3
    2d12:	66 e0       	ldi	r22, 0x06	; 6
    2d14:	41 e0       	ldi	r20, 0x01	; 1
    2d16:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR4,PINR4,HIGH);
    2d1a:	83 e0       	ldi	r24, 0x03	; 3
    2d1c:	67 e0       	ldi	r22, 0x07	; 7
    2d1e:	41 e0       	ldi	r20, 0x01	; 1
    2d20:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>

}
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <Keypad_u8Selector>:



uint8 Keypad_u8Selector(void)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	a9 97       	sbiw	r28, 0x29	; 41
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
	uint8 port_col[4]={PORTC1,PORTC2,PORTC3,PORTC4};
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	8c 83       	std	Y+4, r24	; 0x04
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	8e 83       	std	Y+6, r24	; 0x06
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	8f 83       	std	Y+7, r24	; 0x07
	uint8 port_row[4]={PORTR1,PORTR2,PORTR3,PORTR4};
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	88 87       	std	Y+8, r24	; 0x08
    2d52:	83 e0       	ldi	r24, 0x03	; 3
    2d54:	89 87       	std	Y+9, r24	; 0x09
    2d56:	83 e0       	ldi	r24, 0x03	; 3
    2d58:	8a 87       	std	Y+10, r24	; 0x0a
    2d5a:	83 e0       	ldi	r24, 0x03	; 3
    2d5c:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 pin_col[4]={PINC1,PINC2,PINC3,PINC4};
    2d5e:	1c 86       	std	Y+12, r1	; 0x0c
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	8d 87       	std	Y+13, r24	; 0x0d
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	8e 87       	std	Y+14, r24	; 0x0e
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 pin_row[4]={PINR1,PINR2,PINR3,PINR4};
    2d6c:	84 e0       	ldi	r24, 0x04	; 4
    2d6e:	88 8b       	std	Y+16, r24	; 0x10
    2d70:	85 e0       	ldi	r24, 0x05	; 5
    2d72:	89 8b       	std	Y+17, r24	; 0x11
    2d74:	86 e0       	ldi	r24, 0x06	; 6
    2d76:	8a 8b       	std	Y+18, r24	; 0x12
    2d78:	87 e0       	ldi	r24, 0x07	; 7
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 Local_Col_Count,Local_Row_Count;
	uint8 Local_Button_Status;
	uint8 Local_Return_Status=KEY_NOT_PRESSED;
    2d7c:	8f ef       	ldi	r24, 0xFF	; 255
    2d7e:	89 83       	std	Y+1, r24	; 0x01
				13,	//ROW 3 Col 0
				14,	//ROW 3 Col 1
				15,	//ROW 3 Col 2
				16,	//ROW 3 Col 3
			}
	};
    2d80:	ce 01       	movw	r24, r28
    2d82:	45 96       	adiw	r24, 0x15	; 21
    2d84:	9e a3       	std	Y+38, r25	; 0x26
    2d86:	8d a3       	std	Y+37, r24	; 0x25
    2d88:	e4 eb       	ldi	r30, 0xB4	; 180
    2d8a:	f1 e0       	ldi	r31, 0x01	; 1
    2d8c:	f8 a7       	std	Y+40, r31	; 0x28
    2d8e:	ef a3       	std	Y+39, r30	; 0x27
    2d90:	f0 e1       	ldi	r31, 0x10	; 16
    2d92:	f9 a7       	std	Y+41, r31	; 0x29
    2d94:	ef a1       	ldd	r30, Y+39	; 0x27
    2d96:	f8 a5       	ldd	r31, Y+40	; 0x28
    2d98:	00 80       	ld	r0, Z
    2d9a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d9c:	98 a5       	ldd	r25, Y+40	; 0x28
    2d9e:	01 96       	adiw	r24, 0x01	; 1
    2da0:	98 a7       	std	Y+40, r25	; 0x28
    2da2:	8f a3       	std	Y+39, r24	; 0x27
    2da4:	ed a1       	ldd	r30, Y+37	; 0x25
    2da6:	fe a1       	ldd	r31, Y+38	; 0x26
    2da8:	00 82       	st	Z, r0
    2daa:	8d a1       	ldd	r24, Y+37	; 0x25
    2dac:	9e a1       	ldd	r25, Y+38	; 0x26
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	9e a3       	std	Y+38, r25	; 0x26
    2db2:	8d a3       	std	Y+37, r24	; 0x25
    2db4:	99 a5       	ldd	r25, Y+41	; 0x29
    2db6:	91 50       	subi	r25, 0x01	; 1
    2db8:	99 a7       	std	Y+41, r25	; 0x29
    2dba:	e9 a5       	ldd	r30, Y+41	; 0x29
    2dbc:	ee 23       	and	r30, r30
    2dbe:	51 f7       	brne	.-44     	; 0x2d94 <Keypad_u8Selector+0x6a>


	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
    2dc0:	1a 82       	std	Y+2, r1	; 0x02
    2dc2:	89 c0       	rjmp	.+274    	; 0x2ed6 <Keypad_u8Selector+0x1ac>
	{

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],LOW);
    2dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	ce 01       	movw	r24, r28
    2dcc:	08 96       	adiw	r24, 0x08	; 8
    2dce:	fc 01       	movw	r30, r24
    2dd0:	e2 0f       	add	r30, r18
    2dd2:	f3 1f       	adc	r31, r19
    2dd4:	40 81       	ld	r20, Z
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	ce 01       	movw	r24, r28
    2dde:	40 96       	adiw	r24, 0x10	; 16
    2de0:	fc 01       	movw	r30, r24
    2de2:	e2 0f       	add	r30, r18
    2de4:	f3 1f       	adc	r31, r19
    2de6:	90 81       	ld	r25, Z
    2de8:	84 2f       	mov	r24, r20
    2dea:	69 2f       	mov	r22, r25
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
		for(Local_Col_Count=0;Local_Col_Count<KEYPAD_COLS;Local_Col_Count++)
    2df2:	1b 82       	std	Y+3, r1	; 0x03
    2df4:	52 c0       	rjmp	.+164    	; 0x2e9a <Keypad_u8Selector+0x170>
		{

			DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	ce 01       	movw	r24, r28
    2dfe:	04 96       	adiw	r24, 0x04	; 4
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	40 81       	ld	r20, Z
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	ce 01       	movw	r24, r28
    2e10:	0c 96       	adiw	r24, 0x0c	; 12
    2e12:	fc 01       	movw	r30, r24
    2e14:	e2 0f       	add	r30, r18
    2e16:	f3 1f       	adc	r31, r19
    2e18:	90 81       	ld	r25, Z
    2e1a:	9e 01       	movw	r18, r28
    2e1c:	2c 5e       	subi	r18, 0xEC	; 236
    2e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e20:	84 2f       	mov	r24, r20
    2e22:	69 2f       	mov	r22, r25
    2e24:	a9 01       	movw	r20, r18
    2e26:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <DIO_u8Get_Pin_Val>
			if(Local_Button_Status==0)
    2e2a:	8c 89       	ldd	r24, Y+20	; 0x14
    2e2c:	88 23       	and	r24, r24
    2e2e:	91 f5       	brne	.+100    	; 0x2e94 <Keypad_u8Selector+0x16a>
			{
				Local_Return_Status=KEYPAD_au8KeyVal[Local_Row_Count][Local_Col_Count];
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	48 2f       	mov	r20, r24
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	22 0f       	add	r18, r18
    2e3e:	33 1f       	adc	r19, r19
    2e40:	22 0f       	add	r18, r18
    2e42:	33 1f       	adc	r19, r19
    2e44:	ce 01       	movw	r24, r28
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	82 0f       	add	r24, r18
    2e4a:	93 1f       	adc	r25, r19
    2e4c:	84 0f       	add	r24, r20
    2e4e:	95 1f       	adc	r25, r21
    2e50:	fc 01       	movw	r30, r24
    2e52:	74 96       	adiw	r30, 0x14	; 20
    2e54:	80 81       	ld	r24, Z
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	1a c0       	rjmp	.+52     	; 0x2e8e <Keypad_u8Selector+0x164>
#if KEYPAD_MODE==KEYPAD_POLLING
				while(Local_Button_Status==0)
				{
					DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	ce 01       	movw	r24, r28
    2e62:	04 96       	adiw	r24, 0x04	; 4
    2e64:	fc 01       	movw	r30, r24
    2e66:	e2 0f       	add	r30, r18
    2e68:	f3 1f       	adc	r31, r19
    2e6a:	40 81       	ld	r20, Z
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	ce 01       	movw	r24, r28
    2e74:	0c 96       	adiw	r24, 0x0c	; 12
    2e76:	fc 01       	movw	r30, r24
    2e78:	e2 0f       	add	r30, r18
    2e7a:	f3 1f       	adc	r31, r19
    2e7c:	90 81       	ld	r25, Z
    2e7e:	9e 01       	movw	r18, r28
    2e80:	2c 5e       	subi	r18, 0xEC	; 236
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	84 2f       	mov	r24, r20
    2e86:	69 2f       	mov	r22, r25
    2e88:	a9 01       	movw	r20, r18
    2e8a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <DIO_u8Get_Pin_Val>
			DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
			if(Local_Button_Status==0)
			{
				Local_Return_Status=KEYPAD_au8KeyVal[Local_Row_Count][Local_Col_Count];
#if KEYPAD_MODE==KEYPAD_POLLING
				while(Local_Button_Status==0)
    2e8e:	8c 89       	ldd	r24, Y+20	; 0x14
    2e90:	88 23       	and	r24, r24
    2e92:	19 f3       	breq	.-58     	; 0x2e5a <Keypad_u8Selector+0x130>

	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
	{

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],LOW);
		for(Local_Col_Count=0;Local_Col_Count<KEYPAD_COLS;Local_Col_Count++)
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	8f 5f       	subi	r24, 0xFF	; 255
    2e98:	8b 83       	std	Y+3, r24	; 0x03
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	84 30       	cpi	r24, 0x04	; 4
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <Keypad_u8Selector+0x178>
    2ea0:	aa cf       	rjmp	.-172    	; 0x2df6 <Keypad_u8Selector+0xcc>

			}

		}

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],HIGH);
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	08 96       	adiw	r24, 0x08	; 8
    2eac:	fc 01       	movw	r30, r24
    2eae:	e2 0f       	add	r30, r18
    2eb0:	f3 1f       	adc	r31, r19
    2eb2:	40 81       	ld	r20, Z
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	ce 01       	movw	r24, r28
    2ebc:	40 96       	adiw	r24, 0x10	; 16
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e2 0f       	add	r30, r18
    2ec2:	f3 1f       	adc	r31, r19
    2ec4:	90 81       	ld	r25, Z
    2ec6:	84 2f       	mov	r24, r20
    2ec8:	69 2f       	mov	r22, r25
    2eca:	41 e0       	ldi	r20, 0x01	; 1
    2ecc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
				16,	//ROW 3 Col 3
			}
	};


	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	8a 83       	std	Y+2, r24	; 0x02
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	84 30       	cpi	r24, 0x04	; 4
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <Keypad_u8Selector+0x1b4>
    2edc:	73 cf       	rjmp	.-282    	; 0x2dc4 <Keypad_u8Selector+0x9a>

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],HIGH);
	}


	return	Local_Return_Status;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee0:	a9 96       	adiw	r28, 0x29	; 41
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <Button_String_u8Set_Dir>:
 */
#include "../../SERV/stdtypes.h"
#include "../../MCAL/DIO/dio_int.h"
#include "button_cfg.h"
void Button_String_u8Set_Dir(void)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(FULL_BUTTON_PORT,FULL_INPUT);
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_u8Set_Port_Dir>
	DIO_u8Set_Port_Val(FULL_BUTTON_PORT,FULL_PUE);
    2f02:	83 e0       	ldi	r24, 0x03	; 3
    2f04:	6f ef       	ldi	r22, 0xFF	; 255
    2f06:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8Set_Port_Val>
}
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <Button_Pin_u8Set_Dir>:
void Button_Pin_u8Set_Dir(void)
{
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Pin_Dir(BUTTON_PORT,BUTTON_PIN,FULL_INPUT);
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Val(BUTTON_PORT,BUTTON_PIN,PUE);
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
}
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <Button_Pin_u8Get_Val>:
//{
//
//	DIO_u8Get_Port_Val(u8PortIdCopy,*u8pValCopy);
//}
void Button_Pin_u8Get_Val(uint8 * u8pValCopy)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <Button_Pin_u8Get_Val+0x6>
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Get_Pin_Val(BUTTON_PORT,BUTTON_PIN,u8pValCopy);
    2f40:	29 81       	ldd	r18, Y+1	; 0x01
    2f42:	3a 81       	ldd	r19, Y+2	; 0x02
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	61 e0       	ldi	r22, 0x01	; 1
    2f48:	a9 01       	movw	r20, r18
    2f4a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <DIO_u8Get_Pin_Val>
}
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <Seven_Seg_u8Set_Dir>:

const uint8 u8SevenSegArray[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};


void  Seven_Seg_u8Set_Dir(void)
{
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(SEVEN_SEGMENT_PORT,FULL_OUTPUT);
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	6f ef       	ldi	r22, 0xFF	; 255
    2f64:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_u8Set_Port_Dir>
}
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <Seven_Seg_u8Set_Val>:
void Seven_Seg_u8Set_Val(uint8 u8ValCopy)
{
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	0f 92       	push	r0
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	89 83       	std	Y+1, r24	; 0x01
	if((u8ValCopy>=0)&&(u8ValCopy<=9))
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	8a 30       	cpi	r24, 0x0A	; 10
    2f7e:	58 f4       	brcc	.+22     	; 0x2f96 <Seven_Seg_u8Set_Val+0x28>
	{
		DIO_u8Set_Port_Val(SEVEN_SEGMENT_PORT,u8SevenSegArray[u8ValCopy]);
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	fc 01       	movw	r30, r24
    2f88:	ec 53       	subi	r30, 0x3C	; 60
    2f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8c:	90 81       	ld	r25, Z
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	69 2f       	mov	r22, r25
    2f92:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8Set_Port_Val>
	}
	else
	{

	}
}
    2f96:	0f 90       	pop	r0
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	08 95       	ret

00002f9e <__vector_6>:
//ISR(TIMER1_OVF_vect)
//{
//	t1ovf++;
//}
ISR(TIMER1_CAPT_vect)
{
    2f9e:	1f 92       	push	r1
    2fa0:	0f 92       	push	r0
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	0f 92       	push	r0
    2fa6:	11 24       	eor	r1, r1
    2fa8:	2f 93       	push	r18
    2faa:	3f 93       	push	r19
    2fac:	4f 93       	push	r20
    2fae:	5f 93       	push	r21
    2fb0:	8f 93       	push	r24
    2fb2:	9f 93       	push	r25
    2fb4:	af 93       	push	r26
    2fb6:	bf 93       	push	r27
    2fb8:	ef 93       	push	r30
    2fba:	ff 93       	push	r31
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
	static uint8 state=0;
	if(state ==0)
    2fc4:	80 91 d7 01 	lds	r24, 0x01D7
    2fc8:	88 23       	and	r24, r24
    2fca:	89 f4       	brne	.+34     	; 0x2fee <__vector_6+0x50>
	{
		ICR1=0;
    2fcc:	e6 e4       	ldi	r30, 0x46	; 70
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	11 82       	std	Z+1, r1	; 0x01
    2fd2:	10 82       	st	Z, r1
		t1ovf=0;
    2fd4:	10 92 ce 01 	sts	0x01CE, r1
		SET_BIT(TCCR1B,ICES1);
    2fd8:	ae e4       	ldi	r26, 0x4E	; 78
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	ee e4       	ldi	r30, 0x4E	; 78
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	80 64       	ori	r24, 0x40	; 64
    2fe4:	8c 93       	st	X, r24
		state=1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	80 93 d7 01 	sts	0x01D7, r24
    2fec:	5b c0       	rjmp	.+182    	; 0x30a4 <__vector_6+0x106>

	}
	else if(state==1)
    2fee:	80 91 d7 01 	lds	r24, 0x01D7
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	39 f5       	brne	.+78     	; 0x3044 <__vector_6+0xa6>
	{

		ton_tick=(ICR1+(t1ovf*65536));
    2ff6:	e6 e4       	ldi	r30, 0x46	; 70
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	9c 01       	movw	r18, r24
    3000:	40 e0       	ldi	r20, 0x00	; 0
    3002:	50 e0       	ldi	r21, 0x00	; 0
    3004:	80 91 ce 01 	lds	r24, 0x01CE
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	dc 01       	movw	r26, r24
    3012:	99 27       	eor	r25, r25
    3014:	88 27       	eor	r24, r24
    3016:	82 0f       	add	r24, r18
    3018:	93 1f       	adc	r25, r19
    301a:	a4 1f       	adc	r26, r20
    301c:	b5 1f       	adc	r27, r21
    301e:	80 93 cf 01 	sts	0x01CF, r24
    3022:	90 93 d0 01 	sts	0x01D0, r25
    3026:	a0 93 d1 01 	sts	0x01D1, r26
    302a:	b0 93 d2 01 	sts	0x01D2, r27
		SET_BIT(TCCR1B,ICES1);
    302e:	ae e4       	ldi	r26, 0x4E	; 78
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	ee e4       	ldi	r30, 0x4E	; 78
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	80 64       	ori	r24, 0x40	; 64
    303a:	8c 93       	st	X, r24

		state=2;
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	80 93 d7 01 	sts	0x01D7, r24
    3042:	30 c0       	rjmp	.+96     	; 0x30a4 <__vector_6+0x106>
	}
	else if(state==2)
    3044:	80 91 d7 01 	lds	r24, 0x01D7
    3048:	82 30       	cpi	r24, 0x02	; 2
    304a:	61 f5       	brne	.+88     	; 0x30a4 <__vector_6+0x106>
	{
		ttot_tick=(ICR1+(t1ovf*65536));
    304c:	e6 e4       	ldi	r30, 0x46	; 70
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	9c 01       	movw	r18, r24
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	80 91 ce 01 	lds	r24, 0x01CE
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	a0 e0       	ldi	r26, 0x00	; 0
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	dc 01       	movw	r26, r24
    3068:	99 27       	eor	r25, r25
    306a:	88 27       	eor	r24, r24
    306c:	82 0f       	add	r24, r18
    306e:	93 1f       	adc	r25, r19
    3070:	a4 1f       	adc	r26, r20
    3072:	b5 1f       	adc	r27, r21
    3074:	80 93 d3 01 	sts	0x01D3, r24
    3078:	90 93 d4 01 	sts	0x01D4, r25
    307c:	a0 93 d5 01 	sts	0x01D5, r26
    3080:	b0 93 d6 01 	sts	0x01D6, r27
		CLR_BIT(TCCR1B,ICES1);
    3084:	ae e4       	ldi	r26, 0x4E	; 78
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	ee e4       	ldi	r30, 0x4E	; 78
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	8f 7b       	andi	r24, 0xBF	; 191
    3090:	8c 93       	st	X, r24
		ICR1=0;
    3092:	e6 e4       	ldi	r30, 0x46	; 70
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	11 82       	std	Z+1, r1	; 0x01
    3098:	10 82       	st	Z, r1

		t1ovf=0;
    309a:	10 92 ce 01 	sts	0x01CE, r1
		state=1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	80 93 d7 01 	sts	0x01D7, r24
	}
}
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	ff 91       	pop	r31
    30aa:	ef 91       	pop	r30
    30ac:	bf 91       	pop	r27
    30ae:	af 91       	pop	r26
    30b0:	9f 91       	pop	r25
    30b2:	8f 91       	pop	r24
    30b4:	5f 91       	pop	r21
    30b6:	4f 91       	pop	r20
    30b8:	3f 91       	pop	r19
    30ba:	2f 91       	pop	r18
    30bc:	0f 90       	pop	r0
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	0f 90       	pop	r0
    30c2:	1f 90       	pop	r1
    30c4:	18 95       	reti

000030c6 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    30c6:	1f 92       	push	r1
    30c8:	0f 92       	push	r0
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	0f 92       	push	r0
    30ce:	11 24       	eor	r1, r1
    30d0:	8f 93       	push	r24
    30d2:	ef 93       	push	r30
    30d4:	ff 93       	push	r31
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
//		if (count==0)
//		{
//			state=1;
//		}
//	}
	OCR0=127;
    30de:	ec e5       	ldi	r30, 0x5C	; 92
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	8f e7       	ldi	r24, 0x7F	; 127
    30e4:	80 83       	st	Z, r24
//	LCD_WRITE_STRING("INPUT: ");
//	LCD_Write_INT(OCR0);
//	_delay_ms(50);


}
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	ff 91       	pop	r31
    30ec:	ef 91       	pop	r30
    30ee:	8f 91       	pop	r24
    30f0:	0f 90       	pop	r0
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	0f 90       	pop	r0
    30f6:	1f 90       	pop	r1
    30f8:	18 95       	reti

000030fa <timer1_init>:
void timer1_init(void)
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,WGM10);
    3102:	af e4       	ldi	r26, 0x4F	; 79
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	ef e4       	ldi	r30, 0x4F	; 79
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	8e 7f       	andi	r24, 0xFE	; 254
    310e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM11);
    3110:	af e4       	ldi	r26, 0x4F	; 79
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ef e4       	ldi	r30, 0x4F	; 79
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	8d 7f       	andi	r24, 0xFD	; 253
    311c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1A0);
    311e:	af e4       	ldi	r26, 0x4F	; 79
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	ef e4       	ldi	r30, 0x4F	; 79
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	8f 7b       	andi	r24, 0xBF	; 191
    312a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1A1);
    312c:	af e4       	ldi	r26, 0x4F	; 79
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	ef e4       	ldi	r30, 0x4F	; 79
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	8f 77       	andi	r24, 0x7F	; 127
    3138:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1B0);
    313a:	af e4       	ldi	r26, 0x4F	; 79
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	ef e4       	ldi	r30, 0x4F	; 79
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	8f 7e       	andi	r24, 0xEF	; 239
    3146:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1B1);
    3148:	af e4       	ldi	r26, 0x4F	; 79
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	ef e4       	ldi	r30, 0x4F	; 79
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	8f 7d       	andi	r24, 0xDF	; 223
    3154:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM13);
    3156:	ae e4       	ldi	r26, 0x4E	; 78
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	ee e4       	ldi	r30, 0x4E	; 78
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	8f 7e       	andi	r24, 0xEF	; 239
    3162:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM12);
    3164:	ae e4       	ldi	r26, 0x4E	; 78
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	ee e4       	ldi	r30, 0x4E	; 78
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	87 7f       	andi	r24, 0xF7	; 247
    3170:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,ICNC1);
    3172:	ae e4       	ldi	r26, 0x4E	; 78
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	ee e4       	ldi	r30, 0x4E	; 78
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8f 77       	andi	r24, 0x7F	; 127
    317e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,ICES1);
    3180:	ae e4       	ldi	r26, 0x4E	; 78
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ee e4       	ldi	r30, 0x4E	; 78
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 64       	ori	r24, 0x40	; 64
    318c:	8c 93       	st	X, r24
	TCNT1=0;
    318e:	ec e4       	ldi	r30, 0x4C	; 76
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	11 82       	std	Z+1, r1	; 0x01
    3194:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TICIE1);
    3196:	a9 e5       	ldi	r26, 0x59	; 89
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e9 e5       	ldi	r30, 0x59	; 89
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	80 62       	ori	r24, 0x20	; 32
    31a2:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,CS10);
    31a4:	ae e4       	ldi	r26, 0x4E	; 78
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	ee e4       	ldi	r30, 0x4E	; 78
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	81 60       	ori	r24, 0x01	; 1
    31b0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS12);
    31b2:	ae e4       	ldi	r26, 0x4E	; 78
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	ee e4       	ldi	r30, 0x4E	; 78
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8b 7f       	andi	r24, 0xFB	; 251
    31be:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS11);
    31c0:	ae e4       	ldi	r26, 0x4E	; 78
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	ee e4       	ldi	r30, 0x4E	; 78
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	8d 7f       	andi	r24, 0xFD	; 253
    31cc:	8c 93       	st	X, r24

}
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <main>:

int main(void)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62


	LCD_Init();
    31dc:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_Init>
	DIO_u8Set_Pin_Dir(PORT_B,PIN_3,OUTPUT);
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	63 e0       	ldi	r22, 0x03	; 3
    31e4:	41 e0       	ldi	r20, 0x01	; 1
    31e6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	Timer_0_Init();
    31ea:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <Timer_0_Init>
	DIO_u8Set_Pin_Dir(PORT_D,PIN_6,INPUT);
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	66 e0       	ldi	r22, 0x06	; 6
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Val(PORT_D,PIN_6,PUE);
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	66 e0       	ldi	r22, 0x06	; 6
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_u8Set_Pin_Val>
//	TIFR = (1<<ICF1); /* Clear ICF (Input Capture flag) flag */
//	SET_BIT(TIMSK,TOIE1);
	timer1_init();
    3202:	0e 94 7d 18 	call	0x30fa	; 0x30fa <timer1_init>

	while(1)

	{
		LCD_JMP_UP_Left();
    3206:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_JMP_UP_Left>
		LCD_WRITE_STRING("TON:");
    320a:	80 e6       	ldi	r24, 0x60	; 96
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_WRITE_STRING>
		LCD_Write_INT(ton_tick);
    3212:	80 91 cf 01 	lds	r24, 0x01CF
    3216:	90 91 d0 01 	lds	r25, 0x01D0
    321a:	a0 91 d1 01 	lds	r26, 0x01D1
    321e:	b0 91 d2 01 	lds	r27, 0x01D2
    3222:	bc 01       	movw	r22, r24
    3224:	cd 01       	movw	r24, r26
    3226:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_Write_INT>
		LCD_JMP_Bottom_Left();
    322a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_JMP_Bottom_Left>
		LCD_WRITE_STRING("T_tot:");
    322e:	85 e6       	ldi	r24, 0x65	; 101
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LCD_WRITE_STRING>
		LCD_Write_INT(ttot_tick);
    3236:	80 91 d3 01 	lds	r24, 0x01D3
    323a:	90 91 d4 01 	lds	r25, 0x01D4
    323e:	a0 91 d5 01 	lds	r26, 0x01D5
    3242:	b0 91 d6 01 	lds	r27, 0x01D6
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 ed 12 	call	0x25da	; 0x25da <LCD_Write_INT>
    324e:	db cf       	rjmp	.-74     	; 0x3206 <main+0x32>

00003250 <__prologue_saves__>:
    3250:	2f 92       	push	r2
    3252:	3f 92       	push	r3
    3254:	4f 92       	push	r4
    3256:	5f 92       	push	r5
    3258:	6f 92       	push	r6
    325a:	7f 92       	push	r7
    325c:	8f 92       	push	r8
    325e:	9f 92       	push	r9
    3260:	af 92       	push	r10
    3262:	bf 92       	push	r11
    3264:	cf 92       	push	r12
    3266:	df 92       	push	r13
    3268:	ef 92       	push	r14
    326a:	ff 92       	push	r15
    326c:	0f 93       	push	r16
    326e:	1f 93       	push	r17
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	ca 1b       	sub	r28, r26
    327a:	db 0b       	sbc	r29, r27
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	09 94       	ijmp

00003288 <__epilogue_restores__>:
    3288:	2a 88       	ldd	r2, Y+18	; 0x12
    328a:	39 88       	ldd	r3, Y+17	; 0x11
    328c:	48 88       	ldd	r4, Y+16	; 0x10
    328e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3290:	6e 84       	ldd	r6, Y+14	; 0x0e
    3292:	7d 84       	ldd	r7, Y+13	; 0x0d
    3294:	8c 84       	ldd	r8, Y+12	; 0x0c
    3296:	9b 84       	ldd	r9, Y+11	; 0x0b
    3298:	aa 84       	ldd	r10, Y+10	; 0x0a
    329a:	b9 84       	ldd	r11, Y+9	; 0x09
    329c:	c8 84       	ldd	r12, Y+8	; 0x08
    329e:	df 80       	ldd	r13, Y+7	; 0x07
    32a0:	ee 80       	ldd	r14, Y+6	; 0x06
    32a2:	fd 80       	ldd	r15, Y+5	; 0x05
    32a4:	0c 81       	ldd	r16, Y+4	; 0x04
    32a6:	1b 81       	ldd	r17, Y+3	; 0x03
    32a8:	aa 81       	ldd	r26, Y+2	; 0x02
    32aa:	b9 81       	ldd	r27, Y+1	; 0x01
    32ac:	ce 0f       	add	r28, r30
    32ae:	d1 1d       	adc	r29, r1
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	ed 01       	movw	r28, r26
    32bc:	08 95       	ret

000032be <itoa>:
    32be:	fb 01       	movw	r30, r22
    32c0:	9f 01       	movw	r18, r30
    32c2:	e8 94       	clt
    32c4:	42 30       	cpi	r20, 0x02	; 2
    32c6:	c4 f0       	brlt	.+48     	; 0x32f8 <itoa+0x3a>
    32c8:	45 32       	cpi	r20, 0x25	; 37
    32ca:	b4 f4       	brge	.+44     	; 0x32f8 <itoa+0x3a>
    32cc:	4a 30       	cpi	r20, 0x0A	; 10
    32ce:	29 f4       	brne	.+10     	; 0x32da <itoa+0x1c>
    32d0:	97 fb       	bst	r25, 7
    32d2:	1e f4       	brtc	.+6      	; 0x32da <itoa+0x1c>
    32d4:	90 95       	com	r25
    32d6:	81 95       	neg	r24
    32d8:	9f 4f       	sbci	r25, 0xFF	; 255
    32da:	64 2f       	mov	r22, r20
    32dc:	77 27       	eor	r23, r23
    32de:	0e 94 90 19 	call	0x3320	; 0x3320 <__udivmodhi4>
    32e2:	80 5d       	subi	r24, 0xD0	; 208
    32e4:	8a 33       	cpi	r24, 0x3A	; 58
    32e6:	0c f0       	brlt	.+2      	; 0x32ea <itoa+0x2c>
    32e8:	89 5d       	subi	r24, 0xD9	; 217
    32ea:	81 93       	st	Z+, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	a1 f7       	brne	.-24     	; 0x32da <itoa+0x1c>
    32f2:	16 f4       	brtc	.+4      	; 0x32f8 <itoa+0x3a>
    32f4:	5d e2       	ldi	r21, 0x2D	; 45
    32f6:	51 93       	st	Z+, r21
    32f8:	10 82       	st	Z, r1
    32fa:	c9 01       	movw	r24, r18
    32fc:	0c 94 80 19 	jmp	0x3300	; 0x3300 <strrev>

00003300 <strrev>:
    3300:	dc 01       	movw	r26, r24
    3302:	fc 01       	movw	r30, r24
    3304:	67 2f       	mov	r22, r23
    3306:	71 91       	ld	r23, Z+
    3308:	77 23       	and	r23, r23
    330a:	e1 f7       	brne	.-8      	; 0x3304 <strrev+0x4>
    330c:	32 97       	sbiw	r30, 0x02	; 2
    330e:	04 c0       	rjmp	.+8      	; 0x3318 <strrev+0x18>
    3310:	7c 91       	ld	r23, X
    3312:	6d 93       	st	X+, r22
    3314:	70 83       	st	Z, r23
    3316:	62 91       	ld	r22, -Z
    3318:	ae 17       	cp	r26, r30
    331a:	bf 07       	cpc	r27, r31
    331c:	c8 f3       	brcs	.-14     	; 0x3310 <strrev+0x10>
    331e:	08 95       	ret

00003320 <__udivmodhi4>:
    3320:	aa 1b       	sub	r26, r26
    3322:	bb 1b       	sub	r27, r27
    3324:	51 e1       	ldi	r21, 0x11	; 17
    3326:	07 c0       	rjmp	.+14     	; 0x3336 <__udivmodhi4_ep>

00003328 <__udivmodhi4_loop>:
    3328:	aa 1f       	adc	r26, r26
    332a:	bb 1f       	adc	r27, r27
    332c:	a6 17       	cp	r26, r22
    332e:	b7 07       	cpc	r27, r23
    3330:	10 f0       	brcs	.+4      	; 0x3336 <__udivmodhi4_ep>
    3332:	a6 1b       	sub	r26, r22
    3334:	b7 0b       	sbc	r27, r23

00003336 <__udivmodhi4_ep>:
    3336:	88 1f       	adc	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	5a 95       	dec	r21
    333c:	a9 f7       	brne	.-22     	; 0x3328 <__udivmodhi4_loop>
    333e:	80 95       	com	r24
    3340:	90 95       	com	r25
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	08 95       	ret

00003348 <_exit>:
    3348:	f8 94       	cli

0000334a <__stop_program>:
    334a:	ff cf       	rjmp	.-2      	; 0x334a <__stop_program>
