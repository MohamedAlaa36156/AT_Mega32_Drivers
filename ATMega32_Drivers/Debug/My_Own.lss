
My_Own.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000332e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  0000332e  000033a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000034d4  00000000  00000000  0000350c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001535  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00007f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00008268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000a277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  0000b3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000c3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000c588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000c849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d0f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 08 19 	call	0x3210	; 0x3210 <main>
      7a:	0c 94 95 19 	jmp	0x332a	; 0x332a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e6       	ldi	r26, 0x67	; 103
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e6       	ldi	r24, 0x67	; 103
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 35 19 	jmp	0x326a	; 0x326a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e1 59       	subi	r30, 0x91	; 145
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <Timer_0_Init>:
#include "timer_counter_int.h"
#include "timer_counter_reg.h"


void Timer_0_Init (void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     cce:	0e 94 a3 07 	call	0xf46	; 0xf46 <EXT_INT_Global_Enable>
	/*
	 * CLEAR COUNTING REGISTER
	 */
	TCNT0_REG=TCNT0_INIT;
     cd2:	e2 e5       	ldi	r30, 0x52	; 82
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
/**********************************/
	/*
	 * SELECT WAVE GENERATION MODE
	 */
	TCCR0_REG|=TIMER_0_WAVE_GEN_MODE;
     cd8:	a3 e5       	ldi	r26, 0x53	; 83
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e3 e5       	ldi	r30, 0x53	; 83
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8c 93       	st	X, r24
	/*******************************/
	/*
	 * Choosing Compare Mode
	 */
	TCCR0_REG|=COMPARE_MODE_TIMER_0;
     ce4:	a3 e5       	ldi	r26, 0x53	; 83
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e3 e5       	ldi	r30, 0x53	; 83
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	8c 93       	st	X, r24

	/*
	 * Enable Interrupt
	 */

	TIMSK_REG|=TIMER_0_CMP_MATCH_INT_ENABLE;
     cf2:	a9 e5       	ldi	r26, 0x59	; 89
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e9 e5       	ldi	r30, 0x59	; 89
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	8c 93       	st	X, r24
	//
	//	SET_BIT(TCCR0_REG,WGM00);
	//	SET_BIT(TCCR0_REG,WGM01);
	//#endif

}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <Timer_0_Start_Count>:
void Timer_0_Start_Count(void)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setting Prescaler
	 */

	TCCR0_REG|=PRESCALING_TIMER_0;
     d0e:	a3 e5       	ldi	r26, 0x53	; 83
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e3 e5       	ldi	r30, 0x53	; 83
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	82 60       	ori	r24, 0x02	; 2
     d1a:	8c 93       	st	X, r24

	/************************/
}
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <Timer_0_Base_Count_Set>:

void Timer_0_Base_Count_Set(uint8 u8Set_Val_Copy)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG=u8Set_Val_Copy;
     d2e:	e2 e5       	ldi	r30, 0x52	; 82
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	80 83       	st	Z, r24

}
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <Timer_0_CMP_Max_Set>:
void Timer_0_CMP_Max_Set(uint8 u8Set_Val_Copy)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG=u8Set_Val_Copy;
     d4a:	ec e5       	ldi	r30, 0x5C	; 92
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	80 83       	st	Z, r24
}
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <Timer_2_Init>:

void Timer_2_Init (void)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_Global_Enable();
     d62:	0e 94 a3 07 	call	0xf46	; 0xf46 <EXT_INT_Global_Enable>

	TCNT2_REG=TCNT2_INIT;
     d66:	e4 e4       	ldi	r30, 0x44	; 68
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	10 82       	st	Z, r1

	/*
	 * SELECT WAVE GENERATION MODE
	 */
	TCCR2_REG|=TIMER_2_WAVE_GEN_MODE;
     d6c:	a5 e4       	ldi	r26, 0x45	; 69
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e4       	ldi	r30, 0x45	; 69
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8c 93       	st	X, r24
	/*******************************/

	/*
	 * Enable Interrupt
	 */
	TIMSK_REG|=TIMER_2_CMP_MATCH_INT_ENABLE;
     d78:	a9 e5       	ldi	r26, 0x59	; 89
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e9 e5       	ldi	r30, 0x59	; 89
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	8c 93       	st	X, r24

	/*
	 * Compare Mode
	 */

	TCCR2_REG|=COMPARE_MODE_TIMER_2;
     d86:	a5 e4       	ldi	r26, 0x45	; 69
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e5 e4       	ldi	r30, 0x45	; 69
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	8c 93       	st	X, r24
//#elif MODE_TIMER_2==FAST_PWM
//
//	SET_BIT(TCCR2_REG,WGM20);
//	SET_BIT(TCCR2_REG,WGM21);
//#endif
}
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <Timer_2_Start_Count>:
void Timer_2_Start_Count(void)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Setting Prescaler
	 */

	TCCR2_REG|=PRESCALING_TIMER_2;
     da2:	a5 e4       	ldi	r26, 0x45	; 69
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e5 e4       	ldi	r30, 0x45	; 69
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	85 60       	ori	r24, 0x05	; 5
     dae:	8c 93       	st	X, r24

	/************************/
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <Timer_2_Base_Count_Set>:
void Timer_2_Base_Count_Set(uint8 u8Set_Val_Copy)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	0f 92       	push	r0
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_REG=u8Set_Val_Copy;
     dc2:	e4 e4       	ldi	r30, 0x44	; 68
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	80 83       	st	Z, r24

}
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <Timer_2_CMP_Max_Set>:
void Timer_2_CMP_Max_Set(uint8 u8Set_Val_Copy)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG=u8Set_Val_Copy;
     dde:	e3 e4       	ldi	r30, 0x43	; 67
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	80 83       	st	Z, r24
}
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <Timer_0_1_Scaler_Reset>:

void Timer_0_1_Scaler_Reset(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Calling This Function Will reset Timer 0 and Timer 1 Prescalers
	 */
	SET_BIT(SFIOR_REG,PSR10_BIT);
     df6:	a0 e5       	ldi	r26, 0x50	; 80
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e0 e5       	ldi	r30, 0x50	; 80
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
}
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <Timer_1_Init>:

void Timer_1_Init(void)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG=TCNT1_INIT_VAL;
     e12:	ec e4       	ldi	r30, 0x4C	; 76
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	11 82       	std	Z+1, r1	; 0x01
     e18:	10 82       	st	Z, r1
	OCR1A_REG=OCR1A_INIT_VAL;
     e1a:	ea e4       	ldi	r30, 0x4A	; 74
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	11 82       	std	Z+1, r1	; 0x01
     e20:	10 82       	st	Z, r1
	OCR1B_REG=OCR1B_INIT_VAL;
     e22:	e8 e4       	ldi	r30, 0x48	; 72
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	11 82       	std	Z+1, r1	; 0x01
     e28:	10 82       	st	Z, r1
	if((TIMER_1_COMP_MODE_A==0x00)||(TIMER_1_COMP_MODE_A==0x40)||(TIMER_1_COMP_MODE_A==0x80)||(TIMER_1_COMP_MODE_A==0xC0))
	{
		TCCR1A_REG|=TIMER_1_COMP_MODE_A;
     e2a:	af e4       	ldi	r26, 0x4F	; 79
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ef e4       	ldi	r30, 0x4F	; 79
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 6c       	ori	r24, 0xC0	; 192
     e36:	8c 93       	st	X, r24
		TCCR1A_REG|=TIMER_1_COMP_MODE_B;
	}
#if INPUT_CAPTURE_EDGE_SELECT==INPUT_CAPTURE_FALLING
	SET_BIT(TCCR1B_REG,ICES1);
#elif	INPUT_CAPTURE_EDGE_SELECT==INPUT_CAPTURE_RISING
	CLR_BIT(TCCR1B_REG,ICES1);
     e38:	ae e4       	ldi	r26, 0x4E	; 78
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ee e4       	ldi	r30, 0x4E	; 78
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	8c 93       	st	X, r24
#endif


#if TIMER_1_INPUT_CPT_INT_EN==ON
	SET_BIT(TIMSK_REG,TICIE1);
     e46:	a9 e5       	ldi	r26, 0x59	; 89
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e9 e5       	ldi	r30, 0x59	; 89
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 62       	ori	r24, 0x20	; 32
     e52:	8c 93       	st	X, r24
#endif
#if TIMER_1_INPUT_CMP_B_INT_EN==ON
	SET_BIT(TIMSK_REG,OCIE1B);
#endif
#if TIMER_1_INPUT_OVF_INT_EN==ON
	SET_BIT(TIMSK_REG,TOIE1);
     e54:	a9 e5       	ldi	r26, 0x59	; 89
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e9 e5       	ldi	r30, 0x59	; 89
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	84 60       	ori	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1A_REG,WGM10);
	}
	else
	{
		CLR_BIT(TCCR1A_REG,WGM10);
     e62:	af e4       	ldi	r26, 0x4F	; 79
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	ef e4       	ldi	r30, 0x4F	; 79
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1A_REG,WGM11);
	}
	else
	{
		CLR_BIT(TCCR1A_REG,WGM11);
     e70:	af e4       	ldi	r26, 0x4F	; 79
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ef e4       	ldi	r30, 0x4F	; 79
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8d 7f       	andi	r24, 0xFD	; 253
     e7c:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1B_REG,WGM12);
	}
	else
	{
		CLR_BIT(TCCR1B_REG,WGM12);
     e7e:	ae e4       	ldi	r26, 0x4E	; 78
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	ee e4       	ldi	r30, 0x4E	; 78
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	87 7f       	andi	r24, 0xF7	; 247
     e8a:	8c 93       	st	X, r24
	{
		SET_BIT(TCCR1B_REG,WGM13);
	}
	else
	{
		CLR_BIT(TCCR1B_REG,WGM13);
     e8c:	ae e4       	ldi	r26, 0x4E	; 78
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	ee e4       	ldi	r30, 0x4E	; 78
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	8f 7e       	andi	r24, 0xEF	; 239
     e98:	8c 93       	st	X, r24
	}
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <Timer_1_Start_Count>:

void Timer_1_Start_Count(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG|=PRESCALING_TIMER_1;
     ea8:	ae e4       	ldi	r26, 0x4E	; 78
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ee e4       	ldi	r30, 0x4E	; 78
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	8c 93       	st	X, r24
}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <Timer_1_Base_Count_Set>:

void Timer_1_Base_Count_Set(uint16 u16Set_Val_Copy)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <Timer_1_Base_Count_Set+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_REG=u16Set_Val_Copy;
     eca:	ec e4       	ldi	r30, 0x4C	; 76
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24

}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <Timer_1_CMP_A_Max_Set>:

void Timer_1_CMP_A_Max_Set(uint16 u16Set_Val_Copy)
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <Timer_1_CMP_A_Max_Set+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG=u16Set_Val_Copy;
     eee:	ea e4       	ldi	r30, 0x4A	; 74
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <Timer_1_CMP_B_Max_Set>:

void Timer_1_CMP_B_Max_Set(uint16 u16Set_Val_Copy)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <Timer_1_CMP_B_Max_Set+0x6>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG=u16Set_Val_Copy;
     f12:	e8 e4       	ldi	r30, 0x48	; 72
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <Timer_1_TOG_INP_CPT_UNIT_Sense>:

void Timer_1_TOG_INP_CPT_UNIT_Sense(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(TCCR1B_REG,ICES1);
     f30:	ae e4       	ldi	r26, 0x4E	; 78
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ee e4       	ldi	r30, 0x4E	; 78
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	90 81       	ld	r25, Z
     f3a:	80 e4       	ldi	r24, 0x40	; 64
     f3c:	89 27       	eor	r24, r25
     f3e:	8c 93       	st	X, r24
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <EXT_INT_Global_Enable>:
#include "int_reg.h"
#include "int_conf.h"


void EXT_INT_Global_Enable(void)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,GLOBAL_INT_BIT);
     f4e:	af e5       	ldi	r26, 0x5F	; 95
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ef e5       	ldi	r30, 0x5F	; 95
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	8c 93       	st	X, r24
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <EXT_INT_0_Enable>:
//
//}


void EXT_INT_0_Enable(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_0_EABLE);
     f6a:	ab e5       	ldi	r26, 0x5B	; 91
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e5       	ldi	r30, 0x5B	; 91
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8c 93       	st	X, r24
	MCUCR_REG|=INT_0_SENSE_CONTROL;
     f78:	a5 e5       	ldi	r26, 0x55	; 85
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e5 e5       	ldi	r30, 0x55	; 85
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8c 93       	st	X, r24

}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <EXT_INT_0_ChMod>:
void EXT_INT_0_ChMod(uint8 u8modecpy)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	89 83       	std	Y+1, r24	; 0x01
	if((u8modecpy==INT_0_LOW_LEVEL_REQ)||( u8modecpy==  INT_0_ANY_LOGICAL_LEVEL) || (u8modecpy==INT_0_FALLING_EDGE) || (u8modecpy==INT_0_RISING_EDGE))
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	88 23       	and	r24, r24
     f9a:	49 f0       	breq	.+18     	; 0xfae <EXT_INT_0_ChMod+0x24>
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	31 f0       	breq	.+12     	; 0xfae <EXT_INT_0_ChMod+0x24>
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	19 f0       	breq	.+6      	; 0xfae <EXT_INT_0_ChMod+0x24>
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	41 f4       	brne	.+16     	; 0xfbe <EXT_INT_0_ChMod+0x34>
	{
		MCUCR_REG|=u8modecpy;
     fae:	a5 e5       	ldi	r26, 0x55	; 85
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e5       	ldi	r30, 0x55	; 85
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	90 81       	ld	r25, Z
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	89 2b       	or	r24, r25
     fbc:	8c 93       	st	X, r24
	}
}
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <EXT_INT_1_Enable>:
//	SET_BIT(MCUCR_REG,ISC11);
//#endif
//
//}
void EXT_INT_1_Enable(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_0_EABLE);
     fce:	ab e5       	ldi	r26, 0x5B	; 91
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e5       	ldi	r30, 0x5B	; 91
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 64       	ori	r24, 0x40	; 64
     fda:	8c 93       	st	X, r24
	MCUCR_REG|=INT_1_SENSE_CONTROL;
     fdc:	a5 e5       	ldi	r26, 0x55	; 85
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e5       	ldi	r30, 0x55	; 85
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8c 93       	st	X, r24
}
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <EXT_INT_1_ChMod>:

void EXT_INT_1_ChMod(uint8 u8modecpy)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	0f 92       	push	r0
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	89 83       	std	Y+1, r24	; 0x01
	if((u8modecpy==INT_1_LOW_LEVEL_REQ)||( u8modecpy==  INT_1_ANY_LOGICAL_LEVEL) || (u8modecpy==INT_1_FALLING_EDGE) || (u8modecpy==INT_1_RISING_EDGE))
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	88 23       	and	r24, r24
     ffe:	49 f0       	breq	.+18     	; 0x1012 <EXT_INT_1_ChMod+0x24>
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	31 f0       	breq	.+12     	; 0x1012 <EXT_INT_1_ChMod+0x24>
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	19 f0       	breq	.+6      	; 0x1012 <EXT_INT_1_ChMod+0x24>
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	8c 30       	cpi	r24, 0x0C	; 12
    1010:	41 f4       	brne	.+16     	; 0x1022 <EXT_INT_1_ChMod+0x34>
	{
		MCUCR_REG|=u8modecpy;
    1012:	a5 e5       	ldi	r26, 0x55	; 85
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e5 e5       	ldi	r30, 0x55	; 85
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	90 81       	ld	r25, Z
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	89 2b       	or	r24, r25
    1020:	8c 93       	st	X, r24
	}
}
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <EXT_INT_2_Enable>:

void EXT_INT_2_Enable(void)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR_REG,INT_2_EABLE);
    1032:	ab e5       	ldi	r26, 0x5B	; 91
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e5       	ldi	r30, 0x5B	; 91
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	80 62       	ori	r24, 0x20	; 32
    103e:	8c 93       	st	X, r24
#if INT_2_SENSE_CONTROL	==	RISING_EDGE
	CLR_BIT(MCUCSR_REG,ISC2);
    1040:	a4 e5       	ldi	r26, 0x54	; 84
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e5       	ldi	r30, 0x54	; 84
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8f 7b       	andi	r24, 0xBF	; 191
    104c:	8c 93       	st	X, r24
#elif	INT_1_SENSE_CONTROL	==	FALLING_EDGE
	SET_BIT(MCUCSR_REG,ISC2);
#endif
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <EXT_INT_2_Toggle>:
void EXT_INT_2_Toggle(void)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(MCUCSR_REG,ISC2);
    105c:	a4 e5       	ldi	r26, 0x54	; 84
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e5       	ldi	r30, 0x54	; 84
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	90 81       	ld	r25, Z
    1066:	80 e4       	ldi	r24, 0x40	; 64
    1068:	89 27       	eor	r24, r25
    106a:	8c 93       	st	X, r24
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <EXT_INT_Global_Disable>:
void EXT_INT_Global_Disable(void)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,GLOBAL_INT_BIT);
    107a:	af e5       	ldi	r26, 0x5F	; 95
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ef e5       	ldi	r30, 0x5F	; 95
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 77       	andi	r24, 0x7F	; 127
    1086:	8c 93       	st	X, r24
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <EXT_INT_Global_Toggle>:
void EXT_INT_Global_Toggle(void)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(SREG_REG,GLOBAL_INT_BIT);
    1096:	af e5       	ldi	r26, 0x5F	; 95
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ef e5       	ldi	r30, 0x5F	; 95
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	90 81       	ld	r25, Z
    10a0:	80 e8       	ldi	r24, 0x80	; 128
    10a2:	89 27       	eor	r24, r25
    10a4:	8c 93       	st	X, r24
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <DIO_u8Set_Port_Dir>:
#include "dio_reg.h"
#include "dio_int.h"


uint8 DIO_u8Set_Port_Dir(uint8 u8PortIdCopy , uint8 u8DirCopy)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_u8Set_Port_Dir+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_u8Set_Port_Dir+0x8>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    10be:	19 82       	std	Y+1, r1	; 0x01

		switch(u8PortIdCopy)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3d 83       	std	Y+5, r19	; 0x05
    10c8:	2c 83       	std	Y+4, r18	; 0x04
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	d1 f0       	breq	.+52     	; 0x1108 <DIO_u8Set_Port_Dir+0x5c>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <DIO_u8Set_Port_Dir+0x3c>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <DIO_u8Set_Port_Dir+0x52>
    10e6:	1f c0       	rjmp	.+62     	; 0x1126 <DIO_u8Set_Port_Dir+0x7a>
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <DIO_u8Set_Port_Dir+0x66>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	81 f0       	breq	.+32     	; 0x111c <DIO_u8Set_Port_Dir+0x70>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <DIO_u8Set_Port_Dir+0x7a>
		{
			case PORT_A :	DDRA_REG = u8DirCopy;
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	80 83       	st	Z, r24
    1106:	11 c0       	rjmp	.+34     	; 0x112a <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_B :	DDRB_REG = u8DirCopy;
    1108:	e7 e3       	ldi	r30, 0x37	; 55
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	80 83       	st	Z, r24
    1110:	0c c0       	rjmp	.+24     	; 0x112a <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_C :	DDRC_REG = u8DirCopy;
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	80 83       	st	Z, r24
    111a:	07 c0       	rjmp	.+14     	; 0x112a <DIO_u8Set_Port_Dir+0x7e>
										break;
			case PORT_D :	DDRD_REG = u8DirCopy;
    111c:	e1 e3       	ldi	r30, 0x31	; 49
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	80 83       	st	Z, r24
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8Set_Port_Dir+0x7e>
										break;
			default		:	Error_Status = E_NOK ;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01

		}



	return Error_Status;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_u8Set_Port_Val>:
uint8 DIO_u8Set_Port_Val(uint8 u8PortIdCopy , uint8 u8ValCopy)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_u8Set_Port_Val+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <DIO_u8Set_Port_Val+0x8>
    1144:	0f 92       	push	r0
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    114e:	19 82       	std	Y+1, r1	; 0x01


			switch(u8PortIdCopy)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3d 83       	std	Y+5, r19	; 0x05
    1158:	2c 83       	std	Y+4, r18	; 0x04
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	d1 f0       	breq	.+52     	; 0x1198 <DIO_u8Set_Port_Val+0x5c>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	2c f4       	brge	.+10     	; 0x1178 <DIO_u8Set_Port_Val+0x3c>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	61 f0       	breq	.+24     	; 0x118e <DIO_u8Set_Port_Val+0x52>
    1176:	1f c0       	rjmp	.+62     	; 0x11b6 <DIO_u8Set_Port_Val+0x7a>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	81 f0       	breq	.+32     	; 0x11a2 <DIO_u8Set_Port_Val+0x66>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	91 05       	cpc	r25, r1
    118a:	81 f0       	breq	.+32     	; 0x11ac <DIO_u8Set_Port_Val+0x70>
    118c:	14 c0       	rjmp	.+40     	; 0x11b6 <DIO_u8Set_Port_Val+0x7a>
			{
				case PORT_A :	PORTA_REG = u8ValCopy;
    118e:	eb e3       	ldi	r30, 0x3B	; 59
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	80 83       	st	Z, r24
    1196:	11 c0       	rjmp	.+34     	; 0x11ba <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_B :	PORTB_REG =	u8ValCopy;
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	80 83       	st	Z, r24
    11a0:	0c c0       	rjmp	.+24     	; 0x11ba <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_C :	PORTC_REG = u8ValCopy;
    11a2:	e5 e3       	ldi	r30, 0x35	; 53
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	80 83       	st	Z, r24
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <DIO_u8Set_Port_Val+0x7e>
											break;
				case PORT_D :	PORTD_REG = u8ValCopy;
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	80 83       	st	Z, r24
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8Set_Port_Val+0x7e>
											break;
				default		:	Error_Status=E_NOK;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	89 83       	std	Y+1, r24	; 0x01

			}



	return Error_Status;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <DIO_u8Get_Port_Val>:
uint8 DIO_u8Get_Port_Val(uint8 u8PortIdCopy , uint8 * u8pValCopy)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_u8Get_Port_Val+0x6>
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_u8Get_Port_Val+0x8>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_u8Get_Port_Val+0xa>
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	8a 83       	std	Y+2, r24	; 0x02
    11dc:	7c 83       	std	Y+4, r23	; 0x04
    11de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    11e0:	19 82       	std	Y+1, r1	; 0x01


				switch(u8PortIdCopy)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	3e 83       	std	Y+6, r19	; 0x06
    11ea:	2d 83       	std	Y+5, r18	; 0x05
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	91 05       	cpc	r25, r1
    11f4:	e1 f0       	breq	.+56     	; 0x122e <DIO_u8Get_Port_Val+0x62>
    11f6:	2d 81       	ldd	r18, Y+5	; 0x05
    11f8:	3e 81       	ldd	r19, Y+6	; 0x06
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <DIO_u8Get_Port_Val+0x3e>
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	61 f0       	breq	.+24     	; 0x1220 <DIO_u8Get_Port_Val+0x54>
    1208:	27 c0       	rjmp	.+78     	; 0x1258 <DIO_u8Get_Port_Val+0x8c>
    120a:	2d 81       	ldd	r18, Y+5	; 0x05
    120c:	3e 81       	ldd	r19, Y+6	; 0x06
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	a1 f0       	breq	.+40     	; 0x123c <DIO_u8Get_Port_Val+0x70>
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	91 05       	cpc	r25, r1
    121c:	b1 f0       	breq	.+44     	; 0x124a <DIO_u8Get_Port_Val+0x7e>
    121e:	1c c0       	rjmp	.+56     	; 0x1258 <DIO_u8Get_Port_Val+0x8c>
				{
					case PORT_A :	*u8pValCopy = PINA_REG;
    1220:	e9 e3       	ldi	r30, 0x39	; 57
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	eb 81       	ldd	r30, Y+3	; 0x03
    1228:	fc 81       	ldd	r31, Y+4	; 0x04
    122a:	80 83       	st	Z, r24
    122c:	17 c0       	rjmp	.+46     	; 0x125c <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_B :	*u8pValCopy = PINB_REG;
    122e:	e6 e3       	ldi	r30, 0x36	; 54
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	eb 81       	ldd	r30, Y+3	; 0x03
    1236:	fc 81       	ldd	r31, Y+4	; 0x04
    1238:	80 83       	st	Z, r24
    123a:	10 c0       	rjmp	.+32     	; 0x125c <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_C :	*u8pValCopy = PINC_REG;
    123c:	e3 e3       	ldi	r30, 0x33	; 51
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	80 83       	st	Z, r24
    1248:	09 c0       	rjmp	.+18     	; 0x125c <DIO_u8Get_Port_Val+0x90>
												break;
					case PORT_D :	*u8pValCopy = PIND_REG;
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	eb 81       	ldd	r30, Y+3	; 0x03
    1252:	fc 81       	ldd	r31, Y+4	; 0x04
    1254:	80 83       	st	Z, r24
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_u8Get_Port_Val+0x90>
												break;
					default		:	Error_Status=E_NOK;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 83       	std	Y+1, r24	; 0x01
												break;

				}
	return Error_Status;
    125c:	89 81       	ldd	r24, Y+1	; 0x01

}
    125e:	26 96       	adiw	r28, 0x06	; 6
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <DIO_u8TOG_PORT_Val>:
uint8 DIO_u8TOG_PORT_Val (uint8  u8PortIdCopy 	)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <DIO_u8TOG_PORT_Val+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_u8TOG_PORT_Val+0x8>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Error_Status=E_OK;
    127e:	19 82       	std	Y+1, r1	; 0x01

		switch(u8PortIdCopy)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3c 83       	std	Y+4, r19	; 0x04
    1288:	2b 83       	std	Y+3, r18	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	e9 f0       	breq	.+58     	; 0x12ce <DIO_u8TOG_PORT_Val+0x5e>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <DIO_u8TOG_PORT_Val+0x38>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <DIO_u8TOG_PORT_Val+0x4e>
    12a6:	2b c0       	rjmp	.+86     	; 0x12fe <DIO_u8TOG_PORT_Val+0x8e>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	b1 f0       	breq	.+44     	; 0x12de <DIO_u8TOG_PORT_Val+0x6e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	c9 f0       	breq	.+50     	; 0x12ee <DIO_u8TOG_PORT_Val+0x7e>
    12bc:	20 c0       	rjmp	.+64     	; 0x12fe <DIO_u8TOG_PORT_Val+0x8e>
			{
				case PORT_A :	PORTA_REG = ~PORTA_REG;
    12be:	ab e3       	ldi	r26, 0x3B	; 59
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	eb e3       	ldi	r30, 0x3B	; 59
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 95       	com	r24
    12ca:	8c 93       	st	X, r24
    12cc:	1a c0       	rjmp	.+52     	; 0x1302 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_B :	PORTB_REG = ~PORTB_REG;
    12ce:	a8 e3       	ldi	r26, 0x38	; 56
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 95       	com	r24
    12da:	8c 93       	st	X, r24
    12dc:	12 c0       	rjmp	.+36     	; 0x1302 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_C :	PORTC_REG = ~PORTC_REG;
    12de:	a5 e3       	ldi	r26, 0x35	; 53
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e3       	ldi	r30, 0x35	; 53
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 95       	com	r24
    12ea:	8c 93       	st	X, r24
    12ec:	0a c0       	rjmp	.+20     	; 0x1302 <DIO_u8TOG_PORT_Val+0x92>
													break;
				case PORT_D :	PORTD_REG = ~PORTD_REG;
    12ee:	a2 e3       	ldi	r26, 0x32	; 50
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 95       	com	r24
    12fa:	8c 93       	st	X, r24
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_u8TOG_PORT_Val+0x92>
													break;
				default		:	Error_Status=E_NOK;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01





	return Error_Status;
    1302:	89 81       	ldd	r24, Y+1	; 0x01

}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <DIO_u8Set_Pin_Dir>:

uint8 DIO_u8Set_Pin_Dir(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 u8DirCopy)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	28 97       	sbiw	r28, 0x08	; 8
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	8a 83       	std	Y+2, r24	; 0x02
    1328:	6b 83       	std	Y+3, r22	; 0x03
    132a:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    132c:	19 82       	std	Y+1, r1	; 0x01

	if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	08 f0       	brcs	.+2      	; 0x1336 <DIO_u8Set_Pin_Dir+0x24>
    1334:	f4 c0       	rjmp	.+488    	; 0x151e <DIO_u8Set_Pin_Dir+0x20c>
	{
		if(u8DirCopy==INPUT)
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	88 23       	and	r24, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <DIO_u8Set_Pin_Dir+0x2c>
    133c:	77 c0       	rjmp	.+238    	; 0x142c <DIO_u8Set_Pin_Dir+0x11a>
		{
			switch(u8PortIdCopy)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	38 87       	std	Y+8, r19	; 0x08
    1346:	2f 83       	std	Y+7, r18	; 0x07
    1348:	8f 81       	ldd	r24, Y+7	; 0x07
    134a:	98 85       	ldd	r25, Y+8	; 0x08
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	59 f1       	breq	.+86     	; 0x13a8 <DIO_u8Set_Pin_Dir+0x96>
    1352:	2f 81       	ldd	r18, Y+7	; 0x07
    1354:	38 85       	ldd	r19, Y+8	; 0x08
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_u8Set_Pin_Dir+0x54>
    135c:	8f 81       	ldd	r24, Y+7	; 0x07
    135e:	98 85       	ldd	r25, Y+8	; 0x08
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f0       	breq	.+26     	; 0x137e <DIO_u8Set_Pin_Dir+0x6c>
    1364:	60 c0       	rjmp	.+192    	; 0x1426 <DIO_u8Set_Pin_Dir+0x114>
    1366:	2f 81       	ldd	r18, Y+7	; 0x07
    1368:	38 85       	ldd	r19, Y+8	; 0x08
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	89 f1       	breq	.+98     	; 0x13d2 <DIO_u8Set_Pin_Dir+0xc0>
    1370:	8f 81       	ldd	r24, Y+7	; 0x07
    1372:	98 85       	ldd	r25, Y+8	; 0x08
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_u8Set_Pin_Dir+0x6a>
    137a:	40 c0       	rjmp	.+128    	; 0x13fc <DIO_u8Set_Pin_Dir+0xea>
    137c:	54 c0       	rjmp	.+168    	; 0x1426 <DIO_u8Set_Pin_Dir+0x114>
				{
					case PORT_A :	CLR_BIT(DDRA_REG,u8Pin_IdCopy);
    137e:	aa e3       	ldi	r26, 0x3A	; 58
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ea e3       	ldi	r30, 0x3A	; 58
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_u8Set_Pin_Dir+0x8a>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_u8Set_Pin_Dir+0x86>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	bd c0       	rjmp	.+378    	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_B :	CLR_BIT(DDRB_REG,u8Pin_IdCopy);
    13a8:	a7 e3       	ldi	r26, 0x37	; 55
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e7 e3       	ldi	r30, 0x37	; 55
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8Set_Pin_Dir+0xb4>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8Set_Pin_Dir+0xb0>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	a8 c0       	rjmp	.+336    	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_C :	CLR_BIT(DDRC_REG,u8Pin_IdCopy);
    13d2:	a4 e3       	ldi	r26, 0x34	; 52
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e4 e3       	ldi	r30, 0x34	; 52
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_u8Set_Pin_Dir+0xde>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_u8Set_Pin_Dir+0xda>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	93 c0       	rjmp	.+294    	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_D :	CLR_BIT(DDRD_REG,u8Pin_IdCopy);
    13fc:	a1 e3       	ldi	r26, 0x31	; 49
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e1 e3       	ldi	r30, 0x31	; 49
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_u8Set_Pin_Dir+0x108>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_u8Set_Pin_Dir+0x104>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	7e c0       	rjmp	.+252    	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					default		:	Error_Status=E_NOK;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	7b c0       	rjmp	.+246    	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;

				}
		}
		else if(u8DirCopy==OUTPUT)
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	09 f0       	breq	.+2      	; 0x1434 <DIO_u8Set_Pin_Dir+0x122>
    1432:	72 c0       	rjmp	.+228    	; 0x1518 <DIO_u8Set_Pin_Dir+0x206>
		{
			switch(u8PortIdCopy)
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3e 83       	std	Y+6, r19	; 0x06
    143c:	2d 83       	std	Y+5, r18	; 0x05
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	49 f1       	breq	.+82     	; 0x149a <DIO_u8Set_Pin_Dir+0x188>
    1448:	2d 81       	ldd	r18, Y+5	; 0x05
    144a:	3e 81       	ldd	r19, Y+6	; 0x06
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	2c f4       	brge	.+10     	; 0x145c <DIO_u8Set_Pin_Dir+0x14a>
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	61 f0       	breq	.+24     	; 0x1472 <DIO_u8Set_Pin_Dir+0x160>
    145a:	5b c0       	rjmp	.+182    	; 0x1512 <DIO_u8Set_Pin_Dir+0x200>
    145c:	2d 81       	ldd	r18, Y+5	; 0x05
    145e:	3e 81       	ldd	r19, Y+6	; 0x06
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	71 f1       	breq	.+92     	; 0x14c2 <DIO_u8Set_Pin_Dir+0x1b0>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	91 05       	cpc	r25, r1
    146e:	e9 f1       	breq	.+122    	; 0x14ea <DIO_u8Set_Pin_Dir+0x1d8>
    1470:	50 c0       	rjmp	.+160    	; 0x1512 <DIO_u8Set_Pin_Dir+0x200>
				{
					case PORT_A :	SET_BIT(DDRA_REG,u8Pin_IdCopy);
    1472:	aa e3       	ldi	r26, 0x3A	; 58
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	ea e3       	ldi	r30, 0x3A	; 58
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8Set_Pin_Dir+0x17e>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8Set_Pin_Dir+0x17a>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	44 c0       	rjmp	.+136    	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_B :	SET_BIT(DDRB_REG,u8Pin_IdCopy);
    149a:	a7 e3       	ldi	r26, 0x37	; 55
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e7 e3       	ldi	r30, 0x37	; 55
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8Set_Pin_Dir+0x1a6>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_u8Set_Pin_Dir+0x1a2>
    14bc:	84 2b       	or	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	30 c0       	rjmp	.+96     	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_C :	SET_BIT(DDRC_REG,u8Pin_IdCopy);
    14c2:	a4 e3       	ldi	r26, 0x34	; 52
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e4 e3       	ldi	r30, 0x34	; 52
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_u8Set_Pin_Dir+0x1ce>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_u8Set_Pin_Dir+0x1ca>
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	1c c0       	rjmp	.+56     	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					case PORT_D :	SET_BIT(DDRD_REG,u8Pin_IdCopy);
    14ea:	a1 e3       	ldi	r26, 0x31	; 49
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e1 e3       	ldi	r30, 0x31	; 49
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_u8Set_Pin_Dir+0x1f6>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_u8Set_Pin_Dir+0x1f2>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
													break;
					default		:	Error_Status=E_NOK;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
					}
				}

		else
		{
			Error_Status=E_NOK;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8Set_Pin_Dir+0x210>
		}
	}
	else
	{
		Error_Status=E_NOK;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_Status;
    1522:	89 81       	ldd	r24, Y+1	; 0x01


}
    1524:	28 96       	adiw	r28, 0x08	; 8
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <DIO_u8Set_Pin_Val>:
uint8 DIO_u8Set_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 u8ValCopy)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	28 97       	sbiw	r28, 0x08	; 8
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	6b 83       	std	Y+3, r22	; 0x03
    154e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    1550:	19 82       	std	Y+1, r1	; 0x01

	if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <DIO_u8Set_Pin_Val+0x24>
    1558:	f4 c0       	rjmp	.+488    	; 0x1742 <DIO_u8Set_Pin_Val+0x20c>
	{
		if(u8ValCopy==LOW)
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	88 23       	and	r24, r24
    155e:	09 f0       	breq	.+2      	; 0x1562 <DIO_u8Set_Pin_Val+0x2c>
    1560:	77 c0       	rjmp	.+238    	; 0x1650 <DIO_u8Set_Pin_Val+0x11a>
		{
			switch(u8PortIdCopy)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	38 87       	std	Y+8, r19	; 0x08
    156a:	2f 83       	std	Y+7, r18	; 0x07
    156c:	8f 81       	ldd	r24, Y+7	; 0x07
    156e:	98 85       	ldd	r25, Y+8	; 0x08
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	59 f1       	breq	.+86     	; 0x15cc <DIO_u8Set_Pin_Val+0x96>
    1576:	2f 81       	ldd	r18, Y+7	; 0x07
    1578:	38 85       	ldd	r19, Y+8	; 0x08
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_u8Set_Pin_Val+0x54>
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_u8Set_Pin_Val+0x6c>
    1588:	60 c0       	rjmp	.+192    	; 0x164a <DIO_u8Set_Pin_Val+0x114>
    158a:	2f 81       	ldd	r18, Y+7	; 0x07
    158c:	38 85       	ldd	r19, Y+8	; 0x08
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <DIO_u8Set_Pin_Val+0xc0>
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_u8Set_Pin_Val+0x6a>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_u8Set_Pin_Val+0xea>
    15a0:	54 c0       	rjmp	.+168    	; 0x164a <DIO_u8Set_Pin_Val+0x114>
				{
					case PORT_A :	CLR_BIT(PORTA_REG,u8Pin_IdCopy);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8Set_Pin_Val+0x8a>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8Set_Pin_Val+0x86>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	bd c0       	rjmp	.+378    	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_B :	CLR_BIT(PORTB_REG,u8Pin_IdCopy);
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_u8Set_Pin_Val+0xb4>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_u8Set_Pin_Val+0xb0>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	a8 c0       	rjmp	.+336    	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_C :	CLR_BIT(PORTC_REG,u8Pin_IdCopy);
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_u8Set_Pin_Val+0xde>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_u8Set_Pin_Val+0xda>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	93 c0       	rjmp	.+294    	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_D :	CLR_BIT(PORTD_REG,u8Pin_IdCopy);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_u8Set_Pin_Val+0x108>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_u8Set_Pin_Val+0x104>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	7e c0       	rjmp	.+252    	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					default		:	Error_Status=E_NOK;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	7b c0       	rjmp	.+246    	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;

				}
		}
		else if(u8ValCopy==HIGH)
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	09 f0       	breq	.+2      	; 0x1658 <DIO_u8Set_Pin_Val+0x122>
    1656:	72 c0       	rjmp	.+228    	; 0x173c <DIO_u8Set_Pin_Val+0x206>
		{
			switch(u8PortIdCopy)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3e 83       	std	Y+6, r19	; 0x06
    1660:	2d 83       	std	Y+5, r18	; 0x05
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	49 f1       	breq	.+82     	; 0x16be <DIO_u8Set_Pin_Val+0x188>
    166c:	2d 81       	ldd	r18, Y+5	; 0x05
    166e:	3e 81       	ldd	r19, Y+6	; 0x06
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_u8Set_Pin_Val+0x14a>
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <DIO_u8Set_Pin_Val+0x160>
    167e:	5b c0       	rjmp	.+182    	; 0x1736 <DIO_u8Set_Pin_Val+0x200>
    1680:	2d 81       	ldd	r18, Y+5	; 0x05
    1682:	3e 81       	ldd	r19, Y+6	; 0x06
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	71 f1       	breq	.+92     	; 0x16e6 <DIO_u8Set_Pin_Val+0x1b0>
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	e9 f1       	breq	.+122    	; 0x170e <DIO_u8Set_Pin_Val+0x1d8>
    1694:	50 c0       	rjmp	.+160    	; 0x1736 <DIO_u8Set_Pin_Val+0x200>
				{
					case PORT_A :	SET_BIT(PORTA_REG,u8Pin_IdCopy);
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_u8Set_Pin_Val+0x17e>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_u8Set_Pin_Val+0x17a>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	44 c0       	rjmp	.+136    	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_B :	SET_BIT(PORTB_REG,u8Pin_IdCopy);
    16be:	a8 e3       	ldi	r26, 0x38	; 56
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e8 e3       	ldi	r30, 0x38	; 56
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_u8Set_Pin_Val+0x1a6>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_u8Set_Pin_Val+0x1a2>
    16e0:	84 2b       	or	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	30 c0       	rjmp	.+96     	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_C :	SET_BIT(PORTC_REG,u8Pin_IdCopy);
    16e6:	a5 e3       	ldi	r26, 0x35	; 53
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_u8Set_Pin_Val+0x1ce>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_u8Set_Pin_Val+0x1ca>
    1708:	84 2b       	or	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	1c c0       	rjmp	.+56     	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					case PORT_D :	SET_BIT(PORTD_REG,u8Pin_IdCopy);
    170e:	a2 e3       	ldi	r26, 0x32	; 50
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e2 e3       	ldi	r30, 0x32	; 50
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_u8Set_Pin_Val+0x1f6>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_u8Set_Pin_Val+0x1f2>
    1730:	84 2b       	or	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	08 c0       	rjmp	.+16     	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
													break;
					default		:	Error_Status=E_NOK;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
				}
		}

		else
		{
			Error_Status=E_NOK;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8Set_Pin_Val+0x210>
		}
	}
	else
	{
		Error_Status=E_NOK;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	89 83       	std	Y+1, r24	; 0x01
	}


	return Error_Status;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
}
    1748:	28 96       	adiw	r28, 0x08	; 8
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <DIO_u8Get_Pin_Val>:
uint8 DIO_u8Get_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy ,uint8 * u8pValCopy)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	27 97       	sbiw	r28, 0x07	; 7
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	6b 83       	std	Y+3, r22	; 0x03
    1772:	5d 83       	std	Y+5, r21	; 0x05
    1774:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Error_Status=E_OK;
    1776:	19 82       	std	Y+1, r1	; 0x01

		if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	08 f0       	brcs	.+2      	; 0x1780 <DIO_u8Get_Pin_Val+0x26>
    177e:	74 c0       	rjmp	.+232    	; 0x1868 <DIO_u8Get_Pin_Val+0x10e>
		{

			switch(u8PortIdCopy)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3f 83       	std	Y+7, r19	; 0x07
    1788:	2e 83       	std	Y+6, r18	; 0x06
    178a:	4e 81       	ldd	r20, Y+6	; 0x06
    178c:	5f 81       	ldd	r21, Y+7	; 0x07
    178e:	41 30       	cpi	r20, 0x01	; 1
    1790:	51 05       	cpc	r21, r1
    1792:	59 f1       	breq	.+86     	; 0x17ea <DIO_u8Get_Pin_Val+0x90>
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	91 05       	cpc	r25, r1
    179c:	34 f4       	brge	.+12     	; 0x17aa <DIO_u8Get_Pin_Val+0x50>
    179e:	2e 81       	ldd	r18, Y+6	; 0x06
    17a0:	3f 81       	ldd	r19, Y+7	; 0x07
    17a2:	21 15       	cp	r18, r1
    17a4:	31 05       	cpc	r19, r1
    17a6:	69 f0       	breq	.+26     	; 0x17c2 <DIO_u8Get_Pin_Val+0x68>
    17a8:	5c c0       	rjmp	.+184    	; 0x1862 <DIO_u8Get_Pin_Val+0x108>
    17aa:	4e 81       	ldd	r20, Y+6	; 0x06
    17ac:	5f 81       	ldd	r21, Y+7	; 0x07
    17ae:	42 30       	cpi	r20, 0x02	; 2
    17b0:	51 05       	cpc	r21, r1
    17b2:	79 f1       	breq	.+94     	; 0x1812 <DIO_u8Get_Pin_Val+0xb8>
    17b4:	8e 81       	ldd	r24, Y+6	; 0x06
    17b6:	9f 81       	ldd	r25, Y+7	; 0x07
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <DIO_u8Get_Pin_Val+0x66>
    17be:	3d c0       	rjmp	.+122    	; 0x183a <DIO_u8Get_Pin_Val+0xe0>
    17c0:	50 c0       	rjmp	.+160    	; 0x1862 <DIO_u8Get_Pin_Val+0x108>
				{
					case PORT_A : *u8pValCopy=GET_BIT(PINA_REG,u8Pin_IdCopy);
    17c2:	e9 e3       	ldi	r30, 0x39	; 57
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_u8Get_Pin_Val+0x80>
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_u8Get_Pin_Val+0x7c>
    17de:	ca 01       	movw	r24, r20
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	ec 81       	ldd	r30, Y+4	; 0x04
    17e4:	fd 81       	ldd	r31, Y+5	; 0x05
    17e6:	80 83       	st	Z, r24
    17e8:	41 c0       	rjmp	.+130    	; 0x186c <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_B : *u8pValCopy=GET_BIT(PINB_REG,u8Pin_IdCopy);
    17ea:	e6 e3       	ldi	r30, 0x36	; 54
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a9 01       	movw	r20, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_u8Get_Pin_Val+0xa8>
    17fe:	55 95       	asr	r21
    1800:	47 95       	ror	r20
    1802:	8a 95       	dec	r24
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_u8Get_Pin_Val+0xa4>
    1806:	ca 01       	movw	r24, r20
    1808:	81 70       	andi	r24, 0x01	; 1
    180a:	ec 81       	ldd	r30, Y+4	; 0x04
    180c:	fd 81       	ldd	r31, Y+5	; 0x05
    180e:	80 83       	st	Z, r24
    1810:	2d c0       	rjmp	.+90     	; 0x186c <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_C : *u8pValCopy=GET_BIT(PINC_REG,u8Pin_IdCopy);
    1812:	e3 e3       	ldi	r30, 0x33	; 51
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a9 01       	movw	r20, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <DIO_u8Get_Pin_Val+0xd0>
    1826:	55 95       	asr	r21
    1828:	47 95       	ror	r20
    182a:	8a 95       	dec	r24
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <DIO_u8Get_Pin_Val+0xcc>
    182e:	ca 01       	movw	r24, r20
    1830:	81 70       	andi	r24, 0x01	; 1
    1832:	ec 81       	ldd	r30, Y+4	; 0x04
    1834:	fd 81       	ldd	r31, Y+5	; 0x05
    1836:	80 83       	st	Z, r24
    1838:	19 c0       	rjmp	.+50     	; 0x186c <DIO_u8Get_Pin_Val+0x112>
													break;
					case PORT_D : *u8pValCopy=GET_BIT(PIND_REG,u8Pin_IdCopy);
    183a:	e0 e3       	ldi	r30, 0x30	; 48
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a9 01       	movw	r20, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_u8Get_Pin_Val+0xf8>
    184e:	55 95       	asr	r21
    1850:	47 95       	ror	r20
    1852:	8a 95       	dec	r24
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_u8Get_Pin_Val+0xf4>
    1856:	ca 01       	movw	r24, r20
    1858:	81 70       	andi	r24, 0x01	; 1
    185a:	ec 81       	ldd	r30, Y+4	; 0x04
    185c:	fd 81       	ldd	r31, Y+5	; 0x05
    185e:	80 83       	st	Z, r24
    1860:	05 c0       	rjmp	.+10     	; 0x186c <DIO_u8Get_Pin_Val+0x112>
													break;
					default		:	Error_Status=E_NOK;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	02 c0       	rjmp	.+4      	; 0x186c <DIO_u8Get_Pin_Val+0x112>
				}

		}
		else
		{
			Error_Status=E_NOK;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_Status;
    186c:	89 81       	ldd	r24, Y+1	; 0x01

}
    186e:	27 96       	adiw	r28, 0x07	; 7
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <DIO_u8TOG_Pin_Val>:
uint8 DIO_u8TOG_Pin_Val(uint8 u8PortIdCopy ,uint8 u8Pin_IdCopy )
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DIO_u8TOG_Pin_Val+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DIO_u8TOG_Pin_Val+0x8>
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Error_Status=E_OK;
    1892:	19 82       	std	Y+1, r1	; 0x01

		if((u8Pin_IdCopy>=PIN_0)&&(u8Pin_IdCopy<=PIN_7))
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	08 f0       	brcs	.+2      	; 0x189c <DIO_u8TOG_Pin_Val+0x1c>
    189a:	72 c0       	rjmp	.+228    	; 0x1980 <DIO_u8TOG_Pin_Val+0x100>
		{

			switch(u8PortIdCopy)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3d 83       	std	Y+5, r19	; 0x05
    18a4:	2c 83       	std	Y+4, r18	; 0x04
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	91 05       	cpc	r25, r1
    18ae:	49 f1       	breq	.+82     	; 0x1902 <DIO_u8TOG_Pin_Val+0x82>
    18b0:	2c 81       	ldd	r18, Y+4	; 0x04
    18b2:	3d 81       	ldd	r19, Y+5	; 0x05
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	2c f4       	brge	.+10     	; 0x18c4 <DIO_u8TOG_Pin_Val+0x44>
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	61 f0       	breq	.+24     	; 0x18da <DIO_u8TOG_Pin_Val+0x5a>
    18c2:	5b c0       	rjmp	.+182    	; 0x197a <DIO_u8TOG_Pin_Val+0xfa>
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	3d 81       	ldd	r19, Y+5	; 0x05
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	71 f1       	breq	.+92     	; 0x192a <DIO_u8TOG_Pin_Val+0xaa>
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	91 05       	cpc	r25, r1
    18d6:	e9 f1       	breq	.+122    	; 0x1952 <DIO_u8TOG_Pin_Val+0xd2>
    18d8:	50 c0       	rjmp	.+160    	; 0x197a <DIO_u8TOG_Pin_Val+0xfa>
				{
					case PORT_A : TOGGLE_BIT(PORTA_REG,u8Pin_IdCopy);
    18da:	ab e3       	ldi	r26, 0x3B	; 59
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	eb e3       	ldi	r30, 0x3B	; 59
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_u8TOG_Pin_Val+0x78>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_u8TOG_Pin_Val+0x74>
    18fc:	84 27       	eor	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	41 c0       	rjmp	.+130    	; 0x1984 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_B : TOGGLE_BIT(PORTB_REG,u8Pin_IdCopy);
    1902:	a8 e3       	ldi	r26, 0x38	; 56
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e8 e3       	ldi	r30, 0x38	; 56
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_u8TOG_Pin_Val+0xa0>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_u8TOG_Pin_Val+0x9c>
    1924:	84 27       	eor	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	2d c0       	rjmp	.+90     	; 0x1984 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_C : TOGGLE_BIT(PORTC_REG,u8Pin_IdCopy);
    192a:	a5 e3       	ldi	r26, 0x35	; 53
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_u8TOG_Pin_Val+0xc8>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_u8TOG_Pin_Val+0xc4>
    194c:	84 27       	eor	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	19 c0       	rjmp	.+50     	; 0x1984 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					case PORT_D : TOGGLE_BIT(PORTD_REG,u8Pin_IdCopy);
    1952:	a2 e3       	ldi	r26, 0x32	; 50
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e2 e3       	ldi	r30, 0x32	; 50
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_u8TOG_Pin_Val+0xf0>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_u8TOG_Pin_Val+0xec>
    1974:	84 27       	eor	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <DIO_u8TOG_Pin_Val+0x104>
																		break;
					default		:	Error_Status=E_NOK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_u8TOG_Pin_Val+0x104>
				}

		}
		else
		{
			Error_Status=E_NOK;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_Status;
    1984:	89 81       	ldd	r24, Y+1	; 0x01

}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <ADC_INIT>:
#include "../../SERV/bit_math.h"
#include "../../SERV/stdtypes.h"
#include "adc_init.h"
#include "adc_reg.h"
void ADC_INIT(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Enable ADC
	 */
	SET_BIT(ADCSRA_REG,ADEN);
    199e:	a6 e2       	ldi	r26, 0x26	; 38
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e6 e2       	ldi	r30, 0x26	; 38
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 68       	ori	r24, 0x80	; 128
    19aa:	8c 93       	st	X, r24
	 */
#if	ADC_INPUT_REFRENCE==ADC_EXTERNAL_INPUT
	CLR_BIT(ADMUX_REG,REFS0);
	CLR_BIT(ADMUX_REG,REFS1);
#elif ADC_INPUT_REFRENCE==ADC_INTERNAL_VCC
	SET_BIT(ADMUX_REG,REFS0);
    19ac:	a7 e2       	ldi	r26, 0x27	; 39
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e7 e2       	ldi	r30, 0x27	; 39
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 64       	ori	r24, 0x40	; 64
    19b8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,REFS1);
    19ba:	a7 e2       	ldi	r26, 0x27	; 39
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e7 e2       	ldi	r30, 0x27	; 39
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8f 77       	andi	r24, 0x7F	; 127
    19c6:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,REFS1);
#endif
	/*
	 * Select PRESCALER
	 */
	ADCSRA_REG|=ADC_PRESCALER_SELECTOR;
    19c8:	a6 e2       	ldi	r26, 0x26	; 38
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e6 e2       	ldi	r30, 0x26	; 38
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	86 60       	ori	r24, 0x06	; 6
    19d4:	8c 93       	st	X, r24

	/*
	 * ADJUST RESULT EITHER LEFT OR RIGHT
	 */
#if ADC_ADJUST_RESULT== ADC_ADJUST_RIGHT
	CLR_BIT(ADCSRA_REG,ADLAR);
    19d6:	a6 e2       	ldi	r26, 0x26	; 38
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e6 e2       	ldi	r30, 0x26	; 38
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8f 7d       	andi	r24, 0xDF	; 223
    19e2:	8c 93       	st	X, r24
#elif ADC_ADJUST_RESULT== ADC_ADJUST_LEFT
	SET_BIT(ADCSRA_REG,ADLAR);
#endif

}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <ADC_u16_Read_>:

uint16 ADC_u16_Read_(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <ADC_u16_Read_+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Select Channel
	 */
	ADMUX_REG&=CLEAR_MUX_MUSK;
    19f4:	a7 e2       	ldi	r26, 0x27	; 39
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e7 e2       	ldi	r30, 0x27	; 39
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 7e       	andi	r24, 0xE0	; 224
    1a00:	8c 93       	st	X, r24
	ADMUX_REG|=ADC_MUX_CHANNEL_SELECTOR;
    1a02:	a7 e2       	ldi	r26, 0x27	; 39
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e7 e2       	ldi	r30, 0x27	; 39
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8c 93       	st	X, r24
	/*
	 * CONVERSION MODE
	 */
#if	 ADC_CONVERSION_MODE == ADC_SINGLE_CONFERSION
		SET_BIT(ADCSRA_REG,ADSC);
    1a0e:	a6 e2       	ldi	r26, 0x26	; 38
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e6 e2       	ldi	r30, 0x26	; 38
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 64       	ori	r24, 0x40	; 64
    1a1a:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_REG,ADATE);
    1a1c:	a6 e2       	ldi	r26, 0x26	; 38
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e6 e2       	ldi	r30, 0x26	; 38
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 7d       	andi	r24, 0xDF	; 223
    1a28:	8c 93       	st	X, r24
		while(GET_BIT(ADCSRA_REG,ADIF)==0);
    1a2a:	e6 e2       	ldi	r30, 0x26	; 38
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 95       	swap	r24
    1a32:	8f 70       	andi	r24, 0x0F	; 15
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	a9 f3       	breq	.-22     	; 0x1a2a <ADC_u16_Read_+0x40>
		SET_BIT(ADCSRA_REG,ADIF);
    1a40:	a6 e2       	ldi	r26, 0x26	; 38
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 61       	ori	r24, 0x10	; 16
    1a4c:	8c 93       	st	X, r24
		/*
		 * RETURN REGISTER ONLY LEFT.
		 */
		uint16 ADC_Val=ADC_REG;
    1a4e:	e4 e2       	ldi	r30, 0x24	; 36
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(ADCSRA_REG,ADSC);
		SET_BIT(ADCSRA_REG,ADATE);
#endif


	return ADC_Val;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <Led_String_u8Set_Dir>:
/*
 * 		Enable Output on Full Port.
 *
 */
void  Led_String_u8Set_Dir(void)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(LED_PORT_FULL,FULL_OUTPUT);
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	6f ef       	ldi	r22, 0xFF	; 255
    1a74:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_u8Set_Port_Dir>
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <Led_Pin_u8Set_Dir>:



void Led_Pin_u8Set_Dir(void)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Pin_Dir(LED_PORT,LED_PIN,OUTPUT);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	64 e0       	ldi	r22, 0x04	; 4
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <Led_String_u8Set_On_Off>:



void Led_String_u8Set_On_Off(uint8 u8ValCopy)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Port_Val(LED_PORT_FULL,u8ValCopy);
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	69 81       	ldd	r22, Y+1	; 0x01
    1aa6:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_u8Set_Port_Val>
}
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <Led_Pin_u8Set_On_Off>:



void Led_Pin_u8Set_On_Off(uint8 u8ValCopy)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Set_Pin_Val(LED_PORT,LED_PIN,u8ValCopy);
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	64 e0       	ldi	r22, 0x04	; 4
    1ac2:	49 81       	ldd	r20, Y+1	; 0x01
    1ac4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
}
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <Led_Pin_u8Tog_Val>:



void Led_Pin_u8Tog_Val(void)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TOG_Pin_Val(LED_PORT,LED_PIN);
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	64 e0       	ldi	r22, 0x04	; 4
    1adc:	0e 94 40 0c 	call	0x1880	; 0x1880 <DIO_u8TOG_Pin_Val>
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <LCD_Write_CMD>:




void LCD_Write_CMD(uint8 u8CommandCopy)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	2f 97       	sbiw	r28, 0x0f	; 15
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8Set_Pin_Val(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	40 e0       	ldi	r20, 0x00	; 0
    1b02:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	61 e0       	ldi	r22, 0x01	; 1
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>

	DIO_u8Set_Pin_Val(LCD_DATA_PORT_0,LCD_DATA_PIN_0,GET_BIT(u8CommandCopy,0));
    1b10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b12:	98 2f       	mov	r25, r24
    1b14:	91 70       	andi	r25, 0x01	; 1
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	49 2f       	mov	r20, r25
    1b1c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_1,LCD_DATA_PIN_1,GET_BIT(u8CommandCopy,1));
    1b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b22:	86 95       	lsr	r24
    1b24:	98 2f       	mov	r25, r24
    1b26:	91 70       	andi	r25, 0x01	; 1
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	49 2f       	mov	r20, r25
    1b2e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_2,LCD_DATA_PIN_2,GET_BIT(u8CommandCopy,2));
    1b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b34:	86 95       	lsr	r24
    1b36:	86 95       	lsr	r24
    1b38:	98 2f       	mov	r25, r24
    1b3a:	91 70       	andi	r25, 0x01	; 1
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	62 e0       	ldi	r22, 0x02	; 2
    1b40:	49 2f       	mov	r20, r25
    1b42:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_3,LCD_DATA_PIN_3,GET_BIT(u8CommandCopy,3));
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	86 95       	lsr	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	86 95       	lsr	r24
    1b4e:	98 2f       	mov	r25, r24
    1b50:	91 70       	andi	r25, 0x01	; 1
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	63 e0       	ldi	r22, 0x03	; 3
    1b56:	49 2f       	mov	r20, r25
    1b58:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_4,LCD_DATA_PIN_4,GET_BIT(u8CommandCopy,4));
    1b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5e:	82 95       	swap	r24
    1b60:	8f 70       	andi	r24, 0x0F	; 15
    1b62:	98 2f       	mov	r25, r24
    1b64:	91 70       	andi	r25, 0x01	; 1
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	64 e0       	ldi	r22, 0x04	; 4
    1b6a:	49 2f       	mov	r20, r25
    1b6c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_5,LCD_DATA_PIN_5,GET_BIT(u8CommandCopy,5));
    1b70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b72:	82 95       	swap	r24
    1b74:	86 95       	lsr	r24
    1b76:	87 70       	andi	r24, 0x07	; 7
    1b78:	98 2f       	mov	r25, r24
    1b7a:	91 70       	andi	r25, 0x01	; 1
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	65 e0       	ldi	r22, 0x05	; 5
    1b80:	49 2f       	mov	r20, r25
    1b82:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_6,LCD_DATA_PIN_6,GET_BIT(u8CommandCopy,6));
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b88:	82 95       	swap	r24
    1b8a:	86 95       	lsr	r24
    1b8c:	86 95       	lsr	r24
    1b8e:	83 70       	andi	r24, 0x03	; 3
    1b90:	98 2f       	mov	r25, r24
    1b92:	91 70       	andi	r25, 0x01	; 1
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	66 e0       	ldi	r22, 0x06	; 6
    1b98:	49 2f       	mov	r20, r25
    1b9a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_7,LCD_DATA_PIN_7,GET_BIT(u8CommandCopy,7));
    1b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	99 27       	eor	r25, r25
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	82 e0       	ldi	r24, 0x02	; 2
    1baa:	67 e0       	ldi	r22, 0x07	; 7
    1bac:	49 2f       	mov	r20, r25
    1bae:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>

//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8CommandCopy);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e4       	ldi	r27, 0x40	; 64
    1bc4:	8b 87       	std	Y+11, r24	; 0x0b
    1bc6:	9c 87       	std	Y+12, r25	; 0x0c
    1bc8:	ad 87       	std	Y+13, r26	; 0x0d
    1bca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8f 83       	std	Y+7, r24	; 0x07
    1be6:	98 87       	std	Y+8, r25	; 0x08
    1be8:	a9 87       	std	Y+9, r26	; 0x09
    1bea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bec:	6f 81       	ldd	r22, Y+7	; 0x07
    1bee:	78 85       	ldd	r23, Y+8	; 0x08
    1bf0:	89 85       	ldd	r24, Y+9	; 0x09
    1bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_Write_CMD+0x128>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_Write_CMD+0x1a6>
	else if (__tmp > 65535)
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_Write_CMD+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_Write_CMD+0x188>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_Write_CMD+0x176>
    1c60:	9c 83       	std	Y+4, r25	; 0x04
    1c62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_Write_CMD+0x16a>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <LCD_Write_CMD+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7a:	78 85       	ldd	r23, Y+8	; 0x08
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_Write_CMD+0x1b2>
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	62 e0       	ldi	r22, 0x02	; 2
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>

}
    1caa:	2f 96       	adiw	r28, 0x0f	; 15
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <LCD_Init>:

void LCD_Init(void)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	ea 97       	sbiw	r28, 0x3a	; 58
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
	uint8 i,j;

	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_0,LCD_DATA_PIN_0,OUTPUT);
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_1,LCD_DATA_PIN_1,OUTPUT);
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_2,LCD_DATA_PIN_2,OUTPUT);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	62 e0       	ldi	r22, 0x02	; 2
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_3,LCD_DATA_PIN_3,OUTPUT);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	63 e0       	ldi	r22, 0x03	; 3
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_4,LCD_DATA_PIN_4,OUTPUT);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	64 e0       	ldi	r22, 0x04	; 4
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_5,LCD_DATA_PIN_5,OUTPUT);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	65 e0       	ldi	r22, 0x05	; 5
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_6,LCD_DATA_PIN_6,OUTPUT);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	66 e0       	ldi	r22, 0x06	; 6
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_DATA_PORT_7,LCD_DATA_PIN_7,OUTPUT);
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	67 e0       	ldi	r22, 0x07	; 7
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>

	DIO_u8Set_Pin_Dir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	62 e0       	ldi	r22, 0x02	; 2
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e2       	ldi	r26, 0x20	; 32
    1d44:	b2 e4       	ldi	r27, 0x42	; 66
    1d46:	8d ab       	std	Y+53, r24	; 0x35
    1d48:	9e ab       	std	Y+54, r25	; 0x36
    1d4a:	af ab       	std	Y+55, r26	; 0x37
    1d4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	89 ab       	std	Y+49, r24	; 0x31
    1d68:	9a ab       	std	Y+50, r25	; 0x32
    1d6a:	ab ab       	std	Y+51, r26	; 0x33
    1d6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d70:	7a a9       	ldd	r23, Y+50	; 0x32
    1d72:	8b a9       	ldd	r24, Y+51	; 0x33
    1d74:	9c a9       	ldd	r25, Y+52	; 0x34
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_Init+0xd4>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_Init+0x152>
	else if (__tmp > 65535)
    1d90:	69 a9       	ldd	r22, Y+49	; 0x31
    1d92:	7a a9       	ldd	r23, Y+50	; 0x32
    1d94:	8b a9       	ldd	r24, Y+51	; 0x33
    1d96:	9c a9       	ldd	r25, Y+52	; 0x34
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_Init+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6d a9       	ldd	r22, Y+53	; 0x35
    1daa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	98 ad       	ldd	r25, Y+56	; 0x38
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	98 ab       	std	Y+48, r25	; 0x30
    1dce:	8f a7       	std	Y+47, r24	; 0x2f
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_Init+0x134>
    1dd2:	88 ec       	ldi	r24, 0xC8	; 200
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e a7       	std	Y+46, r25	; 0x2e
    1dd8:	8d a7       	std	Y+45, r24	; 0x2d
    1dda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_Init+0x122>
    1de2:	9e a7       	std	Y+46, r25	; 0x2e
    1de4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df2:	98 a9       	ldd	r25, Y+48	; 0x30
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_Init+0x116>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD_Init+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	9c a7       	std	Y+44, r25	; 0x2c
    1e14:	8b a7       	std	Y+43, r24	; 0x2b
    1e16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_Init+0x15e>
    1e1e:	9c a7       	std	Y+44, r25	; 0x2c
    1e20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);

	LCD_Write_CMD(LCD_FUNC_SET);
    1e22:	88 e3       	ldi	r24, 0x38	; 56
    1e24:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e8       	ldi	r26, 0x80	; 128
    1e2e:	bf e3       	ldi	r27, 0x3F	; 63
    1e30:	8f a3       	std	Y+39, r24	; 0x27
    1e32:	98 a7       	std	Y+40, r25	; 0x28
    1e34:	a9 a7       	std	Y+41, r26	; 0x29
    1e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8b a3       	std	Y+35, r24	; 0x23
    1e52:	9c a3       	std	Y+36, r25	; 0x24
    1e54:	ad a3       	std	Y+37, r26	; 0x25
    1e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_Init+0x1be>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_Init+0x23c>
	else if (__tmp > 65535)
    1e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e80:	9e a1       	ldd	r25, Y+38	; 0x26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_Init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6f a1       	ldd	r22, Y+39	; 0x27
    1e94:	78 a5       	ldd	r23, Y+40	; 0x28
    1e96:	89 a5       	ldd	r24, Y+41	; 0x29
    1e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_Init+0x21e>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_Init+0x20c>
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
    1ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_Init+0x200>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_Init+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
    1f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_Init+0x248>
    1f08:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_Write_CMD(LCD_DISP_CTRL);
    1f0c:	8e e0       	ldi	r24, 0x0E	; 14
    1f0e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e8       	ldi	r26, 0x80	; 128
    1f18:	bf e3       	ldi	r27, 0x3F	; 63
    1f1a:	89 8f       	std	Y+25, r24	; 0x19
    1f1c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	69 8d       	ldd	r22, Y+25	; 0x19
    1f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8d 8b       	std	Y+21, r24	; 0x15
    1f3c:	9e 8b       	std	Y+22, r25	; 0x16
    1f3e:	af 8b       	std	Y+23, r26	; 0x17
    1f40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <LCD_Init+0x2a8>
		__ticks = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 8b       	std	Y+20, r25	; 0x14
    1f60:	8b 8b       	std	Y+19, r24	; 0x13
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <LCD_Init+0x326>
	else if (__tmp > 65535)
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	4c f5       	brge	.+82     	; 0x1fce <LCD_Init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <LCD_Init+0x308>
    1fa6:	88 ec       	ldi	r24, 0xC8	; 200
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9a 8b       	std	Y+18, r25	; 0x12
    1fac:	89 8b       	std	Y+17, r24	; 0x11
    1fae:	89 89       	ldd	r24, Y+17	; 0x11
    1fb0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_Init+0x2f6>
    1fb6:	9a 8b       	std	Y+18, r25	; 0x12
    1fb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9c 8b       	std	Y+20, r25	; 0x14
    1fc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f7       	brne	.-38     	; 0x1fa6 <LCD_Init+0x2ea>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <LCD_Init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9c 8b       	std	Y+20, r25	; 0x14
    1fe0:	8b 8b       	std	Y+19, r24	; 0x13
    1fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe6:	98 8b       	std	Y+16, r25	; 0x10
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
    1fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fec:	98 89       	ldd	r25, Y+16	; 0x10
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_Init+0x332>
    1ff2:	98 8b       	std	Y+16, r25	; 0x10
    1ff4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Write_CMD(LCD_DISP_CLR);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 e4       	ldi	r26, 0x40	; 64
    2002:	b0 e4       	ldi	r27, 0x40	; 64
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <LCD_Init+0x392>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <LCD_Init+0x410>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <LCD_Init+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_Init+0x3f2>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_Init+0x3e0>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <LCD_Init+0x3d4>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <LCD_Init+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_Init+0x41c>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	LCD_Write_CMD(LCD_ENGLISH_ENT_MOD_SET);
    20e0:	86 e0       	ldi	r24, 0x06	; 6
    20e2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>



	LCD_Write_CMD(LCD_CGRAM_ADDRESS);
    20e6:	80 e4       	ldi	r24, 0x40	; 64
    20e8:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>


	for(i=0;i<8;i++)
    20ec:	1a ae       	std	Y+58, r1	; 0x3a
    20ee:	20 c0       	rjmp	.+64     	; 0x2130 <LCD_Init+0x474>
	{
		for(j=0;j<8;j++)
    20f0:	19 ae       	std	Y+57, r1	; 0x39
    20f2:	18 c0       	rjmp	.+48     	; 0x2124 <LCD_Init+0x468>
		{
			LCD_WRITE_CHAR(LCD_u8CustomCharArray[i][j]);
    20f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    20f6:	48 2f       	mov	r20, r24
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	89 ad       	ldd	r24, Y+57	; 0x39
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	ca 01       	movw	r24, r20
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	82 0f       	add	r24, r18
    2110:	93 1f       	adc	r25, r19
    2112:	fc 01       	movw	r30, r24
    2114:	e1 59       	subi	r30, 0x91	; 145
    2116:	fe 4f       	sbci	r31, 0xFE	; 254
    2118:	80 81       	ld	r24, Z
    211a:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_WRITE_CHAR>
	LCD_Write_CMD(LCD_CGRAM_ADDRESS);


	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
    211e:	89 ad       	ldd	r24, Y+57	; 0x39
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	89 af       	std	Y+57, r24	; 0x39
    2124:	89 ad       	ldd	r24, Y+57	; 0x39
    2126:	88 30       	cpi	r24, 0x08	; 8
    2128:	28 f3       	brcs	.-54     	; 0x20f4 <LCD_Init+0x438>


	LCD_Write_CMD(LCD_CGRAM_ADDRESS);


	for(i=0;i<8;i++)
    212a:	8a ad       	ldd	r24, Y+58	; 0x3a
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	8a af       	std	Y+58, r24	; 0x3a
    2130:	8a ad       	ldd	r24, Y+58	; 0x3a
    2132:	88 30       	cpi	r24, 0x08	; 8
    2134:	e8 f2       	brcs	.-70     	; 0x20f0 <LCD_Init+0x434>
		{
			LCD_WRITE_CHAR(LCD_u8CustomCharArray[i][j]);
		}
	}

	LCD_Return_Home();
    2136:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_Return_Home>

}
    213a:	ea 96       	adiw	r28, 0x3a	; 58
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <LCD_CLR_SCR>:
void LCD_CLR_SCR(void)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	2e 97       	sbiw	r28, 0x0e	; 14
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_DISP_CLR);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e4       	ldi	r26, 0x40	; 64
    216c:	b0 e4       	ldi	r27, 0x40	; 64
    216e:	8b 87       	std	Y+11, r24	; 0x0b
    2170:	9c 87       	std	Y+12, r25	; 0x0c
    2172:	ad 87       	std	Y+13, r26	; 0x0d
    2174:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6b 85       	ldd	r22, Y+11	; 0x0b
    2178:	7c 85       	ldd	r23, Y+12	; 0x0c
    217a:	8d 85       	ldd	r24, Y+13	; 0x0d
    217c:	9e 85       	ldd	r25, Y+14	; 0x0e
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a ef       	ldi	r20, 0xFA	; 250
    2184:	54 e4       	ldi	r21, 0x44	; 68
    2186:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8f 83       	std	Y+7, r24	; 0x07
    2190:	98 87       	std	Y+8, r25	; 0x08
    2192:	a9 87       	std	Y+9, r26	; 0x09
    2194:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <LCD_CLR_SCR+0x6c>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9e 83       	std	Y+6, r25	; 0x06
    21b4:	8d 83       	std	Y+5, r24	; 0x05
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <LCD_CLR_SCR+0xea>
	else if (__tmp > 65535)
    21b8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ba:	78 85       	ldd	r23, Y+8	; 0x08
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <LCD_CLR_SCR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <LCD_CLR_SCR+0xcc>
    21fa:	88 ec       	ldi	r24, 0xC8	; 200
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_CLR_SCR+0xba>
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <LCD_CLR_SCR+0xae>
    2220:	14 c0       	rjmp	.+40     	; 0x224a <LCD_CLR_SCR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	6f 81       	ldd	r22, Y+7	; 0x07
    2224:	78 85       	ldd	r23, Y+8	; 0x08
    2226:	89 85       	ldd	r24, Y+9	; 0x09
    2228:	9a 85       	ldd	r25, Y+10	; 0x0a
    222a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCD_CLR_SCR+0xf6>
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    224a:	2e 96       	adiw	r28, 0x0e	; 14
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(uint8 u8CharCopy)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	2f 97       	sbiw	r28, 0x0f	; 15
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8Set_Pin_Val(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	61 e0       	ldi	r22, 0x01	; 1
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_0,LCD_DATA_PIN_0,GET_BIT(u8CharCopy,0));
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	98 2f       	mov	r25, r24
    228a:	91 70       	andi	r25, 0x01	; 1
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	49 2f       	mov	r20, r25
    2292:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_1,LCD_DATA_PIN_1,GET_BIT(u8CharCopy,1));
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	86 95       	lsr	r24
    229a:	98 2f       	mov	r25, r24
    229c:	91 70       	andi	r25, 0x01	; 1
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	49 2f       	mov	r20, r25
    22a4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_2,LCD_DATA_PIN_2,GET_BIT(u8CharCopy,2));
    22a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22aa:	86 95       	lsr	r24
    22ac:	86 95       	lsr	r24
    22ae:	98 2f       	mov	r25, r24
    22b0:	91 70       	andi	r25, 0x01	; 1
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	49 2f       	mov	r20, r25
    22b8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_3,LCD_DATA_PIN_3,GET_BIT(u8CharCopy,3));
    22bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22be:	86 95       	lsr	r24
    22c0:	86 95       	lsr	r24
    22c2:	86 95       	lsr	r24
    22c4:	98 2f       	mov	r25, r24
    22c6:	91 70       	andi	r25, 0x01	; 1
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	63 e0       	ldi	r22, 0x03	; 3
    22cc:	49 2f       	mov	r20, r25
    22ce:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_4,LCD_DATA_PIN_4,GET_BIT(u8CharCopy,4));
    22d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d4:	82 95       	swap	r24
    22d6:	8f 70       	andi	r24, 0x0F	; 15
    22d8:	98 2f       	mov	r25, r24
    22da:	91 70       	andi	r25, 0x01	; 1
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	64 e0       	ldi	r22, 0x04	; 4
    22e0:	49 2f       	mov	r20, r25
    22e2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_5,LCD_DATA_PIN_5,GET_BIT(u8CharCopy,5));
    22e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e8:	82 95       	swap	r24
    22ea:	86 95       	lsr	r24
    22ec:	87 70       	andi	r24, 0x07	; 7
    22ee:	98 2f       	mov	r25, r24
    22f0:	91 70       	andi	r25, 0x01	; 1
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	65 e0       	ldi	r22, 0x05	; 5
    22f6:	49 2f       	mov	r20, r25
    22f8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_6,LCD_DATA_PIN_6,GET_BIT(u8CharCopy,6));
    22fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fe:	82 95       	swap	r24
    2300:	86 95       	lsr	r24
    2302:	86 95       	lsr	r24
    2304:	83 70       	andi	r24, 0x03	; 3
    2306:	98 2f       	mov	r25, r24
    2308:	91 70       	andi	r25, 0x01	; 1
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	66 e0       	ldi	r22, 0x06	; 6
    230e:	49 2f       	mov	r20, r25
    2310:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_DATA_PORT_7,LCD_DATA_PIN_7,GET_BIT(u8CharCopy,7));
    2314:	8f 85       	ldd	r24, Y+15	; 0x0f
    2316:	98 2f       	mov	r25, r24
    2318:	99 1f       	adc	r25, r25
    231a:	99 27       	eor	r25, r25
    231c:	99 1f       	adc	r25, r25
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	67 e0       	ldi	r22, 0x07	; 7
    2322:	49 2f       	mov	r20, r25
    2324:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	62 e0       	ldi	r22, 0x02	; 2
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e0       	ldi	r26, 0x00	; 0
    2338:	b0 e4       	ldi	r27, 0x40	; 64
    233a:	8b 87       	std	Y+11, r24	; 0x0b
    233c:	9c 87       	std	Y+12, r25	; 0x0c
    233e:	ad 87       	std	Y+13, r26	; 0x0d
    2340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a ef       	ldi	r20, 0xFA	; 250
    2350:	54 e4       	ldi	r21, 0x44	; 68
    2352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	8f 83       	std	Y+7, r24	; 0x07
    235c:	98 87       	std	Y+8, r25	; 0x08
    235e:	a9 87       	std	Y+9, r26	; 0x09
    2360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_WRITE_CHAR+0x128>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <LCD_WRITE_CHAR+0x1a6>
	else if (__tmp > 65535)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	4f e7       	ldi	r20, 0x7F	; 127
    2392:	57 e4       	ldi	r21, 0x47	; 71
    2394:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2398:	18 16       	cp	r1, r24
    239a:	4c f5       	brge	.+82     	; 0x23ee <LCD_WRITE_CHAR+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_WRITE_CHAR+0x188>
    23c6:	88 ec       	ldi	r24, 0xC8	; 200
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9c 83       	std	Y+4, r25	; 0x04
    23cc:	8b 83       	std	Y+3, r24	; 0x03
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_WRITE_CHAR+0x176>
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <LCD_WRITE_CHAR+0x16a>
    23ec:	14 c0       	rjmp	.+40     	; 0x2416 <LCD_WRITE_CHAR+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	9e 81       	ldd	r25, Y+6	; 0x06
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	9a 81       	ldd	r25, Y+2	; 0x02
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_WRITE_CHAR+0x1b2>
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	62 e0       	ldi	r22, 0x02	; 2
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>


}
    2420:	2f 96       	adiw	r28, 0x0f	; 15
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(const uint8* u8pStringCopy)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <LCD_WRITE_STRING+0x6>
    2438:	0f 92       	push	r0
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9b 83       	std	Y+3, r25	; 0x03
    2440:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <LCD_WRITE_STRING+0x30>
	//	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
	//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8pStringCopy[i]);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	9b 81       	ldd	r25, Y+3	; 0x03
    2450:	fc 01       	movw	r30, r24
    2452:	e2 0f       	add	r30, r18
    2454:	f3 1f       	adc	r31, r19
    2456:	80 81       	ld	r24, Z
    2458:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_WRITE_CHAR>
		i++;
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	89 83       	std	Y+1, r24	; 0x01

}
void LCD_WRITE_STRING(const uint8* u8pStringCopy)
{
	uint8 i=0;
	while(u8pStringCopy[i]!='\0')
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	fc 01       	movw	r30, r24
    246e:	e2 0f       	add	r30, r18
    2470:	f3 1f       	adc	r31, r19
    2472:	80 81       	ld	r24, Z
    2474:	88 23       	and	r24, r24
    2476:	39 f7       	brne	.-50     	; 0x2446 <LCD_WRITE_STRING+0x14>
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
		i++;
	}
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <LCD_WRITE_STRING_Delayed>:
void LCD_WRITE_STRING_Delayed(const uint8* u8pStringCopy,uint16 u8DelayCopy)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	63 97       	sbiw	r28, 0x13	; 19
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	cd bf       	out	0x3d, r28	; 61
    2498:	99 8b       	std	Y+17, r25	; 0x11
    249a:	88 8b       	std	Y+16, r24	; 0x10
    249c:	7b 8b       	std	Y+19, r23	; 0x13
    249e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i=0;
    24a0:	1f 86       	std	Y+15, r1	; 0x0f
    24a2:	87 c0       	rjmp	.+270    	; 0x25b2 <LCD_WRITE_STRING_Delayed+0x12e>
	//	DIO_u8Set_Pin_Val(LCD_RW_PORT,LCD_RW_PIN,LOW);
	//	DIO_u8Set_Port_Val(LCD_DATA_PORT,u8pStringCopy[i]);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,HIGH);
	//	_delay_ms(2);
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
    24a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	88 89       	ldd	r24, Y+16	; 0x10
    24ac:	99 89       	ldd	r25, Y+17	; 0x11
    24ae:	fc 01       	movw	r30, r24
    24b0:	e2 0f       	add	r30, r18
    24b2:	f3 1f       	adc	r31, r19
    24b4:	80 81       	ld	r24, Z
    24b6:	0e 94 2e 11 	call	0x225c	; 0x225c <LCD_WRITE_CHAR>
		_delay_ms(u8DelayCopy);
    24ba:	8a 89       	ldd	r24, Y+18	; 0x12
    24bc:	9b 89       	ldd	r25, Y+19	; 0x13
    24be:	cc 01       	movw	r24, r24
    24c0:	a0 e0       	ldi	r26, 0x00	; 0
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8b 87       	std	Y+11, r24	; 0x0b
    24d2:	9c 87       	std	Y+12, r25	; 0x0c
    24d4:	ad 87       	std	Y+13, r26	; 0x0d
    24d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4a ef       	ldi	r20, 0xFA	; 250
    24e6:	54 e4       	ldi	r21, 0x44	; 68
    24e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	8f 83       	std	Y+7, r24	; 0x07
    24f2:	98 87       	std	Y+8, r25	; 0x08
    24f4:	a9 87       	std	Y+9, r26	; 0x09
    24f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	5f e3       	ldi	r21, 0x3F	; 63
    2508:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    250c:	88 23       	and	r24, r24
    250e:	2c f4       	brge	.+10     	; 0x251a <LCD_WRITE_STRING_Delayed+0x96>
		__ticks = 1;
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
    2518:	3f c0       	rjmp	.+126    	; 0x2598 <LCD_WRITE_STRING_Delayed+0x114>
	else if (__tmp > 65535)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	4c f5       	brge	.+82     	; 0x2584 <LCD_WRITE_STRING_Delayed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	6b 85       	ldd	r22, Y+11	; 0x0b
    2534:	7c 85       	ldd	r23, Y+12	; 0x0c
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e2       	ldi	r20, 0x20	; 32
    2540:	51 e4       	ldi	r21, 0x41	; 65
    2542:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	0f c0       	rjmp	.+30     	; 0x257a <LCD_WRITE_STRING_Delayed+0xf6>
    255c:	88 ec       	ldi	r24, 0xC8	; 200
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9c 83       	std	Y+4, r25	; 0x04
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	9c 81       	ldd	r25, Y+4	; 0x04
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <LCD_WRITE_STRING_Delayed+0xe4>
    256c:	9c 83       	std	Y+4, r25	; 0x04
    256e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257a:	8d 81       	ldd	r24, Y+5	; 0x05
    257c:	9e 81       	ldd	r25, Y+6	; 0x06
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	69 f7       	brne	.-38     	; 0x255c <LCD_WRITE_STRING_Delayed+0xd8>
    2582:	14 c0       	rjmp	.+40     	; 0x25ac <LCD_WRITE_STRING_Delayed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	89 83       	std	Y+1, r24	; 0x01
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_WRITE_STRING_Delayed+0x120>
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
		i++;
    25ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ae:	8f 5f       	subi	r24, 0xFF	; 255
    25b0:	8f 87       	std	Y+15, r24	; 0x0f
	}
}
void LCD_WRITE_STRING_Delayed(const uint8* u8pStringCopy,uint16 u8DelayCopy)
{
	uint8 i=0;
	while(u8pStringCopy[i]!='\0')
    25b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	88 89       	ldd	r24, Y+16	; 0x10
    25ba:	99 89       	ldd	r25, Y+17	; 0x11
    25bc:	fc 01       	movw	r30, r24
    25be:	e2 0f       	add	r30, r18
    25c0:	f3 1f       	adc	r31, r19
    25c2:	80 81       	ld	r24, Z
    25c4:	88 23       	and	r24, r24
    25c6:	09 f0       	breq	.+2      	; 0x25ca <LCD_WRITE_STRING_Delayed+0x146>
    25c8:	6d cf       	rjmp	.-294    	; 0x24a4 <LCD_WRITE_STRING_Delayed+0x20>
	//	DIO_u8Set_Pin_Val(LCD_EN_PORT,LCD_EN_PIN,LOW);
		LCD_WRITE_CHAR(u8pStringCopy[i]);
		_delay_ms(u8DelayCopy);
		i++;
	}
}
    25ca:	63 96       	adiw	r28, 0x13	; 19
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <LCD_Entry_Mode_Arabic>:
void LCD_Entry_Mode_Arabic(void)
{
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	2e 97       	sbiw	r28, 0x0e	; 14
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_ARABIC_ENT_MOD_SET);
    25f0:	84 e0       	ldi	r24, 0x04	; 4
    25f2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b0 e4       	ldi	r27, 0x40	; 64
    25fe:	8b 87       	std	Y+11, r24	; 0x0b
    2600:	9c 87       	std	Y+12, r25	; 0x0c
    2602:	ad 87       	std	Y+13, r26	; 0x0d
    2604:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2606:	6b 85       	ldd	r22, Y+11	; 0x0b
    2608:	7c 85       	ldd	r23, Y+12	; 0x0c
    260a:	8d 85       	ldd	r24, Y+13	; 0x0d
    260c:	9e 85       	ldd	r25, Y+14	; 0x0e
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a ef       	ldi	r20, 0xFA	; 250
    2614:	54 e4       	ldi	r21, 0x44	; 68
    2616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	8f 83       	std	Y+7, r24	; 0x07
    2620:	98 87       	std	Y+8, r25	; 0x08
    2622:	a9 87       	std	Y+9, r26	; 0x09
    2624:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2626:	6f 81       	ldd	r22, Y+7	; 0x07
    2628:	78 85       	ldd	r23, Y+8	; 0x08
    262a:	89 85       	ldd	r24, Y+9	; 0x09
    262c:	9a 85       	ldd	r25, Y+10	; 0x0a
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	2c f4       	brge	.+10     	; 0x2648 <LCD_Entry_Mode_Arabic+0x6c>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	3f c0       	rjmp	.+126    	; 0x26c6 <LCD_Entry_Mode_Arabic+0xea>
	else if (__tmp > 65535)
    2648:	6f 81       	ldd	r22, Y+7	; 0x07
    264a:	78 85       	ldd	r23, Y+8	; 0x08
    264c:	89 85       	ldd	r24, Y+9	; 0x09
    264e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    265c:	18 16       	cp	r1, r24
    265e:	4c f5       	brge	.+82     	; 0x26b2 <LCD_Entry_Mode_Arabic+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	0f c0       	rjmp	.+30     	; 0x26a8 <LCD_Entry_Mode_Arabic+0xcc>
    268a:	88 ec       	ldi	r24, 0xC8	; 200
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_Entry_Mode_Arabic+0xba>
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	8d 81       	ldd	r24, Y+5	; 0x05
    26a0:	9e 81       	ldd	r25, Y+6	; 0x06
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	69 f7       	brne	.-38     	; 0x268a <LCD_Entry_Mode_Arabic+0xae>
    26b0:	14 c0       	rjmp	.+40     	; 0x26da <LCD_Entry_Mode_Arabic+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b2:	6f 81       	ldd	r22, Y+7	; 0x07
    26b4:	78 85       	ldd	r23, Y+8	; 0x08
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_Entry_Mode_Arabic+0xf6>
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    26da:	2e 96       	adiw	r28, 0x0e	; 14
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <LCD_GoTo_X_Y>:
void LCD_GoTo_X_Y(uint8 X,uint8 Y )
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <LCD_GoTo_X_Y+0x6>
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <LCD_GoTo_X_Y+0x8>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Y)
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	3c 83       	std	Y+4, r19	; 0x04
    2704:	2b 83       	std	Y+3, r18	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	81 30       	cpi	r24, 0x01	; 1
    270c:	91 05       	cpc	r25, r1
    270e:	31 f0       	breq	.+12     	; 0x271c <LCD_GoTo_X_Y+0x30>
    2710:	2b 81       	ldd	r18, Y+3	; 0x03
    2712:	3c 81       	ldd	r19, Y+4	; 0x04
    2714:	22 30       	cpi	r18, 0x02	; 2
    2716:	31 05       	cpc	r19, r1
    2718:	31 f0       	breq	.+12     	; 0x2726 <LCD_GoTo_X_Y+0x3a>
    271a:	09 c0       	rjmp	.+18     	; 0x272e <LCD_GoTo_X_Y+0x42>
	{
		case 1:
			LCD_Write_CMD(LCD_JMP_TOP_LEFT+X);
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	80 58       	subi	r24, 0x80	; 128
    2720:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2724:	04 c0       	rjmp	.+8      	; 0x272e <LCD_GoTo_X_Y+0x42>
			break;
		case 2:
			LCD_Write_CMD(LCD_JMP_BOT_LEFT+X);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	80 54       	subi	r24, 0x40	; 64
    272a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
			break;
	}

}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_Return_Home>:
void LCD_Return_Home(void)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	2e 97       	sbiw	r28, 0x0e	; 14
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_RET_HOME);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e0       	ldi	r26, 0x00	; 0
    275c:	b0 e4       	ldi	r27, 0x40	; 64
    275e:	8b 87       	std	Y+11, r24	; 0x0b
    2760:	9c 87       	std	Y+12, r25	; 0x0c
    2762:	ad 87       	std	Y+13, r26	; 0x0d
    2764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a ef       	ldi	r20, 0xFA	; 250
    2774:	54 e4       	ldi	r21, 0x44	; 68
    2776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8f 83       	std	Y+7, r24	; 0x07
    2780:	98 87       	std	Y+8, r25	; 0x08
    2782:	a9 87       	std	Y+9, r26	; 0x09
    2784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <LCD_Return_Home+0x6c>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	3f c0       	rjmp	.+126    	; 0x2826 <LCD_Return_Home+0xea>
	else if (__tmp > 65535)
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	3f ef       	ldi	r19, 0xFF	; 255
    27b4:	4f e7       	ldi	r20, 0x7F	; 127
    27b6:	57 e4       	ldi	r21, 0x47	; 71
    27b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27bc:	18 16       	cp	r1, r24
    27be:	4c f5       	brge	.+82     	; 0x2812 <LCD_Return_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <LCD_Return_Home+0xcc>
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	8b 83       	std	Y+3, r24	; 0x03
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_Return_Home+0xba>
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <LCD_Return_Home+0xae>
    2810:	14 c0       	rjmp	.+40     	; 0x283a <LCD_Return_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <LCD_Return_Home+0xf6>
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    283a:	2e 96       	adiw	r28, 0x0e	; 14
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <LCD_Write_INT>:



//void LCD_Write_INT(sint32 s32IntCopy)
void LCD_Write_INT(const sint32 s32IntCopy)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <LCD_Write_INT+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <LCD_Write_INT+0x8>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <LCD_Write_INT+0xa>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	6b 83       	std	Y+3, r22	; 0x03
    285c:	7c 83       	std	Y+4, r23	; 0x04
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	9e 83       	std	Y+6, r25	; 0x06
//	{
//		str2[begin]=str[i];
//	}
//	str2[begin]='\0';

	itoa(s32IntCopy, str, 10);
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	29 81       	ldd	r18, Y+1	; 0x01
    2868:	3a 81       	ldd	r19, Y+2	; 0x02
    286a:	b9 01       	movw	r22, r18
    286c:	4a e0       	ldi	r20, 0x0A	; 10
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	0e 94 50 19 	call	0x32a0	; 0x32a0 <itoa>
	LCD_WRITE_STRING(str);
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	0e 94 19 12 	call	0x2432	; 0x2432 <LCD_WRITE_STRING>
}
    287c:	26 96       	adiw	r28, 0x06	; 6
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <LCD_SHIFT_Cursor_Left>:
 *
 */


void LCD_SHIFT_Cursor_Left(void)
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	2e 97       	sbiw	r28, 0x0e	; 14
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_Cursor_LEFT);
    28a2:	80 e1       	ldi	r24, 0x10	; 16
    28a4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e0       	ldi	r26, 0x00	; 0
    28ae:	b0 e4       	ldi	r27, 0x40	; 64
    28b0:	8b 87       	std	Y+11, r24	; 0x0b
    28b2:	9c 87       	std	Y+12, r25	; 0x0c
    28b4:	ad 87       	std	Y+13, r26	; 0x0d
    28b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    28bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28be:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a ef       	ldi	r20, 0xFA	; 250
    28c6:	54 e4       	ldi	r21, 0x44	; 68
    28c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8f 83       	std	Y+7, r24	; 0x07
    28d2:	98 87       	std	Y+8, r25	; 0x08
    28d4:	a9 87       	std	Y+9, r26	; 0x09
    28d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <LCD_SHIFT_Cursor_Left+0x6c>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <LCD_SHIFT_Cursor_Left+0xea>
	else if (__tmp > 65535)
    28fa:	6f 81       	ldd	r22, Y+7	; 0x07
    28fc:	78 85       	ldd	r23, Y+8	; 0x08
    28fe:	89 85       	ldd	r24, Y+9	; 0x09
    2900:	9a 85       	ldd	r25, Y+10	; 0x0a
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	57 e4       	ldi	r21, 0x47	; 71
    290a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <LCD_SHIFT_Cursor_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	6b 85       	ldd	r22, Y+11	; 0x0b
    2914:	7c 85       	ldd	r23, Y+12	; 0x0c
    2916:	8d 85       	ldd	r24, Y+13	; 0x0d
    2918:	9e 85       	ldd	r25, Y+14	; 0x0e
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e2       	ldi	r20, 0x20	; 32
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
    293a:	0f c0       	rjmp	.+30     	; 0x295a <LCD_SHIFT_Cursor_Left+0xcc>
    293c:	88 ec       	ldi	r24, 0xC8	; 200
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_SHIFT_Cursor_Left+0xba>
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	00 97       	sbiw	r24, 0x00	; 0
    2960:	69 f7       	brne	.-38     	; 0x293c <LCD_SHIFT_Cursor_Left+0xae>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <LCD_SHIFT_Cursor_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9e 83       	std	Y+6, r25	; 0x06
    2976:	8d 83       	std	Y+5, r24	; 0x05
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	9a 81       	ldd	r25, Y+2	; 0x02
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <LCD_SHIFT_Cursor_Left+0xf6>
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    298c:	2e 96       	adiw	r28, 0x0e	; 14
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <LCD_SHIFT_Cursor_Right>:


void LCD_SHIFT_Cursor_Right(void)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	2e 97       	sbiw	r28, 0x0e	; 14
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_Cursor_RIGHT);
    29b2:	84 e1       	ldi	r24, 0x14	; 20
    29b4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e4       	ldi	r27, 0x40	; 64
    29c0:	8b 87       	std	Y+11, r24	; 0x0b
    29c2:	9c 87       	std	Y+12, r25	; 0x0c
    29c4:	ad 87       	std	Y+13, r26	; 0x0d
    29c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    29cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a ef       	ldi	r20, 0xFA	; 250
    29d6:	54 e4       	ldi	r21, 0x44	; 68
    29d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8f 83       	std	Y+7, r24	; 0x07
    29e2:	98 87       	std	Y+8, r25	; 0x08
    29e4:	a9 87       	std	Y+9, r26	; 0x09
    29e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ea:	78 85       	ldd	r23, Y+8	; 0x08
    29ec:	89 85       	ldd	r24, Y+9	; 0x09
    29ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <LCD_SHIFT_Cursor_Right+0x6c>
		__ticks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9e 83       	std	Y+6, r25	; 0x06
    2a06:	8d 83       	std	Y+5, r24	; 0x05
    2a08:	3f c0       	rjmp	.+126    	; 0x2a88 <LCD_SHIFT_Cursor_Right+0xea>
	else if (__tmp > 65535)
    2a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0c:	78 85       	ldd	r23, Y+8	; 0x08
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	4c f5       	brge	.+82     	; 0x2a74 <LCD_SHIFT_Cursor_Right+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <LCD_SHIFT_Cursor_Right+0xcc>
    2a4c:	88 ec       	ldi	r24, 0xC8	; 200
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_SHIFT_Cursor_Right+0xba>
    2a5c:	9c 83       	std	Y+4, r25	; 0x04
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <LCD_SHIFT_Cursor_Right+0xae>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <LCD_SHIFT_Cursor_Right+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	6f 81       	ldd	r22, Y+7	; 0x07
    2a76:	78 85       	ldd	r23, Y+8	; 0x08
    2a78:	89 85       	ldd	r24, Y+9	; 0x09
    2a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9e 83       	std	Y+6, r25	; 0x06
    2a86:	8d 83       	std	Y+5, r24	; 0x05
    2a88:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	9a 81       	ldd	r25, Y+2	; 0x02
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <LCD_SHIFT_Cursor_Right+0xf6>
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2a9c:	2e 96       	adiw	r28, 0x0e	; 14
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <LCD_SHIFT_Display_Right>:



void LCD_SHIFT_Display_Right(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_DSP_RIGHT);
    2ac2:	8c e1       	ldi	r24, 0x1C	; 28
    2ac4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	b0 e4       	ldi	r27, 0x40	; 64
    2ad0:	8b 87       	std	Y+11, r24	; 0x0b
    2ad2:	9c 87       	std	Y+12, r25	; 0x0c
    2ad4:	ad 87       	std	Y+13, r26	; 0x0d
    2ad6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a ef       	ldi	r20, 0xFA	; 250
    2ae6:	54 e4       	ldi	r21, 0x44	; 68
    2ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	8f 83       	std	Y+7, r24	; 0x07
    2af2:	98 87       	std	Y+8, r25	; 0x08
    2af4:	a9 87       	std	Y+9, r26	; 0x09
    2af6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af8:	6f 81       	ldd	r22, Y+7	; 0x07
    2afa:	78 85       	ldd	r23, Y+8	; 0x08
    2afc:	89 85       	ldd	r24, Y+9	; 0x09
    2afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <LCD_SHIFT_Display_Right+0x6c>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <LCD_SHIFT_Display_Right+0xea>
	else if (__tmp > 65535)
    2b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1c:	78 85       	ldd	r23, Y+8	; 0x08
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <LCD_SHIFT_Display_Right+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <LCD_SHIFT_Display_Right+0xcc>
    2b5c:	88 ec       	ldi	r24, 0xC8	; 200
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9c 83       	std	Y+4, r25	; 0x04
    2b62:	8b 83       	std	Y+3, r24	; 0x03
    2b64:	8b 81       	ldd	r24, Y+3	; 0x03
    2b66:	9c 81       	ldd	r25, Y+4	; 0x04
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_SHIFT_Display_Right+0xba>
    2b6c:	9c 83       	std	Y+4, r25	; 0x04
    2b6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	8d 81       	ldd	r24, Y+5	; 0x05
    2b72:	9e 81       	ldd	r25, Y+6	; 0x06
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	9e 83       	std	Y+6, r25	; 0x06
    2b78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <LCD_SHIFT_Display_Right+0xae>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <LCD_SHIFT_Display_Right+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	9a 83       	std	Y+2, r25	; 0x02
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_SHIFT_Display_Right+0xf6>
    2ba8:	9a 83       	std	Y+2, r25	; 0x02
    2baa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2bac:	2e 96       	adiw	r28, 0x0e	; 14
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <LCD_SHIFT_Display_Left>:



void LCD_SHIFT_Display_Left(void)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_SHIFT_DSP_LEFT);
    2bd2:	88 e1       	ldi	r24, 0x18	; 24
    2bd4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a0 e0       	ldi	r26, 0x00	; 0
    2bde:	b0 e4       	ldi	r27, 0x40	; 64
    2be0:	8b 87       	std	Y+11, r24	; 0x0b
    2be2:	9c 87       	std	Y+12, r25	; 0x0c
    2be4:	ad 87       	std	Y+13, r26	; 0x0d
    2be6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a ef       	ldi	r20, 0xFA	; 250
    2bf6:	54 e4       	ldi	r21, 0x44	; 68
    2bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8f 83       	std	Y+7, r24	; 0x07
    2c02:	98 87       	std	Y+8, r25	; 0x08
    2c04:	a9 87       	std	Y+9, r26	; 0x09
    2c06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e8       	ldi	r20, 0x80	; 128
    2c16:	5f e3       	ldi	r21, 0x3F	; 63
    2c18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c1c:	88 23       	and	r24, r24
    2c1e:	2c f4       	brge	.+10     	; 0x2c2a <LCD_SHIFT_Display_Left+0x6c>
		__ticks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <LCD_SHIFT_Display_Left+0xea>
	else if (__tmp > 65535)
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	3f ef       	ldi	r19, 0xFF	; 255
    2c36:	4f e7       	ldi	r20, 0x7F	; 127
    2c38:	57 e4       	ldi	r21, 0x47	; 71
    2c3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c3e:	18 16       	cp	r1, r24
    2c40:	4c f5       	brge	.+82     	; 0x2c94 <LCD_SHIFT_Display_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e2       	ldi	r20, 0x20	; 32
    2c50:	51 e4       	ldi	r21, 0x41	; 65
    2c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <LCD_SHIFT_Display_Left+0xcc>
    2c6c:	88 ec       	ldi	r24, 0xC8	; 200
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9c 83       	std	Y+4, r25	; 0x04
    2c72:	8b 83       	std	Y+3, r24	; 0x03
    2c74:	8b 81       	ldd	r24, Y+3	; 0x03
    2c76:	9c 81       	ldd	r25, Y+4	; 0x04
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	f1 f7       	brne	.-4      	; 0x2c78 <LCD_SHIFT_Display_Left+0xba>
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	69 f7       	brne	.-38     	; 0x2c6c <LCD_SHIFT_Display_Left+0xae>
    2c92:	14 c0       	rjmp	.+40     	; 0x2cbc <LCD_SHIFT_Display_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	9a 83       	std	Y+2, r25	; 0x02
    2cae:	89 83       	std	Y+1, r24	; 0x01
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_SHIFT_Display_Left+0xf6>
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2cbc:	2e 96       	adiw	r28, 0x0e	; 14
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <LCD_JMP_Bottom_Left>:


void LCD_JMP_Bottom_Left(void)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	2e 97       	sbiw	r28, 0x0e	; 14
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_JMP_BOT_LEFT);
    2ce2:	80 ec       	ldi	r24, 0xC0	; 192
    2ce4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	a0 e0       	ldi	r26, 0x00	; 0
    2cee:	b0 e4       	ldi	r27, 0x40	; 64
    2cf0:	8b 87       	std	Y+11, r24	; 0x0b
    2cf2:	9c 87       	std	Y+12, r25	; 0x0c
    2cf4:	ad 87       	std	Y+13, r26	; 0x0d
    2cf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a ef       	ldi	r20, 0xFA	; 250
    2d06:	54 e4       	ldi	r21, 0x44	; 68
    2d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	8f 83       	std	Y+7, r24	; 0x07
    2d12:	98 87       	std	Y+8, r25	; 0x08
    2d14:	a9 87       	std	Y+9, r26	; 0x09
    2d16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d18:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1a:	78 85       	ldd	r23, Y+8	; 0x08
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d2c:	88 23       	and	r24, r24
    2d2e:	2c f4       	brge	.+10     	; 0x2d3a <LCD_JMP_Bottom_Left+0x6c>
		__ticks = 1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	8d 83       	std	Y+5, r24	; 0x05
    2d38:	3f c0       	rjmp	.+126    	; 0x2db8 <LCD_JMP_Bottom_Left+0xea>
	else if (__tmp > 65535)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	4c f5       	brge	.+82     	; 0x2da4 <LCD_JMP_Bottom_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	51 e4       	ldi	r21, 0x41	; 65
    2d62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	0f c0       	rjmp	.+30     	; 0x2d9a <LCD_JMP_Bottom_Left+0xcc>
    2d7c:	88 ec       	ldi	r24, 0xC8	; 200
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_JMP_Bottom_Left+0xba>
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	69 f7       	brne	.-38     	; 0x2d7c <LCD_JMP_Bottom_Left+0xae>
    2da2:	14 c0       	rjmp	.+40     	; 0x2dcc <LCD_JMP_Bottom_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <LCD_JMP_Bottom_Left+0xf6>
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2dcc:	2e 96       	adiw	r28, 0x0e	; 14
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <LCD_JMP_UP_Left>:


void LCD_JMP_UP_Left(void)
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	2e 97       	sbiw	r28, 0x0e	; 14
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_CMD(LCD_JMP_TOP_LEFT);
    2df2:	80 e8       	ldi	r24, 0x80	; 128
    2df4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LCD_Write_CMD>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	a0 e0       	ldi	r26, 0x00	; 0
    2dfe:	b0 e4       	ldi	r27, 0x40	; 64
    2e00:	8b 87       	std	Y+11, r24	; 0x0b
    2e02:	9c 87       	std	Y+12, r25	; 0x0c
    2e04:	ad 87       	std	Y+13, r26	; 0x0d
    2e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	4a ef       	ldi	r20, 0xFA	; 250
    2e16:	54 e4       	ldi	r21, 0x44	; 68
    2e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	8f 83       	std	Y+7, r24	; 0x07
    2e22:	98 87       	std	Y+8, r25	; 0x08
    2e24:	a9 87       	std	Y+9, r26	; 0x09
    2e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	2c f4       	brge	.+10     	; 0x2e4a <LCD_JMP_UP_Left+0x6c>
		__ticks = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	3f c0       	rjmp	.+126    	; 0x2ec8 <LCD_JMP_UP_Left+0xea>
	else if (__tmp > 65535)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	4c f5       	brge	.+82     	; 0x2eb4 <LCD_JMP_UP_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <LCD_JMP_UP_Left+0xcc>
    2e8c:	88 ec       	ldi	r24, 0xC8	; 200
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9c 83       	std	Y+4, r25	; 0x04
    2e92:	8b 83       	std	Y+3, r24	; 0x03
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <LCD_JMP_UP_Left+0xba>
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	69 f7       	brne	.-38     	; 0x2e8c <LCD_JMP_UP_Left+0xae>
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <LCD_JMP_UP_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <LCD_JMP_UP_Left+0xf6>
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2edc:	2e 96       	adiw	r28, 0x0e	; 14
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <Keypad_Int>:
#include "keypad_config.h"



void Keypad_Int(void)
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Set Row and Columns as Input
	 */

	DIO_u8Set_Pin_Dir(PORTC1,PINC1,INPUT);
    2ef6:	83 e0       	ldi	r24, 0x03	; 3
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC2,PINC2,INPUT);
    2f00:	83 e0       	ldi	r24, 0x03	; 3
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC3,PINC3,INPUT);
    2f0a:	83 e0       	ldi	r24, 0x03	; 3
    2f0c:	62 e0       	ldi	r22, 0x02	; 2
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTC4,PINC4,INPUT);
    2f14:	83 e0       	ldi	r24, 0x03	; 3
    2f16:	63 e0       	ldi	r22, 0x03	; 3
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR1,PINR1,OUTPUT);
    2f1e:	83 e0       	ldi	r24, 0x03	; 3
    2f20:	64 e0       	ldi	r22, 0x04	; 4
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR2,PINR2,OUTPUT);
    2f28:	83 e0       	ldi	r24, 0x03	; 3
    2f2a:	65 e0       	ldi	r22, 0x05	; 5
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR3,PINR3,OUTPUT);
    2f32:	83 e0       	ldi	r24, 0x03	; 3
    2f34:	66 e0       	ldi	r22, 0x06	; 6
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Dir(PORTR4,PINR4,OUTPUT);
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	67 e0       	ldi	r22, 0x07	; 7
    2f40:	41 e0       	ldi	r20, 0x01	; 1
    2f42:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>

	/*
	 * 	Set PULL UP
	 */

	DIO_u8Set_Pin_Val(PORTC1,PINC1,PUE);
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	41 e0       	ldi	r20, 0x01	; 1
    2f4c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC2,PINC2,PUE);
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	41 e0       	ldi	r20, 0x01	; 1
    2f56:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC3,PINC3,PUE);
    2f5a:	83 e0       	ldi	r24, 0x03	; 3
    2f5c:	62 e0       	ldi	r22, 0x02	; 2
    2f5e:	41 e0       	ldi	r20, 0x01	; 1
    2f60:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTC4,PINC4,PUE);
    2f64:	83 e0       	ldi	r24, 0x03	; 3
    2f66:	63 e0       	ldi	r22, 0x03	; 3
    2f68:	41 e0       	ldi	r20, 0x01	; 1
    2f6a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR1,PINR1,HIGH);
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	64 e0       	ldi	r22, 0x04	; 4
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR2,PINR2,HIGH);
    2f78:	83 e0       	ldi	r24, 0x03	; 3
    2f7a:	65 e0       	ldi	r22, 0x05	; 5
    2f7c:	41 e0       	ldi	r20, 0x01	; 1
    2f7e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR3,PINR3,HIGH);
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	66 e0       	ldi	r22, 0x06	; 6
    2f86:	41 e0       	ldi	r20, 0x01	; 1
    2f88:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
	DIO_u8Set_Pin_Val(PORTR4,PINR4,HIGH);
    2f8c:	83 e0       	ldi	r24, 0x03	; 3
    2f8e:	67 e0       	ldi	r22, 0x07	; 7
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>

}
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <Keypad_u8Selector>:



uint8 Keypad_u8Selector(void)
{
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	a9 97       	sbiw	r28, 0x29	; 41
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
	uint8 port_col[4]={PORTC1,PORTC2,PORTC3,PORTC4};
    2fb0:	83 e0       	ldi	r24, 0x03	; 3
    2fb2:	8c 83       	std	Y+4, r24	; 0x04
    2fb4:	83 e0       	ldi	r24, 0x03	; 3
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
    2fb8:	83 e0       	ldi	r24, 0x03	; 3
    2fba:	8e 83       	std	Y+6, r24	; 0x06
    2fbc:	83 e0       	ldi	r24, 0x03	; 3
    2fbe:	8f 83       	std	Y+7, r24	; 0x07
	uint8 port_row[4]={PORTR1,PORTR2,PORTR3,PORTR4};
    2fc0:	83 e0       	ldi	r24, 0x03	; 3
    2fc2:	88 87       	std	Y+8, r24	; 0x08
    2fc4:	83 e0       	ldi	r24, 0x03	; 3
    2fc6:	89 87       	std	Y+9, r24	; 0x09
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	8a 87       	std	Y+10, r24	; 0x0a
    2fcc:	83 e0       	ldi	r24, 0x03	; 3
    2fce:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 pin_col[4]={PINC1,PINC2,PINC3,PINC4};
    2fd0:	1c 86       	std	Y+12, r1	; 0x0c
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	8d 87       	std	Y+13, r24	; 0x0d
    2fd6:	82 e0       	ldi	r24, 0x02	; 2
    2fd8:	8e 87       	std	Y+14, r24	; 0x0e
    2fda:	83 e0       	ldi	r24, 0x03	; 3
    2fdc:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 pin_row[4]={PINR1,PINR2,PINR3,PINR4};
    2fde:	84 e0       	ldi	r24, 0x04	; 4
    2fe0:	88 8b       	std	Y+16, r24	; 0x10
    2fe2:	85 e0       	ldi	r24, 0x05	; 5
    2fe4:	89 8b       	std	Y+17, r24	; 0x11
    2fe6:	86 e0       	ldi	r24, 0x06	; 6
    2fe8:	8a 8b       	std	Y+18, r24	; 0x12
    2fea:	87 e0       	ldi	r24, 0x07	; 7
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 Local_Col_Count,Local_Row_Count;
	uint8 Local_Button_Status;
	uint8 Local_Return_Status=KEY_NOT_PRESSED;
    2fee:	8f ef       	ldi	r24, 0xFF	; 255
    2ff0:	89 83       	std	Y+1, r24	; 0x01
				13,	//ROW 3 Col 0
				14,	//ROW 3 Col 1
				15,	//ROW 3 Col 2
				16,	//ROW 3 Col 3
			}
	};
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	45 96       	adiw	r24, 0x15	; 21
    2ff6:	9e a3       	std	Y+38, r25	; 0x26
    2ff8:	8d a3       	std	Y+37, r24	; 0x25
    2ffa:	ef ea       	ldi	r30, 0xAF	; 175
    2ffc:	f1 e0       	ldi	r31, 0x01	; 1
    2ffe:	f8 a7       	std	Y+40, r31	; 0x28
    3000:	ef a3       	std	Y+39, r30	; 0x27
    3002:	f0 e1       	ldi	r31, 0x10	; 16
    3004:	f9 a7       	std	Y+41, r31	; 0x29
    3006:	ef a1       	ldd	r30, Y+39	; 0x27
    3008:	f8 a5       	ldd	r31, Y+40	; 0x28
    300a:	00 80       	ld	r0, Z
    300c:	8f a1       	ldd	r24, Y+39	; 0x27
    300e:	98 a5       	ldd	r25, Y+40	; 0x28
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	98 a7       	std	Y+40, r25	; 0x28
    3014:	8f a3       	std	Y+39, r24	; 0x27
    3016:	ed a1       	ldd	r30, Y+37	; 0x25
    3018:	fe a1       	ldd	r31, Y+38	; 0x26
    301a:	00 82       	st	Z, r0
    301c:	8d a1       	ldd	r24, Y+37	; 0x25
    301e:	9e a1       	ldd	r25, Y+38	; 0x26
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	9e a3       	std	Y+38, r25	; 0x26
    3024:	8d a3       	std	Y+37, r24	; 0x25
    3026:	99 a5       	ldd	r25, Y+41	; 0x29
    3028:	91 50       	subi	r25, 0x01	; 1
    302a:	99 a7       	std	Y+41, r25	; 0x29
    302c:	e9 a5       	ldd	r30, Y+41	; 0x29
    302e:	ee 23       	and	r30, r30
    3030:	51 f7       	brne	.-44     	; 0x3006 <Keypad_u8Selector+0x6a>


	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
    3032:	1a 82       	std	Y+2, r1	; 0x02
    3034:	89 c0       	rjmp	.+274    	; 0x3148 <Keypad_u8Selector+0x1ac>
	{

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],LOW);
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	ce 01       	movw	r24, r28
    303e:	08 96       	adiw	r24, 0x08	; 8
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	40 81       	ld	r20, Z
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	ce 01       	movw	r24, r28
    3050:	40 96       	adiw	r24, 0x10	; 16
    3052:	fc 01       	movw	r30, r24
    3054:	e2 0f       	add	r30, r18
    3056:	f3 1f       	adc	r31, r19
    3058:	90 81       	ld	r25, Z
    305a:	84 2f       	mov	r24, r20
    305c:	69 2f       	mov	r22, r25
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
		for(Local_Col_Count=0;Local_Col_Count<KEYPAD_COLS;Local_Col_Count++)
    3064:	1b 82       	std	Y+3, r1	; 0x03
    3066:	52 c0       	rjmp	.+164    	; 0x310c <Keypad_u8Selector+0x170>
		{

			DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	ce 01       	movw	r24, r28
    3070:	04 96       	adiw	r24, 0x04	; 4
    3072:	fc 01       	movw	r30, r24
    3074:	e2 0f       	add	r30, r18
    3076:	f3 1f       	adc	r31, r19
    3078:	40 81       	ld	r20, Z
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	ce 01       	movw	r24, r28
    3082:	0c 96       	adiw	r24, 0x0c	; 12
    3084:	fc 01       	movw	r30, r24
    3086:	e2 0f       	add	r30, r18
    3088:	f3 1f       	adc	r31, r19
    308a:	90 81       	ld	r25, Z
    308c:	9e 01       	movw	r18, r28
    308e:	2c 5e       	subi	r18, 0xEC	; 236
    3090:	3f 4f       	sbci	r19, 0xFF	; 255
    3092:	84 2f       	mov	r24, r20
    3094:	69 2f       	mov	r22, r25
    3096:	a9 01       	movw	r20, r18
    3098:	0e 94 ad 0b 	call	0x175a	; 0x175a <DIO_u8Get_Pin_Val>
			if(Local_Button_Status==0)
    309c:	8c 89       	ldd	r24, Y+20	; 0x14
    309e:	88 23       	and	r24, r24
    30a0:	91 f5       	brne	.+100    	; 0x3106 <Keypad_u8Selector+0x16a>
			{
				Local_Return_Status=KEYPAD_au8KeyVal[Local_Row_Count][Local_Col_Count];
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	48 2f       	mov	r20, r24
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	22 0f       	add	r18, r18
    30b4:	33 1f       	adc	r19, r19
    30b6:	ce 01       	movw	r24, r28
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	82 0f       	add	r24, r18
    30bc:	93 1f       	adc	r25, r19
    30be:	84 0f       	add	r24, r20
    30c0:	95 1f       	adc	r25, r21
    30c2:	fc 01       	movw	r30, r24
    30c4:	74 96       	adiw	r30, 0x14	; 20
    30c6:	80 81       	ld	r24, Z
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	1a c0       	rjmp	.+52     	; 0x3100 <Keypad_u8Selector+0x164>
#if KEYPAD_MODE==KEYPAD_POLLING
				while(Local_Button_Status==0)
				{
					DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	28 2f       	mov	r18, r24
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	ce 01       	movw	r24, r28
    30d4:	04 96       	adiw	r24, 0x04	; 4
    30d6:	fc 01       	movw	r30, r24
    30d8:	e2 0f       	add	r30, r18
    30da:	f3 1f       	adc	r31, r19
    30dc:	40 81       	ld	r20, Z
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	ce 01       	movw	r24, r28
    30e6:	0c 96       	adiw	r24, 0x0c	; 12
    30e8:	fc 01       	movw	r30, r24
    30ea:	e2 0f       	add	r30, r18
    30ec:	f3 1f       	adc	r31, r19
    30ee:	90 81       	ld	r25, Z
    30f0:	9e 01       	movw	r18, r28
    30f2:	2c 5e       	subi	r18, 0xEC	; 236
    30f4:	3f 4f       	sbci	r19, 0xFF	; 255
    30f6:	84 2f       	mov	r24, r20
    30f8:	69 2f       	mov	r22, r25
    30fa:	a9 01       	movw	r20, r18
    30fc:	0e 94 ad 0b 	call	0x175a	; 0x175a <DIO_u8Get_Pin_Val>
			DIO_u8Get_Pin_Val(port_col[Local_Col_Count],pin_col[Local_Col_Count],&Local_Button_Status);
			if(Local_Button_Status==0)
			{
				Local_Return_Status=KEYPAD_au8KeyVal[Local_Row_Count][Local_Col_Count];
#if KEYPAD_MODE==KEYPAD_POLLING
				while(Local_Button_Status==0)
    3100:	8c 89       	ldd	r24, Y+20	; 0x14
    3102:	88 23       	and	r24, r24
    3104:	19 f3       	breq	.-58     	; 0x30cc <Keypad_u8Selector+0x130>

	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
	{

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],LOW);
		for(Local_Col_Count=0;Local_Col_Count<KEYPAD_COLS;Local_Col_Count++)
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	8b 83       	std	Y+3, r24	; 0x03
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	84 30       	cpi	r24, 0x04	; 4
    3110:	08 f4       	brcc	.+2      	; 0x3114 <Keypad_u8Selector+0x178>
    3112:	aa cf       	rjmp	.-172    	; 0x3068 <Keypad_u8Selector+0xcc>

			}

		}

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],HIGH);
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	ce 01       	movw	r24, r28
    311c:	08 96       	adiw	r24, 0x08	; 8
    311e:	fc 01       	movw	r30, r24
    3120:	e2 0f       	add	r30, r18
    3122:	f3 1f       	adc	r31, r19
    3124:	40 81       	ld	r20, Z
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	ce 01       	movw	r24, r28
    312e:	40 96       	adiw	r24, 0x10	; 16
    3130:	fc 01       	movw	r30, r24
    3132:	e2 0f       	add	r30, r18
    3134:	f3 1f       	adc	r31, r19
    3136:	90 81       	ld	r25, Z
    3138:	84 2f       	mov	r24, r20
    313a:	69 2f       	mov	r22, r25
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
				16,	//ROW 3 Col 3
			}
	};


	for(Local_Row_Count=0;Local_Row_Count<KEYPAD_ROWS;Local_Row_Count++)
    3142:	8a 81       	ldd	r24, Y+2	; 0x02
    3144:	8f 5f       	subi	r24, 0xFF	; 255
    3146:	8a 83       	std	Y+2, r24	; 0x02
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	84 30       	cpi	r24, 0x04	; 4
    314c:	08 f4       	brcc	.+2      	; 0x3150 <Keypad_u8Selector+0x1b4>
    314e:	73 cf       	rjmp	.-282    	; 0x3036 <Keypad_u8Selector+0x9a>

		DIO_u8Set_Pin_Val(port_row[Local_Row_Count],pin_row[Local_Row_Count],HIGH);
	}


	return	Local_Return_Status;
    3150:	89 81       	ldd	r24, Y+1	; 0x01
}
    3152:	a9 96       	adiw	r28, 0x29	; 41
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	f8 94       	cli
    3158:	de bf       	out	0x3e, r29	; 62
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	cd bf       	out	0x3d, r28	; 61
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <Button_String_u8Set_Dir>:
 */
#include "../../SERV/stdtypes.h"
#include "../../MCAL/DIO/dio_int.h"
#include "button_cfg.h"
void Button_String_u8Set_Dir(void)
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(FULL_BUTTON_PORT,FULL_INPUT);
    316c:	83 e0       	ldi	r24, 0x03	; 3
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_u8Set_Port_Dir>
	DIO_u8Set_Port_Val(FULL_BUTTON_PORT,FULL_PUE);
    3174:	83 e0       	ldi	r24, 0x03	; 3
    3176:	6f ef       	ldi	r22, 0xFF	; 255
    3178:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_u8Set_Port_Val>
}
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <Button_Pin_u8Set_Dir>:
void Button_Pin_u8Set_Dir(void)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Pin_Dir(BUTTON_PORT,BUTTON_PIN,FULL_INPUT);
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	61 e0       	ldi	r22, 0x01	; 1
    318e:	40 e0       	ldi	r20, 0x00	; 0
    3190:	0e 94 89 09 	call	0x1312	; 0x1312 <DIO_u8Set_Pin_Dir>
	DIO_u8Set_Pin_Val(BUTTON_PORT,BUTTON_PIN,PUE);
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	61 e0       	ldi	r22, 0x01	; 1
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <DIO_u8Set_Pin_Val>
}
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <Button_Pin_u8Get_Val>:
//{
//
//	DIO_u8Get_Port_Val(u8PortIdCopy,*u8pValCopy);
//}
void Button_Pin_u8Get_Val(uint8 * u8pValCopy)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <Button_Pin_u8Get_Val+0x6>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8Get_Pin_Val(BUTTON_PORT,BUTTON_PIN,u8pValCopy);
    31b2:	29 81       	ldd	r18, Y+1	; 0x01
    31b4:	3a 81       	ldd	r19, Y+2	; 0x02
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	a9 01       	movw	r20, r18
    31bc:	0e 94 ad 0b 	call	0x175a	; 0x175a <DIO_u8Get_Pin_Val>
}
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <Seven_Seg_u8Set_Dir>:

const uint8 u8SevenSegArray[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};


void  Seven_Seg_u8Set_Dir(void)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
	DIO_u8Set_Port_Dir(SEVEN_SEGMENT_PORT,FULL_OUTPUT);
    31d2:	82 e0       	ldi	r24, 0x02	; 2
    31d4:	6f ef       	ldi	r22, 0xFF	; 255
    31d6:	0e 94 56 08 	call	0x10ac	; 0x10ac <DIO_u8Set_Port_Dir>
}
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <Seven_Seg_u8Set_Val>:
void Seven_Seg_u8Set_Val(uint8 u8ValCopy)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	0f 92       	push	r0
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	89 83       	std	Y+1, r24	; 0x01
	if((u8ValCopy>=0)&&(u8ValCopy<=9))
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	8a 30       	cpi	r24, 0x0A	; 10
    31f0:	58 f4       	brcc	.+22     	; 0x3208 <Seven_Seg_u8Set_Val+0x28>
	{
		DIO_u8Set_Port_Val(SEVEN_SEGMENT_PORT,u8SevenSegArray[u8ValCopy]);
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	fc 01       	movw	r30, r24
    31fa:	e1 54       	subi	r30, 0x41	; 65
    31fc:	fe 4f       	sbci	r31, 0xFE	; 254
    31fe:	90 81       	ld	r25, Z
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	69 2f       	mov	r22, r25
    3204:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_u8Set_Port_Val>
	}
	else
	{

	}
}
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <main>:
#include "../SERV/stdtypes.h"
#include "../MCAL/DIO/dio_int.h"
#include "../HAL/LCD/lcd_cfg.h"
#include "avr/io.h"
int main(void)
{
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62


	LCD_Init();
    3218:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_Init>
	LCD_WRITE_STRING("T_tot:");
    321c:	80 e6       	ldi	r24, 0x60	; 96
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	0e 94 19 12 	call	0x2432	; 0x2432 <LCD_WRITE_STRING>
	LCD_Write_INT(32769);
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	70 e8       	ldi	r23, 0x80	; 128
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_Write_INT>
    3230:	ff cf       	rjmp	.-2      	; 0x3230 <main+0x20>

00003232 <__prologue_saves__>:
    3232:	2f 92       	push	r2
    3234:	3f 92       	push	r3
    3236:	4f 92       	push	r4
    3238:	5f 92       	push	r5
    323a:	6f 92       	push	r6
    323c:	7f 92       	push	r7
    323e:	8f 92       	push	r8
    3240:	9f 92       	push	r9
    3242:	af 92       	push	r10
    3244:	bf 92       	push	r11
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	ca 1b       	sub	r28, r26
    325c:	db 0b       	sbc	r29, r27
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	09 94       	ijmp

0000326a <__epilogue_restores__>:
    326a:	2a 88       	ldd	r2, Y+18	; 0x12
    326c:	39 88       	ldd	r3, Y+17	; 0x11
    326e:	48 88       	ldd	r4, Y+16	; 0x10
    3270:	5f 84       	ldd	r5, Y+15	; 0x0f
    3272:	6e 84       	ldd	r6, Y+14	; 0x0e
    3274:	7d 84       	ldd	r7, Y+13	; 0x0d
    3276:	8c 84       	ldd	r8, Y+12	; 0x0c
    3278:	9b 84       	ldd	r9, Y+11	; 0x0b
    327a:	aa 84       	ldd	r10, Y+10	; 0x0a
    327c:	b9 84       	ldd	r11, Y+9	; 0x09
    327e:	c8 84       	ldd	r12, Y+8	; 0x08
    3280:	df 80       	ldd	r13, Y+7	; 0x07
    3282:	ee 80       	ldd	r14, Y+6	; 0x06
    3284:	fd 80       	ldd	r15, Y+5	; 0x05
    3286:	0c 81       	ldd	r16, Y+4	; 0x04
    3288:	1b 81       	ldd	r17, Y+3	; 0x03
    328a:	aa 81       	ldd	r26, Y+2	; 0x02
    328c:	b9 81       	ldd	r27, Y+1	; 0x01
    328e:	ce 0f       	add	r28, r30
    3290:	d1 1d       	adc	r29, r1
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	ed 01       	movw	r28, r26
    329e:	08 95       	ret

000032a0 <itoa>:
    32a0:	fb 01       	movw	r30, r22
    32a2:	9f 01       	movw	r18, r30
    32a4:	e8 94       	clt
    32a6:	42 30       	cpi	r20, 0x02	; 2
    32a8:	c4 f0       	brlt	.+48     	; 0x32da <itoa+0x3a>
    32aa:	45 32       	cpi	r20, 0x25	; 37
    32ac:	b4 f4       	brge	.+44     	; 0x32da <itoa+0x3a>
    32ae:	4a 30       	cpi	r20, 0x0A	; 10
    32b0:	29 f4       	brne	.+10     	; 0x32bc <itoa+0x1c>
    32b2:	97 fb       	bst	r25, 7
    32b4:	1e f4       	brtc	.+6      	; 0x32bc <itoa+0x1c>
    32b6:	90 95       	com	r25
    32b8:	81 95       	neg	r24
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	64 2f       	mov	r22, r20
    32be:	77 27       	eor	r23, r23
    32c0:	0e 94 81 19 	call	0x3302	; 0x3302 <__udivmodhi4>
    32c4:	80 5d       	subi	r24, 0xD0	; 208
    32c6:	8a 33       	cpi	r24, 0x3A	; 58
    32c8:	0c f0       	brlt	.+2      	; 0x32cc <itoa+0x2c>
    32ca:	89 5d       	subi	r24, 0xD9	; 217
    32cc:	81 93       	st	Z+, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	a1 f7       	brne	.-24     	; 0x32bc <itoa+0x1c>
    32d4:	16 f4       	brtc	.+4      	; 0x32da <itoa+0x3a>
    32d6:	5d e2       	ldi	r21, 0x2D	; 45
    32d8:	51 93       	st	Z+, r21
    32da:	10 82       	st	Z, r1
    32dc:	c9 01       	movw	r24, r18
    32de:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <strrev>

000032e2 <strrev>:
    32e2:	dc 01       	movw	r26, r24
    32e4:	fc 01       	movw	r30, r24
    32e6:	67 2f       	mov	r22, r23
    32e8:	71 91       	ld	r23, Z+
    32ea:	77 23       	and	r23, r23
    32ec:	e1 f7       	brne	.-8      	; 0x32e6 <strrev+0x4>
    32ee:	32 97       	sbiw	r30, 0x02	; 2
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <strrev+0x18>
    32f2:	7c 91       	ld	r23, X
    32f4:	6d 93       	st	X+, r22
    32f6:	70 83       	st	Z, r23
    32f8:	62 91       	ld	r22, -Z
    32fa:	ae 17       	cp	r26, r30
    32fc:	bf 07       	cpc	r27, r31
    32fe:	c8 f3       	brcs	.-14     	; 0x32f2 <strrev+0x10>
    3300:	08 95       	ret

00003302 <__udivmodhi4>:
    3302:	aa 1b       	sub	r26, r26
    3304:	bb 1b       	sub	r27, r27
    3306:	51 e1       	ldi	r21, 0x11	; 17
    3308:	07 c0       	rjmp	.+14     	; 0x3318 <__udivmodhi4_ep>

0000330a <__udivmodhi4_loop>:
    330a:	aa 1f       	adc	r26, r26
    330c:	bb 1f       	adc	r27, r27
    330e:	a6 17       	cp	r26, r22
    3310:	b7 07       	cpc	r27, r23
    3312:	10 f0       	brcs	.+4      	; 0x3318 <__udivmodhi4_ep>
    3314:	a6 1b       	sub	r26, r22
    3316:	b7 0b       	sbc	r27, r23

00003318 <__udivmodhi4_ep>:
    3318:	88 1f       	adc	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	5a 95       	dec	r21
    331e:	a9 f7       	brne	.-22     	; 0x330a <__udivmodhi4_loop>
    3320:	80 95       	com	r24
    3322:	90 95       	com	r25
    3324:	bc 01       	movw	r22, r24
    3326:	cd 01       	movw	r24, r26
    3328:	08 95       	ret

0000332a <_exit>:
    332a:	f8 94       	cli

0000332c <__stop_program>:
    332c:	ff cf       	rjmp	.-2      	; 0x332c <__stop_program>
